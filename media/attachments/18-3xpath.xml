<xpaths>
<agentd>
    <telemetry-system>
        <subscriptions>
            <dynamic>
                <subscription subscription-id='index-name'>
                    <subscription-id>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>Reference to the identifier of the subscription itself. The id will be the handle to refer to the subscription once created</Description>
                    </subscription-id>
                    <state>
                        <subscription-id>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                                <Description>Identifer of the telemetry subscription. Will be used by configuration operations needing to modify or delete the telemetry subscription</Description>
                        </subscription-id>
                        <sample-interval>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                                <Description>Time in milliseconds between the device's sample of a telemetry data source. For example, setting this to 100 would require the local device to collect the telemetry data every 100 milliseconds. There can be latency or jitter in transmitting the data, but the sample must occur at the specified interval.  The timestamp must reflect the actual time when the data was sampled, not simply the previous sample timestamp + sample-interval.  If sample-interval is set to 0, the telemetry sensor becomes event based. The sensor must then emit data upon every change of the underlying data source.</Description>
                        </sample-interval>
                        <heartbeat-interval>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                                <Description>Maximum time interval in seconds that may pass between updates from a device to a telemetry collector. If this interval expires, but there is no updated data to send (such as if suppress_updates has been configured), the device must send a telemetry message to the collector.</Description>
                        </heartbeat-interval>
                        <suppress-redundant>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Boolean flag to control suppression of redundant telemetry updates to the collector platform. If this flag is set to TRUE, then the collector will only send an update at the configured interval if a subscribed data value has changed. Otherwise, the device will not send an update to the collector until expiration of the heartbeat interval.</Description>
                    </suppress-redundant>
                </state>
                    <sensor-paths>
                        <sensor-path path='index-name'>
                            <path>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                    <Description>Reference to the path of interest</Description>
                            </path>
                            <state>
                                <path>
                                        <Leaf_Type name='string'>
                                        </Leaf_Type>
                                        <Description>Path to a section of operational state of interest (the sensor).</Description>
                                </path>
                                <exclude-filter>
                                        <Leaf_Type name='string'>
                                        </Leaf_Type>
                                        <Description>Filter to exclude certain values out of the state values</Description>
                                </exclude-filter>
                            </state>
                        </sensor-path>
                    </sensor-paths>
                </subscription>
            </dynamic>
        </subscriptions>
    </telemetry-system>
</agentd>
<ancpd_oc>
    <junos>
        <system>
            <subscriber-management>
                <access-network>
                    <ancp>
                        <protocol>
                            <configured-neighbor-count>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Number of neighbors configured</Description>
                            </configured-neighbor-count>
                            <establishing-neighbor-count>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Number of neighbors in the process of establishing adjacency</Description>
                            </establishing-neighbor-count>
                            <established-neighbor-count>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Number of established neighbors</Description>
                            </established-neighbor-count>
                            <not-established-neighbor-count>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Number of neighbors that have lost adjacency</Description>
                            </not-established-neighbor-count>
                            <total-neighbor-count>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Total number of neighbors in all states</Description>
                            </total-neighbor-count>
                            <mapped-static-subscriber-count>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Number of ANCP subscribers mapped to static interfaces by ANCP protocol</Description>
                            </mapped-static-subscriber-count>
                            <port-up-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>Total number of port ups received</Description>
                            </port-up-count>
                            <port-down-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>Total number of port downs received</Description>
                            </port-down-count>
                        </protocol>
                    </ancp>
                </access-network>
            </subscriber-management>
        </system>
    </junos>
</ancpd_oc>
<authd_oc>
    <junos>
        <system>
            <subscriber-management>
                <aaa>
                    <authentication-statistics>
                        <req-received>
                                <Description>The total number of authentication requests</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </req-received>
                        <req-accepted>
                                <Description>The total number of authentication requests that were accepted</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </req-accepted>
                        <req-rejected>
                                <Description>The total number of authentication requests that were rejected</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </req-rejected>
                        <req-challenge>
                                <Description>The total number of authentication requests that were challenged</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </req-challenge>
                        <req-timeout>
                                <Description>The total number of authentication requests that timed out pending response</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </req-timeout>
                        <pre-authen-req-received>
                                <Description>The total number of pre-authentication requests</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </pre-authen-req-received>
                        <pre-authen-req-accepted>
                                <Description>The total number of pre-authentication requests that were accepted</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </pre-authen-req-accepted>
                        <pre-authen-req-rejected>
                                <Description>The total number of pre-authentication requests that were rejected</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </pre-authen-req-rejected>
                        <pre-authen-req-challenge>
                                <Description>The total number of pre-authentication requests that were challenged</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </pre-authen-req-challenge>
                        <pre-authen-req-timeout>
                                <Description>The total number of pre-authentication requests that timed out pending response</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </pre-authen-req-timeout>
                        <re-authen-req-received>
                                <Description>The total number of re-authentication requests</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </re-authen-req-received>
                        <re-authen-req-accepted>
                                <Description>The total number of re-authentication requests that were accepted</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </re-authen-req-accepted>
                        <re-authen-req-rejected>
                                <Description>The total number of re-authentication requests that were rejected</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </re-authen-req-rejected>
                        <re-authen-req-internal-errors>
                                <Description>The total number of re-authentication requests that encountered internal error</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </re-authen-req-internal-errors>
                        <re-authen-req-challenge>
                                <Description>The total number of re-authentication requests that were challenged</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </re-authen-req-challenge>
                        <re-authen-req_timeout>
                                <Description>The total number of re-authentication requests that timed out pending response</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                    </re-authen-req_timeout>
                </authentication-statistics>
                    <accounting-statistics>
                        <acct-req-received>
                                <Description>The total number of accounting requests</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </acct-req-received>
                        <acct-req-timeout>
                                <Description>The total number of accounting requests that timed out pending response</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </acct-req-timeout>
                        <acct-resp-failure>
                                <Description>The total number of failed accounting responses</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </acct-resp-failure>
                        <acct-resp-success>
                                <Description>The total number of successful accounting responses</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </acct-resp-success>
                        <acct-req-start>
                                <Description>The total number of accounting start requests</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </acct-req-start>
                        <acct-req-interim>
                                <Description>The total number of accounting interim requests</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </acct-req-interim>
                        <acct-req-stop>
                                <Description>The total number of accounting stop requests</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </acct-req-stop>
                        <acct-resp-total>
                                <Description>The total number of accounting responses</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </acct-resp-total>
                        <acct-resp-start>
                                <Description>The total number of accounting start responses</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </acct-resp-start>
                        <acct-resp-interim>
                                <Description>The total number of accounting interim responses</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </acct-resp-interim>
                        <acct-resp-stop>
                                <Description>The total number of accounting stop responses</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                    </acct-resp-stop>
                </accounting-statistics>
                    <dynamic-request-statistics>
                        <dynamic-req-received>
                                <Description>The total number of dynamic requests received</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </dynamic-req-received>
                        <dynamic-req-success>
                                <Description>The total number of dynamic requests processed successfully</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </dynamic-req-success>
                        <dynamic-req-error>
                                <Description>The total number of dynamic requests processed with error</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </dynamic-req-error>
                        <dynamic-req-silently-drop>
                                <Description>The total number of dynamic requests dropped silently</Description>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                    </dynamic-req-silently-drop>
                </dynamic-request-statistics>
                    <radius-servers>
                        <radius-server server-address='index-name'>
                            <server-address>
                                    <Description>The RADIUS server IPv4 address (format a.b.c.d)</Description>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                            </server-address>
                            <statistics>
                                <server-last-rtt>
                                        <Description>Last round-trip delay time in milliseconds</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </server-last-rtt>
                                <auth-access-requests>
                                        <Description>The total number of access requests</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </auth-access-requests>
                                <auth-rollover-requests>
                                        <Description>The total number of access requests that were rolled over to the next server</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </auth-rollover-requests>
                                <auth-retransmissions>
                                        <Description>The total number of retransmitted access requests</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </auth-retransmissions>
                                <auth-access-accepts>
                                        <Description>The total number of access requests that were accepted</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </auth-access-accepts>
                                <auth-access-rejects>
                                        <Description>The total number of access requests that were rejected</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </auth-access-rejects>
                                <auth-access-challenges>
                                        <Description>The total number of access challenge requests</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </auth-access-challenges>
                                <auth-malformed-responses>
                                        <Description>The total number of malformed authentication responses</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </auth-malformed-responses>
                                <auth-bad-authenticators>
                                        <Description>The total number of authentication responses with an invalid authenticator</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </auth-bad-authenticators>
                                <auth-req-pending>
                                        <Description>The total number of access requests that are pending a response</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </auth-req-pending>
                                <auth-request-timeouts>
                                        <Description>The total number of access requests that timed out pending response</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </auth-request-timeouts>
                                <auth-unknown-responses>
                                        <Description>The total number of authentication responses with an unknown message code</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </auth-unknown-responses>
                                <auth-packets-dropped>
                                        <Description>The total number of authentication responses that were dropped due to bad parameters</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </auth-packets-dropped>
                                <preauth-access-requests>
                                        <Description>The total number of pre-authentication access requests</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </preauth-access-requests>
                                <preauth-rollover-requests>
                                        <Description>The total number of pre-authentication access requests that were rolled over to next server</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </preauth-rollover-requests>
                                <preauth-retransmissions>
                                        <Description>The total number of retransmitted pre-authentication access requests</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </preauth-retransmissions>
                                <preauth-access-accepts>
                                        <Description>The total number of pre-authentication access requests that were accepted</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </preauth-access-accepts>
                                <preauth-access-rejects>
                                        <Description>The total number of pre-authentication access requests that were rejected</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </preauth-access-rejects>
                                <preauth-access-challenges>
                                        <Description>The total number of pre-authentication access challenge requests</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </preauth-access-challenges>
                                <preauth-malformed-responses>
                                        <Description>The total number of malformed pre-authentication responses</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </preauth-malformed-responses>
                                <preauth-bad-authenticators>
                                        <Description>The total number of pre-authentication responses with an invalid authenticator</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </preauth-bad-authenticators>
                                <preauth-req-pending>
                                        <Description>The total number of pre-authentication access requests that are pending a response</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </preauth-req-pending>
                                <preauth-request-timeouts>
                                        <Description>The total number of pre-authentication access requests that timed out pending response</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </preauth-request-timeouts>
                                <preauth-unknown-responses>
                                        <Description>The total number of pre-authentication responses with an unknown message code</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </preauth-unknown-responses>
                                <preauth-packets-dropped>
                                        <Description>The total number of pre-authentication responses that were dropped due to bad parameters</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </preauth-packets-dropped>
                                <acct-start-requests>
                                        <Description>The total number of accounting start requests</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </acct-start-requests>
                                <acct-interim-requests>
                                        <Description>The total number of accounting interim requests</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </acct-interim-requests>
                                <acct-stop-requests>
                                        <Description>The total number of accounting stop requests</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </acct-stop-requests>
                                <acct-rollover-requests>
                                        <Description>The total number of accounting requests that were rolled over to next RADIUS server</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </acct-rollover-requests>
                                <acct-retransmissions>
                                        <Description>The total number of retransmitted accounting requests</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </acct-retransmissions>
                                <acct-start-responses>
                                        <Description>The total number of accounting start responses</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </acct-start-responses>
                                <acct-interim-responses>
                                        <Description>The total number of accounting interim responses</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </acct-interim-responses>
                                <acct-stop-responses>
                                        <Description>The total number of accounting stop responses</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </acct-stop-responses>
                                <acct-malformed-responses>
                                        <Description>The total number of malformed accounting responses</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </acct-malformed-responses>
                                <acct-bad-authenticators>
                                        <Description>The total number of accounting responses with an invalid authenticator</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </acct-bad-authenticators>
                                <acct-req-pending>
                                        <Description>The total number of accounting requests that are pending a response</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </acct-req-pending>
                                <acct-request-timeouts>
                                        <Description>The total number of accounting requests that timed out pending response</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </acct-request-timeouts>
                                <acct-unknown-responses>
                                        <Description>The total number of accounting responses with an unknown message code</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </acct-unknown-responses>
                                <acct-packets-dropped>
                                        <Description>The total number of accounting responses dropped due to bad parameters</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                            </acct-packets-dropped>
                        </statistics>
                            <response-time>
                                <one-minute-minimum-response-time>
                                        <Description>The minimum response time measured over a 1 minute interval</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </one-minute-minimum-response-time>
                                <one-minute-average-response-time>
                                        <Description>The average response time measured over a 1 minute interval</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </one-minute-average-response-time>
                                <one-minute-maximum-response-time>
                                        <Description>The maximum response time measured over a 1 minute interval</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </one-minute-maximum-response-time>
                                <one-minute-messages-sent>
                                        <Description>The total number of messages sent over a 1 minute interval</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </one-minute-messages-sent>
                                <one-minute-messages-received>
                                        <Description>The total number of messages received over a 1 minute interval</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </one-minute-messages-received>
                                <one-minute-messages-no-response>
                                        <Description>The total number of messages pending response over a 1 minute interval</Description>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                    </one-minute-messages-no-response>
                </response-time>
            </radius-server>
        </radius-servers>
                    <address-assignment-statistics>
                        <logical-system-routing-instances>
                            <logical-system-routing-instance name='index-name'>
                                <name>
                                        <Description>The logical-system and routing-instance name in ls:ri format</Description>
                                        <Leaf_Type name='string'>
                                        </Leaf_Type>
                                </name>
                                <pools>
                                    <pool pool-name='index-name'>
                                        <pool-name>
                                                <Description>The address pool name</Description>
                                                <Leaf_Type name='string'>
                                                </Leaf_Type>
                                        </pool-name>
                                        <out-of-memory>
                                                <Description>The total number of failed address assignments due to a memory allocation failure</Description>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </out-of-memory>
                                        <out-of-address>
                                                <Description>The total number of failed address assignments due to no address available</Description>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </out-of-address>
                                        <address-total>
                                                <Description>The total number of addresses configured</Description>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </address-total>
                                        <address-in-use>
                                                <Description>The total number of addresses in-use</Description>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </address-in-use>
                                        <address-usage-percent>
                                                <Description>The percentage of addresses in-use</Description>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </address-usage-percent>
                                    </pool>
                                </pools>
                            </logical-system-routing-instance>
                        </logical-system-routing-instances>
                    </address-assignment-statistics>
                </aaa>
            </subscriber-management>
        </system>
    </junos>
</authd_oc>
<bbe-smgd_ancp_stats_oc>
    <junos>
        <system>
            <subscriber-management>
                <access-network>
                    <ancp>
                        <adapter>
                            <mapped-dynamic-subscriber-count>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Number of ANCP subscribers mapped to dynamic interfaces by ANCP adapter</Description>
                            </mapped-dynamic-subscriber-count>
                        </adapter>
                    </ancp>
                </access-network>
            </subscriber-management>
        </system>
    </junos>
</bbe-smgd_ancp_stats_oc>
<bbe-smgd_pppoe_stats_oc>
    <junos>
        <system>
            <subscriber-management>
                <client-protocols>
                    <pppoe>
                        <statistics>
                            <padi-packets-sent>
                                    <Description>The number of PPPoE Active Discovery Initiation (PADI) packets transmitted by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </padi-packets-sent>
                            <padi-packets-received>
                                    <Description>The number of PPPoE Active Discovery Initiation (PADI) packets received by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </padi-packets-received>
                            <pado-packets-sent>
                                    <Description>The number of PPPoE Active Discovery Offer (PADO) packets transmitted by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </pado-packets-sent>
                            <pado-packets-received>
                                    <Description>The number of PPPoE Active Discovery Offer (PADO) packets received by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </pado-packets-received>
                            <padr-packets-sent>
                                    <Description>The number of PPPoE Active Discovery Request (PADR) packets transmitted by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </padr-packets-sent>
                            <padr-packets-received>
                                    <Description>The number of PPPoE Active Discovery Request (PADR) packets received by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </padr-packets-received>
                            <pads-packets-sent>
                                    <Description>The number of PPPoE Active Discovery Session-Confirmation (PADS) packets transmitted by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </pads-packets-sent>
                            <pads-packets-received>
                                    <Description>The number of PPPoE Active Discovery Session-Confirmation (PADS) packets received by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </pads-packets-received>
                            <padt-packets-sent>
                                    <Description>The number of PPPoE Active Discovery Terminate (PADT) packets transmitted by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </padt-packets-sent>
                            <padt-packets-received>
                                    <Description>The number of PPPoE Active Discovery Terminate (PADT) packets received by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </padt-packets-received>
                            <service-error-sent>
                                    <Description>The number of PPPoE service error packets transmitted by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </service-error-sent>
                            <service-error-received>
                                    <Description>The number of PPPoE service error packets received by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </service-error-received>
                            <ac-error-sent>
                                    <Description>The number of PPPoE ac error packets transmitted by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </ac-error-sent>
                            <ac-error-received>
                                    <Description>The number of PPPoE ac error packets received by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </ac-error-received>
                            <generic-error-sent>
                                    <Description>The number of PPPoE generic error packets transmitted by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </generic-error-sent>
                            <generic-error-received>
                                    <Description>The number of PPPoE generic error packets received by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </generic-error-received>
                            <malformed-packets-received>
                                    <Description>The number of PPPoE malformed packets received by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </malformed-packets-received>
                            <unknown-packets-received>
                                    <Description>The number of PPPoE unknown packets received by the PPPoE protocol module</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </unknown-packets-received>
                            <era-inflight-count>
                                    <Description>The count of in-flight PPPoE sessions reported to the Event Rate Analyzer (ERA)</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </era-inflight-count>
                            <era-reported-successes>
                                    <Description>The count of successful PPPoE sessions reported to the Event Rate Analyzer (ERA)</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </era-reported-successes>
                            <era-reported-failures>
                                    <Description>The count of failed PPPoE sessions reported to the Event Rate Analyzer (ERA)</Description>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </era-reported-failures>
                        </statistics>
                    </pppoe>
                </client-protocols>
            </subscriber-management>
        </system>
    </junos>
</bbe-smgd_pppoe_stats_oc>
<bbe-smgd_rsmon_dbg_oc>
    <debug>
        <system>
            <subscriber-management>
                <infra>
                    <resource-monitor>
                        <fpcs>
                            <fpc slot='index-name'>
                                <slot>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </slot>
                                <statistics>
                                    <average-rtt>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>The average RE to FPC round-trip delay</Description>
                                    </average-rtt>
                                    <current-rtt>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>The last measured RE to FPC round-trip delay</Description>
                                    </current-rtt>
                                </statistics>
                            </fpc>
                        </fpcs>
                    </resource-monitor>
                </infra>
            </subscriber-management>
        </system>
    </debug>
</bbe-smgd_rsmon_dbg_oc>
<bbe-smgd_rsmon_stats_oc>
    <junos>
        <system>
            <subscriber-management>
                <infra>
                    <resource-monitor>
                        <rsmon-infra>
                            <fpcs>
                                <fpc slot='index-name'>
                                    <slot>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                    </slot>
                                    <delay-round-trip-exceeded>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Count of RTT threshold exceeded crossing events</Description>
                                    </delay-round-trip-exceeded>
                                    <delay-round-trip-nominal>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Count of RTT threshold nominal crossing events</Description>
                                    </delay-round-trip-nominal>
                                </fpc>
                            </fpcs>
                        </rsmon-infra>
                    </resource-monitor>
                </infra>
            </subscriber-management>
        </system>
    </junos>
</bbe-smgd_rsmon_stats_oc>
<bbe-smgd_smd_queue_stats_oc>
    <debug>
        <system>
            <subscriber-management>
                <infra>
                    <era>
                        <io-to-smd-dvlan-q-count>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </io-to-smd-dvlan-q-count>
                        <io-to-smd-dvlan-max-q-count>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </io-to-smd-dvlan-max-q-count>
                        <io-to-smd-padi-q-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </io-to-smd-padi-q-cnt>
                        <io-to-smd-padi-q-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </io-to-smd-padi-q-cnt-peak>
                        <io-to-smd-discover-q-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </io-to-smd-discover-q-cnt>
                        <io-to-smd-discover-q-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </io-to-smd-discover-q-cnt-peak>
                        <io-to-smd-solicit-q-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </io-to-smd-solicit-q-cnt>
                        <io-to-smd-solicit-q-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </io-to-smd-solicit-q-cnt-peak>
                        <io-to-smd-dhcp-q-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </io-to-smd-dhcp-q-cnt>
                        <io-to-smd-dhcp-q-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </io-to-smd-dhcp-q-cnt-peak>
                        <io-to-smd-total-q-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </io-to-smd-total-q-cnt>
                        <io-to-smd-total-q-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </io-to-smd-total-q-cnt-peak>
                        <smd-dvlan-q-count>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-dvlan-q-count>
                        <smd-dvlan-max-q-count>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-dvlan-max-q-count>
                        <smd-padi-q-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-padi-q-cnt>
                        <smd-padi-q-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-padi-q-cnt-peak>
                        <smd-discover-q-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-discover-q-cnt>
                        <smd-discover-q-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-discover-q-cnt-peak>
                        <smd-solicit-q-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-solicit-q-cnt>
                        <smd-solicit-q-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-solicit-q-cnt-peak>
                        <smd-dhcp-q-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-dhcp-q-cnt>
                        <smd-dhcp-q-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-dhcp-q-cnt-peak>
                        <smd-total-q-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-total-q-cnt>
                        <smd-total-q-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-total-q-cnt-peak>
                        <smd-notification-queue-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-notification-queue-cnt>
                        <smd-notification-queue-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-notification-queue-cnt-peak>
                        <smd-message-queue-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-message-queue-cnt>
                        <smd-message-queue-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-message-queue-cnt-peak>
                        <smd-packet-queue-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-packet-queue-cnt>
                        <smd-packet-queue-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-packet-queue-cnt-peak>
                        <smd-packet-low-queue-cnt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-packet-low-queue-cnt>
                        <smd-packet-low-queue-cnt-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </smd-packet-low-queue-cnt-peak>
                        <io-pkt-count-low>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-pkt-count-low>
                        <io-pkt-count-mlow>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-pkt-count-mlow>
                        <io-pkt-count-med>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-pkt-count-med>
                        <io-pkt-count-high>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-pkt-count-high>
                        <io-packets-dropped-low>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-packets-dropped-low>
                        <io-packets-dropped-mlow>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-packets-dropped-mlow>
                        <io-packets-dropped-med>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-packets-dropped-med>
                        <io-packets-dropped-high>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-packets-dropped-high>
                        <io-packets-dropped-padi-qlen>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-packets-dropped-padi-qlen>
                        <io-packets-dropped-padi-imbalance>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-packets-dropped-padi-imbalance>
                        <io-packets-dropped-discover-qlen>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-packets-dropped-discover-qlen>
                        <io-packets-dropped-discover-imbalance>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-packets-dropped-discover-imbalance>
                        <io-packets-dropped-solicit-qlen>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-packets-dropped-solicit-qlen>
                        <io-packets-dropped-solicit-imbalance>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-packets-dropped-solicit-imbalance>
                        <io-packets-dropped-dvlan-qlen>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-packets-dropped-dvlan-qlen>
                        <io-packets-dropped-dvlan-imbalance>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </io-packets-dropped-dvlan-imbalance>
                        <max-allowed-in-flight-current>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </max-allowed-in-flight-current>
                        <max-allowed-in-flight-actual>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </max-allowed-in-flight-actual>
                        <max-allowed-in-flight-current-absolute>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </max-allowed-in-flight-current-absolute>
                        <max-allowed-in-flight-max-ever-absolute>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </max-allowed-in-flight-max-ever-absolute>
                        <min-allowed-in-flight>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </min-allowed-in-flight>
                        <max-low-pri-pkt-to-enqueue>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </max-low-pri-pkt-to-enqueue>
                        <in-flight-dvlan>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-flight-dvlan>
                        <in-flight-dvlan-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-flight-dvlan-peak>
                        <in-flight-dhcp>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-flight-dhcp>
                        <in-flight-dhcp-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-flight-dhcp-peak>
                        <in-flight-ppp>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-flight-ppp>
                        <in-flight-ppp-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-flight-ppp-peak>
                        <in-flight-total>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-flight-total>
                        <in-flight-total-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-flight-total-peak>
                        <in-nego-dvlan>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-nego-dvlan>
                        <in-nego-dvlan-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-nego-dvlan-peak>
                        <in-nego-dhcp>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-nego-dhcp>
                        <in-nego-dhcp-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-nego-dhcp-peak>
                        <in-nego-ppp>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-nego-ppp>
                        <in-nego-ppp-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-nego-ppp-peak>
                        <in-nego-total>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-nego-total>
                        <in-nego-total-peak>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </in-nego-total-peak>
                        <in-nego-overrides>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
</in-nego-overrides>
</era>
</infra>
</subscriber-management>
</system>
</debug>
</bbe-smgd_smd_queue_stats_oc>
<bbe-smgd_sub_mgmt_network_stats_oc>
    <junos>
        <system>
            <subscriber-management>
                <infra>
                    <network>
                        <io>
                            <l2-rx-packets-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-packets-cnt>
                            <l2-rx-packets-failed>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-packets-failed>
                            <l2-rx-malformed-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-malformed-cnt>
                            <l2-rx-ifd-invalid>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-ifd-invalid>
                            <l2-rx-ifl-invalid>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-ifl-invalid>
                            <l2-rx-no-iff-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-no-iff-cnt>
                            <l2-rx-if-create-failed>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-if-create-failed>
                            <l2-bbe-io-rcv-l3-unknown-address-family>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-bbe-io-rcv-l3-unknown-address-family>
                            <l2-rx-unsupported-inet-protocol>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-unsupported-inet-protocol>
                            <l2-rx-unsupported-inet6-protocol>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-unsupported-inet6-protocol>
                            <l2-rx-unsupported-udp-protocol>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-unsupported-udp-protocol>
                            <l2-rx-unsupported-punt-af>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-unsupported-punt-af>
                            <l2-rx-v4-data-path-punt-pkt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-v4-data-path-punt-pkt>
                            <l2-rx-v4-data-path-punt-pkt-drop>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-v4-data-path-punt-pkt-drop>
                            <l2-rx-v6-data-path-punt-pkt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-v6-data-path-punt-pkt>
                            <l2-rx-v6-data-path-punt-pkt-drop>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-rx-v6-data-path-punt-pkt-drop>
                            <l2-tx-packets-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-tx-packets-cnt>
                            <l2-tx-malformed-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-tx-malformed-cnt>
                            <l2-tx-no-ifd-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-tx-no-ifd-cnt>
                            <l2-tx-ifl-invalid>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-tx-ifl-invalid>
                            <l2-bbe-io-send-tx-failed>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-bbe-io-send-tx-failed>
                            <l2-bbe-io-send-tx-failed-partial>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-bbe-io-send-tx-failed-partial>
                            <l2-tx-v4-out-error-local-intf>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-tx-v4-out-error-local-intf>
                            <l2-tx-v6-out-error-local-intf>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l2-tx-v6-out-error-local-intf>
                            <l3-rx-packet-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l3-rx-packet-cnt>
                            <l3-rx-unsupported-protocol>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l3-rx-unsupported-protocol>
                            <l3-tx-packet-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l3-tx-packet-cnt>
                            <l3-tx-send-failed>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l3-tx-send-failed>
                            <l3-tx-v4-kernel-forward>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l3-tx-v4-kernel-forward>
                            <l3-tx-v4-kernel-forward-drops>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l3-tx-v4-kernel-forward-drops>
                            <l3-tx-v6-kernel-forward>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </l3-tx-v6-kernel-forward>
                            <l3-tx-v6-kernel-forward-drops>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                        </l3-tx-v6-kernel-forward-drops>
                    </io>
                        <dhcp>
                            <rx-packet-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-packet-cnt>
                            <era-drops>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </era-drops>
                            <rx-no-connection>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-no-connection>
                            <rx-malformed-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-malformed-cnt>
                            <rx-no-if-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-no-if-cnt>
                            <rx-ifl-invalid>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-ifl-invalid>
                            <rx-send-failed>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-send-failed>
                            <tx-packet-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-packet-cnt>
                            <packets-transmitted>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </packets-transmitted>
                            <tx-malformed-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-malformed-cnt>
                            <tx-null-pkt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-null-pkt>
                            <tx-no-if-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-no-if-cnt>
                            <tx-no-iff-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-no-iff-cnt>
                            <tx-no-rtt-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-no-rtt-cnt>
                            <tx-arp-failed>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-arp-failed>
                            <tx-if-invalid>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-if-invalid>
                            <tx-send-failed>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-send-failed>
                            <rx-while-not-connected>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                        </rx-while-not-connected>
                    </dhcp>
                        <ppp>
                            <rx-network-pkt-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-network-pkt-cnt>
                            <rx-plugin-pkt-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-plugin-pkt-cnt>
                            <rx-lcp-conf-req-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-lcp-conf-req-cnt>
                            <rx-lcp-conf-ack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-lcp-conf-ack-cnt>
                            <rx-lcp-conf-nack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-lcp-conf-nack-cnt>
                            <rx-lcp-conf-rej-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-lcp-conf-rej-cnt>
                            <rx-lcp-term-req-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-lcp-term-req-cnt>
                            <rx-lcp-term-ack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-lcp-term-ack-cnt>
                            <rx-lcp-code-rej-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-lcp-code-rej-cnt>
                            <rx-lcp-protocol-rej-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-lcp-protocol-rej-cnt>
                            <rx-lcp-echo-req-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-lcp-echo-req-cnt>
                            <rx-lcp-echo-reply-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-lcp-echo-reply-cnt>
                            <rx-pap-req-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-pap-req-cnt>
                            <rx-pap-ack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-pap-ack-cnt>
                            <rx-pap-nack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-pap-nack-cnt>
                            <rx-chap-challenge-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-chap-challenge-cnt>
                            <rx-chap-resp-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-chap-resp-cnt>
                            <rx-chap-success-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-chap-success-cnt>
                            <rx-chap-failure-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-chap-failure-cnt>
                            <rx-ipcp-req-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-ipcp-req-cnt>
                            <rx-ipcp-ack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-ipcp-ack-cnt>
                            <rx-ipcp-nack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-ipcp-nack-cnt>
                            <rx-ipv6cp-req-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-ipv6cp-req-cnt>
                            <rx-ipv6cp-ack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-ipv6cp-ack-cnt>
                            <rx-ipv6cp-nack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-ipv6cp-nack-cnt>
                            <rx-malformed-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-malformed-cnt>
                            <rx-no-if-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-no-if-cnt>
                            <rx-unsupported>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-unsupported>
                            <tx-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-cnt>
                            <tx-lcp-conf-req-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-lcp-conf-req-cnt>
                            <tx-lcp-conf-ack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-lcp-conf-ack-cnt>
                            <tx-lcp-conf-nack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-lcp-conf-nack-cnt>
                            <tx-lcp-echo-req-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-lcp-echo-req-cnt>
                            <tx-lcp-echo-reply-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-lcp-echo-reply-cnt>
                            <tx-lcp-term-req-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-lcp-term-req-cnt>
                            <tx-lcp-term-ack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-lcp-term-ack-cnt>
                            <tx-pap-req-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-pap-req-cnt>
                            <tx-pap-ack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-pap-ack-cnt>
                            <tx-pap-nack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-pap-nack-cnt>
                            <tx-chap-challenge-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-chap-challenge-cnt>
                            <tx-chap-resp-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-chap-resp-cnt>
                            <tx-chap-success-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-chap-success-cnt>
                            <tx-chap-failure-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-chap-failure-cnt>
                            <tx-ipcp-req-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-ipcp-req-cnt>
                            <tx-ipcp-ack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-ipcp-ack-cnt>
                            <tx-ipcp-nack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-ipcp-nack-cnt>
                            <tx-ipv6cp-req-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-ipv6cp-req-cnt>
                            <tx-ipv6cp-ack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-ipv6cp-ack-cnt>
                            <tx-ipv6cp-nack-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-ipv6cp-nack-cnt>
                            <tx-unknown-pkt-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-unknown-pkt-cnt>
                            <tx-send-failed>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-send-failed>
                            <tx-malformed-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                        </tx-malformed-cnt>
                    </ppp>
                        <pppoe>
                            <rx-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-cnt>
                            <rx-padi-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-padi-cnt>
                            <rx-padr-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-padr-cnt>
                            <rx-ppp-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-ppp-cnt>
                            <rx-malformed-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-malformed-cnt>
                            <rx-no-if-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-no-if-cnt>
                            <rx-unsupported>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-unsupported>
                            <rx-padi-era-discards>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-padi-era-discards>
                            <tx-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-cnt>
                            <tx-send-failed>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                        </tx-send-failed>
                    </pppoe>
                        <l2tp>
                            <rx-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-cnt>
                            <rx-pkt-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-pkt-cnt>
                            <ppp-rx-pkt-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-pkt-cnt>
                            <tx-pkt-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-pkt-cnt>
                            <ppp-rx-lcp-conf-req-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-lcp-conf-req-count>
                            <ppp-rx-lcp-conf-ack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-lcp-conf-ack-count>
                            <ppp-rx-lcp-conf-nack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-lcp-conf-nack-count>
                            <ppp-rx-lcp-term-req-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-lcp-term-req-count>
                            <ppp-rx-lcp-term-ack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-lcp-term-ack-count>
                            <ppp-rx-lcp-echo-req-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-lcp-echo-req-count>
                            <ppp-rx-lcp-echo-resp-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-lcp-echo-resp-count>
                            <ppp-rx-pap-req-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-pap-req-count>
                            <ppp-rx-pap-ack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-pap-ack-count>
                            <ppp-rx-pap-nack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-pap-nack-count>
                            <ppp-rx-chap-challenge-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-chap-challenge-count>
                            <ppp-rx-chap-resp-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-chap-resp-count>
                            <ppp-rx-chap-success-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-chap-success-count>
                            <ppp-rx-chap-fail-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-chap-fail-count>
                            <ppp-rx-ipcp-conf-req-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-ipcp-conf-req-count>
                            <ppp-rx-ipcp-conf-ack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-ipcp-conf-ack-count>
                            <ppp-rx-ipcp-conf-nack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-ipcp-conf-nack-count>
                            <rx-malformed-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-malformed-cnt>
                            <ppp-rx-unknown-protocol>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-rx-unknown-protocol>
                            <rx-msg-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-msg-cnt>
                            <rx-msg-processd-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-msg-processd-cnt>
                            <rx-msg-err>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-msg-err>
                            <rx-invalid-msg-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </rx-invalid-msg-cnt>
                            <tx-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-cnt>
                            <ppp-tx-lcp-conf-req-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-lcp-conf-req-count>
                            <ppp-tx-lcp-conf-ack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-lcp-conf-ack-count>
                            <ppp-tx-lcp-conf-nack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-lcp-conf-nack-count>
                            <ppp-tx-lcp-echo-req-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-lcp-echo-req-count>
                            <ppp-tx-lcp-echo-resp-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-lcp-echo-resp-count>
                            <ppp-tx-lcp-term-req-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-lcp-term-req-count>
                            <ppp-tx-lcp-term-ack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-lcp-term-ack-count>
                            <ppp-tx-pap-req-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-pap-req-count>
                            <ppp-tx-pap-ack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-pap-ack-count>
                            <ppp-tx-pap-nack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-pap-nack-count>
                            <ppp-tx-chap-challenge-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-chap-challenge-count>
                            <ppp-tx-chap-resp-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-chap-resp-count>
                            <ppp-tx-chap-success-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-chap-success-count>
                            <ppp-tx-chap-fail-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-chap-fail-count>
                            <ppp-tx-ipcp-conf-req-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-ipcp-conf-req-count>
                            <ppp-tx-ipcp-conf-ack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-ipcp-conf-ack-count>
                            <ppp-tx-ipcp-conf-nack-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-ipcp-conf-nack-count>
                            <ppp-tx-unknown-protocol>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </ppp-tx-unknown-protocol>
                            <tx-pkt-send-failed>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-pkt-send-failed>
                            <tx-pkt-err>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-pkt-err>
                            <tx-msg-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </tx-msg-cnt>
                            <tx-msg-err>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                        </tx-msg-err>
                    </l2tp>
                        <dvlan>
                            <rx-packet-cnt>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
</rx-packet-cnt>
</dvlan>
</network>
</infra>
</subscriber-management>
</system>
</junos>
</bbe-smgd_sub_mgmt_network_stats_oc>
<chassisd_oc>
    <components>
        <component name='index-name'>
            <name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
                    <Description>References the component name</Description>
            </name>
            <state>
                <name>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                        <Description>Device name for the component -- this may not be a configurable parameter on many implementations</Description>
                </name>
                <type>
                        <Leaf_Type name='union'>
                            <Leaf_Type name='Identity'/>
                            <Leaf_Type name='Identity'/>
                        </Leaf_Type>
                        <Description>Type of component as identified by the system</Description>
                </type>
                <id>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                        <Description>Unique identifier assigned by the system for the component</Description>
                </id>
                <description>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                        <Description>System-supplied description of the component</Description>
                </description>
                <mfg-name>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                        <Description>System-supplied identifier for the manufacturer of the component.  This data is particularly useful when a component manufacturer is different than the overall device vendor.</Description>
                </mfg-name>
                <version>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                        <Description>System-defined version string for a hardware, firmware, or software component.</Description>
                </version>
                <serial-no>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                        <Description>System-assigned serial number of the component.</Description>
                </serial-no>
                <part-no>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                        <Description>System-assigned part number for the component.  This should be present in particular if the component is also an FRU (field replacable unit)</Description>
            </part-no>
        </state>
            <properties>
                <property name='index-name'>
                    <name>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                            <Description>Reference to the property name.</Description>
                    </name>
                    <state>
                        <value>
                                <Leaf_Type name='union'>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Leaf_Type name='int64'>
                                    </Leaf_Type>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Leaf_Type name='decimal64'>
                                    </Leaf_Type>
                                </Leaf_Type>
                                <Description>Property values can take on a variety of types.  Signed and unsigned integer types may be provided in smaller sizes, e.g., int8, uint16, etc.</Description>
            </value>
        </state>
    </property>
</properties>
            <subcomponents>
                <subcomponent name='index-name'>
                    <name>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                            <Description>Reference to the subcomponent name</Description>
                    </name>
                    <state>
                        <name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                                <Description>Name of the subcomponent -- should reflect the name of the referenced component</Description>
                        </name>
                    </state>
                </subcomponent>
            </subcomponents>
        </component>
    </components>
</chassisd_oc>
<dcd_oc>
    <interfaces>
        <interface name='index-name'>
            <name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
            </name>
            <aggregation>
                <state>
                    <lag-type>
                            <Leaf_Type name='Enumerations'> ['LACP', 'STATIC']</Leaf_Type>
                            <Description>Sets the type of LAG, i.e., how it is configured / maintained</Description>
                    </lag-type>
                    <min-links>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                            <Description>Specifies the mininum number of member interfaces that must be active for the aggregate interface to be available</Description>
                    </min-links>
                    <lag-speed>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                            <Description>Reports effective speed of the aggregate interface, based on speed of active member interfaces</Description>
                    </lag-speed>
                    <member>
                            <Description>List of current member interfaces for the aggregate, expressed as references to existing interfaces</Description>
                    </member>
                </state>
            </aggregation>
        </interface>
    </interfaces>
</dcd_oc>
<eventd>
    <junos>
        <events>
            <event id_type_priority_facility='index-name'>
                <id>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </id>
                <type>
                        <Leaf_Type name='Enumerations'> ['EVENT_NONE', 'EVENT_INTERNAL', 'EVENT_SYSLOG', 'EVENT_PSEUDO_SYSLOG']</Leaf_Type>
                </type>
                <timestamp>
                    <seconds>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </seconds>
                    <microseconds>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                </microseconds>
            </timestamp>
                <priority>
                        <Leaf_Type name='Enumerations'> ['LOG_EMERG', 'LOG_ALERT', 'LOG_CRIT', 'LOG_ERR', 'LOG_WARNING', 'LOG_NOTICE', 'LOG_INFO', 'LOG_DEBUG']</Leaf_Type>
                </priority>
                <facility>
                        <Leaf_Type name='Enumerations'> ['LOG_KERN', 'LOG_USER', 'LOG_MAIL', 'LOG_DAEMON', 'LOG_AUTH', 'LOG_SYSLOG', 'LOG_LPR', 'LOG_NEWS', 'LOG_UUCP', 'LOG_CRON', 'LOG_AUTHPRIV', 'LOG_FTP', 'LOG_LOCAL0', 'LOG_LOCAL1', 'LOG_LOCAL2', 'LOG_LOCAL3', 'LOG_LOCAL4', 'LOG_LOCAL5', 'LOG_LOCAL6', 'LOG_LOCAL7']</Leaf_Type>
                </facility>
                <pid>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </pid>
                <message>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </message>
                <daemon>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </daemon>
                <hostname>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </hostname>
                <lsname>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </lsname>
                <attributes key='index-name'>
                    <key>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </key>
                    <value>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                </value>
            </attributes>
                <logoptions>
                        <Leaf_Type name='int32'>
                        </Leaf_Type>
</logoptions>
</event>
</events>
</junos>
</eventd>
<jdhcpd_oc>
    <junos>
        <system>
            <subscriber-management>
                <client-protocols>
                    <dhcp>
                        <v4>
                            <dropped-total>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-total>
                            <dropped-bad-read>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-bad-read>
                            <dropped-ip-header>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-ip-header>
                            <dropped-short-packet>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-short-packet>
                            <dropped-no-interface>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-no-interface>
                            <dropped-no-routing-instance>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-no-routing-instance>
                            <dropped-no-memory>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-no-memory>
                            <dropped-recovery-in-progress>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-recovery-in-progress>
                            <era-inflight-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </era-inflight-count>
                            <era-reported-failures>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </era-reported-failures>
                            <era-reported-successes>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </era-reported-successes>
                            <routing-instances>
                                <routing-instance ri-name='index-name'>
                                    <ri-name>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                    </ri-name>
                                    <server>
                                        <statistics>
                                            <dropped-v4server-total>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-total>
                                            <dropped-v4server-bad-hware>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-bad-hware>
                                            <dropped-v4server-bootp-pkt>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-bootp-pkt>
                                            <dropped-v4server-bad-bootp-opcode>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-bad-bootp-opcode>
                                            <dropped-v4server-bad-options>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-bad-options>
                                            <dropped-v4server-bad-address>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-bad-address>
                                            <dropped-v4server-no-address>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-no-address>
                                            <dropped-v4server-no-interface-cfg>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-no-interface-cfg>
                                            <dropped-v4server-no-local-address>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-no-local-address>
                                            <dropped-v4server-short-pkt>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-short-pkt>
                                            <dropped-v4server-no-bad-send>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-no-bad-send>
                                            <dropped-v4server-no-option60>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-no-option60>
                                            <dropped-v4server-no-option82>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-no-option82>
                                            <dropped-v4server-authentication>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-authentication>
                                            <dropped-v4server-dynamic-profile>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-dynamic-profile>
                                            <dropped-v4server-no-license>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-no-license>
                                            <dropped-v4server-no-bad-dhcp-opcode>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-no-bad-dhcp-opcode>
                                            <dropped-v4server-no-options>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-no-options>
                                            <dropped-v4server-hop-limit>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-hop-limit>
                                            <dropped-v4server-ttl-expired>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-ttl-expired>
                                            <dropped-v4server-bad_udp-checksum>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-bad_udp-checksum>
                                            <dropped-v4server-inactive-vlan>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-inactive-vlan>
                                            <dropped-v4server-era-start-failed>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-era-start-failed>
                                            <dropped-v4server-client-lookup>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-client-lookup>
                                            <dropped-v4server-lease-time-violation>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4server-lease-time-violation>
                                            <offer-delayed>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </offer-delayed>
                                            <offer-delay-in-progress>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </offer-delay-in-progress>
                                            <offer-delay-total>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </offer-delay-total>
                                            <msg-recv-v4server-boot-request>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4server-boot-request>
                                            <msg-recv-v4server-decline>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4server-decline>
                                            <msg-recv-v4server-discover>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4server-discover>
                                            <msg-recv-v4server-inform>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4server-inform>
                                            <msg-recv-v4server-release>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4server-release>
                                            <msg-recv-v4server-request>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4server-request>
                                            <msg-recv-v4server-renew>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4server-renew>
                                            <msg-recv-v4server-rebind>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4server-rebind>
                                            <msg-recv-v4server-lease-query>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4server-lease-query>
                                            <msg-recv-v4server-bulklease-query>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4server-bulklease-query>
                                            <msg-sent-v4server-boot-reply>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4server-boot-reply>
                                            <msg-sent-v4server-offer>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4server-offer>
                                            <msg-sent-v4server-boot-ack>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4server-boot-ack>
                                            <msg-sent-v4server-nak>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4server-nak>
                                            <msg-sent-v4server-force-renew>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4server-force-renew>
                                            <msg-sent-v4server-unassigned>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4server-unassigned>
                                            <msg-sent-v4server-unknown>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4server-unknown>
                                            <msg-sent-v4server-active>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4server-active>
                                            <msg-sent-v4server-query-done>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                        </msg-sent-v4server-query-done>
                                    </statistics>
                                        <bindings>
                                            <binding-state-v4server-binding>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4server-binding>
                                            <binding-state-v4server-init>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4server-init>
                                            <binding-state-v4server-bound>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4server-bound>
                                            <binding-state-v4server-selecting>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4server-selecting>
                                            <binding-state-v4server-requesting>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4server-requesting>
                                            <binding-state-v4server-renew>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4server-renew>
                                            <binding-state-v4server-release>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4server-release>
                                            <binding-state-server-restoring>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                    </binding-state-server-restoring>
                                </bindings>
                            </server>
                                    <relay>
                                        <statistics>
                                            <dropped-v4relay-total>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-total>
                                            <dropped-v4relay-bad-hardware>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-bad-hardware>
                                            <dropped-v4relay-bootp-packet>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-bootp-packet>
                                            <dropped-v4relay-bad-bootp-opcode>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-bad-bootp-opcode>
                                            <dropped-v4relay-bad-options>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-bad-options>
                                            <dropped-v4relay-bad-address>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-bad-address>
                                            <dropped-v4relay-no-address>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-no-address>
                                            <dropped-v4relay-no-interface-cfg>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-no-interface-cfg>
                                            <dropped-v4relay-no-local-address>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-no-local-address>
                                            <dropped-v4relay-short-packet>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-short-packet>
                                            <dropped-v4relay-bad-send>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-bad-send>
                                            <dropped-v4relay-option-60>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-option-60>
                                            <dropped-v4relay-relay-option>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-relay-option>
                                            <dropped-v4relay-option-82>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-option-82>
                                            <dropped-v4relay-authentication>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-authentication>
                                            <dropped-v4relay-dynamic-profile>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-dynamic-profile>
                                            <dropped-v4relay-license>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-license>
                                            <dropped-v4relay-bad-dhcp-opcode>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-bad-dhcp-opcode>
                                            <dropped-v4relay-no-options>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-no-options>
                                            <dropped-v4relay-hop-limit>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-hop-limit>
                                            <dropped-v4relay-ttl-expired>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-ttl-expired>
                                            <dropped-v4relay-bad-udp-checksum>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-bad-udp-checksum>
                                            <dropped-v4relay-inactive-vlan>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-inactive-vlan>
                                            <dropped-v4relay-era-start-failed>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-era-start-failed>
                                            <dropped-v4relay-client-lookup>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-client-lookup>
                                            <dropped-v4relay-proxy-no-server-addr>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-proxy-no-server-addr>
                                            <dropped-v4relay-lease-time-violation>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-lease-time-violation>
                                            <dropped-v4relay-leasequery-repl-no-circuitid>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-leasequery-repl-no-circuitid>
                                            <dropped-v4relay-leasequery-repl-with-error-code>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-leasequery-repl-with-error-code>
                                            <dropped-v4relay-leasequery-repl-with-query-term>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-leasequery-repl-with-query-term>
                                            <dropped-v4relay-older-leasequery-reply>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-older-leasequery-reply>
                                            <dropped-v4relay-abort-leasequery-reply-proc>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-abort-leasequery-reply-proc>
                                            <dropped-v4relay-during-leasequery-reply>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-during-leasequery-reply>
                                            <dropped-v4relay-relay-source-no-lpbk-interface>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v4relay-relay-source-no-lpbk-interface>
                                            <v4relay-bootp-request-rcvd>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </v4relay-bootp-request-rcvd>
                                            <msg-recv-v4relay-decline>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4relay-decline>
                                            <msg-recv-v4relay-discover>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4relay-discover>
                                            <msg-recv-v4relay-inform>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4relay-inform>
                                            <msg-recv-v4relay-release>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4relay-release>
                                            <msg-recv-v4relay-request>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4relay-request>
                                            <msg-recv-v4relay-leaseactive>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4relay-leaseactive>
                                            <msg-recv-v4relay-leaseunassigned>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4relay-leaseunassigned>
                                            <msg-recv-v4relay-leaseunknown>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4relay-leaseunknown>
                                            <msg-recv-v4relay-leasequerydone>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4relay-leasequerydone>
                                            <v4relay-bootp-reply-rcvd>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </v4relay-bootp-reply-rcvd>
                                            <msg-recv-v4relay-offer>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4relay-offer>
                                            <msg-recv-v4relay-ack>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4relay-ack>
                                            <msg-recv-v4relay-nak>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4relay-nak>
                                            <msg-recv-v4relay-forcerenew>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v4relay-forcerenew>
                                            <v4relay-bootp-reply-sent>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </v4relay-bootp-reply-sent>
                                            <msg-sent-v4relay-offer>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4relay-offer>
                                            <msg-sent-v4relay-ack>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4relay-ack>
                                            <msg-sent-v4relay-nak>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4relay-nak>
                                            <msg-sent-v4relay-forcerenew>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4relay-forcerenew>
                                            <msg-sent-v4relay-leasequery>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4relay-leasequery>
                                            <msg-sent-v4relay-bulkleasequery>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4relay-bulkleasequery>
                                            <v4relay-bootp-request-sent>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </v4relay-bootp-request-sent>
                                            <msg-sent-v4relay-decline>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4relay-decline>
                                            <msg-sent-v4relay-discover>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4relay-discover>
                                            <msg-sent-v4relay-inform>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4relay-inform>
                                            <msg-sent-v4relay-release>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4relay-release>
                                            <msg-sent-v4relay-request>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v4relay-request>
                                            <v4relay-bootp-forwarded-total>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </v4relay-bootp-forwarded-total>
                                            <v4relay-bootp-request-fwd>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </v4relay-bootp-request-fwd>
                                            <v4relay-bootp-reply-fwd>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                        </v4relay-bootp-reply-fwd>
                                    </statistics>
                                        <bindings>
                                            <binding-state-v4relay-binding>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4relay-binding>
                                            <binding-state-v4relay-init>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4relay-init>
                                            <binding-state-v4relay-bound>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4relay-bound>
                                            <binding-state-v4relay-selecting>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4relay-selecting>
                                            <binding-state-v4relay-requesting>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4relay-requesting>
                                            <binding-state-v4relay-renew>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4relay-renew>
                                            <binding-state-v4relay-release>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4relay-release>
                                            <binding-state-v4relay-restoring>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v4relay-restoring>
                                            <binding-state-v4relay-rebind>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>Count of dhcpv4 relay bindings in rebind state</Description>
                                        </binding-state-v4relay-rebind>
                                    </bindings>
                                        <servers>
                                            <server server-ip='index-name'>
                                                <server-ip>
                                                        <Leaf_Type name='string'>
                                                        </Leaf_Type>
                                                </server-ip>
                                                <response-time>
                                                    <one-minute-minimum-response-time>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                                                    </one-minute-minimum-response-time>
                                                    <one-minute-average-response-time>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                                                    </one-minute-average-response-time>
                                                    <one-minute-maximum-response-time>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                                                    </one-minute-maximum-response-time>
                                                    <one-minute-messages-sent>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                                                    </one-minute-messages-sent>
                                                    <one-minute-messages-received>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                                                    </one-minute-messages-received>
                                                    <one-minute-messages-no-response>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                        </one-minute-messages-no-response>
                    </response-time>
                </server>
            </servers>
        </relay>
    </routing-instance>
</routing-instances>
</v4>
                        <v6>
                            <dropped-total>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-total>
                            <dropped-bad-read>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-bad-read>
                            <dropped-ip-header>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-ip-header>
                            <dropped-short-packet>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-short-packet>
                            <dropped-no-interface>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-no-interface>
                            <dropped-no-routing-instance>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-no-routing-instance>
                            <dropped-no-safd>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-no-safd>
                            <dropped-no-memory>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-no-memory>
                            <dropped-recovery-in-progress>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </dropped-recovery-in-progress>
                            <era-inflight-count>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </era-inflight-count>
                            <era-reported-failures>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </era-reported-failures>
                            <era-reported-successes>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </era-reported-successes>
                            <routing-instances>
                                <routing-instance ri-name='index-name'>
                                    <ri-name>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                    </ri-name>
                                    <server>
                                        <statistics>
                                            <dropped-v6server-total>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-total>
                                            <dropped-v6server-no-safd>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-no-safd>
                                            <dropped-v6server-no-routing-instance>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-no-routing-instance>
                                            <dropped-v6server-bad-send>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-bad-send>
                                            <dropped-v6server-short-packet>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-short-packet>
                                            <dropped-v6server-bad-msgtype>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-bad-msgtype>
                                            <dropped-v6server-bad-options>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-bad-options>
                                            <dropped-v6server-bad-srcaddress>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-bad-srcaddress>
                                            <dropped-v6server-relay-hop-count>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-relay-hop-count>
                                            <dropped-v6server-bad-udp-checksum>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-bad-udp-checksum>
                                            <dropped-v6server-no-client-id>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-no-client-id>
                                            <dropped-v6server-strict-reconfigure>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-strict-reconfigure>
                                            <dropped-v6server-option-18>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-option-18>
                                            <dropped-v6server-authentication>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-authentication>
                                            <dropped-v6server-dynamic-profile>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-dynamic-profile>
                                            <dropped-v6server-license>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-license>
                                            <dropped-v6server-inactive-vlan>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-inactive-vlan>
                                            <dropped-v6server-era-start-failed>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-era-start-failed>
                                            <dropped-v6server-client-lookup>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-client-lookup>
                                            <dropped-v6server-lease-time-violation>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6server-lease-time-violation>
                                            <advertise-delayed>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </advertise-delayed>
                                            <advertise-queued>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </advertise-queued>
                                            <advertise-total>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </advertise-total>
                                            <msg-recv-v6server-dhcpv6-decline>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6server-dhcpv6-decline>
                                            <msg-recv-v6server-dhcpv6-solicit>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6server-dhcpv6-solicit>
                                            <msg-recv-v6server-dhcpv6-information-request>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6server-dhcpv6-information-request>
                                            <msg-recv-v6server-dhcpv6-release>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6server-dhcpv6-release>
                                            <msg-recv-v6server-dhcpv6-request>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6server-dhcpv6-request>
                                            <msg-recv-v6server-dhcpv6-confirm>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6server-dhcpv6-confirm>
                                            <msg-recv-v6server-dhcpv6-renew>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6server-dhcpv6-renew>
                                            <msg-recv-v6server-dhcpv6-rebind>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6server-dhcpv6-rebind>
                                            <msg-recv-v6server-dhcpv6-relay-forw>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6server-dhcpv6-relay-forw>
                                            <msg-recv-v6server-dhcpv6-leasequery>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6server-dhcpv6-leasequery>
                                            <msg-sent-v6server-advertise>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6server-advertise>
                                            <msg-sent-v6server-reply>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6server-reply>
                                            <msg-sent-v6server-logical_nak>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6server-logical_nak>
                                            <msg-sent-v6server-reconfigure>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6server-reconfigure>
                                            <msg-sent-v6server-relay-repl>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6server-relay-repl>
                                            <msg-sent-v6server-leasequery-repl>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6server-leasequery-repl>
                                            <msg-sent-v6server-leasequery-data>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6server-leasequery-data>
                                            <msg-sent-v6server-leasequery-done>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                        </msg-sent-v6server-leasequery-done>
                                    </statistics>
                                        <bindings>
                                            <binding-state-v6server-binding>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6server-binding>
                                            <binding-state-v6server-init>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6server-init>
                                            <binding-state-v6server-bound>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6server-bound>
                                            <binding-state-v6server-selecting>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6server-selecting>
                                            <binding-state-v6server-requesting>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6server-requesting>
                                            <binding-state-v6server-renew>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6server-renew>
                                            <binding-state-v6server-release>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6server-release>
                                            <binding-state-server-restoring>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                    </binding-state-server-restoring>
                                </bindings>
                            </server>
                                    <relay>
                                        <statistics>
                                            <dropped-v6relay-total>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-total>
                                            <dropped-v6relay-no-safd>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-no-safd>
                                            <dropped-v6relay-no-routing-instance>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-no-routing-instance>
                                            <dropped-v6relay-bad-send>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-bad-send>
                                            <dropped-v6relay-short-packet>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-short-packet>
                                            <dropped-v6relay-bad-msgtype>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-bad-msgtype>
                                            <dropped-v6relay-bad-options>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-bad-options>
                                            <dropped-v6relay-bad-srcaddress>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-bad-srcaddress>
                                            <dropped-v6relay-relay-hop-count>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-relay-hop-count>
                                            <dropped-v6relay-bad-udp-checksum>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-bad-udp-checksum>
                                            <dropped-v6relay-no-client-id>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-no-client-id>
                                            <dropped-v6relay-strict-reconfigure>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-strict-reconfigure>
                                            <dropped-v6relay-relay-option>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-relay-option>
                                            <dropped-v6relay-option-18>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-option-18>
                                            <dropped-v6relay-option-37>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-option-37>
                                            <dropped-v6relay-authentication>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-authentication>
                                            <dropped-v6relay-dynamic-profile>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-dynamic-profile>
                                            <dropped-v6relay-license>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-license>
                                            <dropped-v6relay-inactive-vlan>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-inactive-vlan>
                                            <dropped-v6relay-era-start-failed>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-era-start-failed>
                                            <dropped-v6relay-client-lookup>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-client-lookup>
                                            <dropped-v6relay-lease-time-violation>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-lease-time-violation>
                                            <dropped-v6relay-leasequery-repl-no-client-data>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-leasequery-repl-no-client-data>
                                            <dropped-v6relay-leasequery-repl-no-interfaceid>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-leasequery-repl-no-interfaceid>
                                            <dropped-v6relay-leasequery-repl-with-client-link>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-leasequery-repl-with-client-link>
                                            <dropped-v6relay-leasequery-repl-no-relay-data>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-leasequery-repl-no-relay-data>
                                            <dropped-v6relay-leasequery-repl-with-hop-cnt>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-leasequery-repl-with-hop-cnt>
                                            <dropped-v6relay-leasequery-repl-with-error-code>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-leasequery-repl-with-error-code>
                                            <dropped-v6relay-leasequery-repl-with-query-term>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-leasequery-repl-with-query-term>
                                            <dropped-v6relay-older-leasequery-reply>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-older-leasequery-reply>
                                            <dropped-v6relay-abort-leasequery-reply-proc>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-abort-leasequery-reply-proc>
                                            <dropped-v6relay-during-leasequery-reply>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-during-leasequery-reply>
                                            <dropped-v6relay-relay-source-no-lpbk-interface>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </dropped-v6relay-relay-source-no-lpbk-interface>
                                            <msg-recv-v6relay-decline>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-decline>
                                            <msg-recv-v6relay-solicit>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-solicit>
                                            <msg-recv-v6relay-information-request>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-information-request>
                                            <msg-recv-v6relay-release>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-release>
                                            <msg-recv-v6relay-request>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-request>
                                            <msg-recv-v6relay-confirm>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-confirm>
                                            <msg-recv-v6relay-renew>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-renew>
                                            <msg-recv-v6relay-rebind>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-rebind>
                                            <msg-recv-v6relay-relay-forw>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-relay-forw>
                                            <msg-recv-v6relay-leasequery-repl>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-leasequery-repl>
                                            <msg-recv-v6relay-leasequery-data>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-leasequery-data>
                                            <msg-recv-v6relay-leasequery-done>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-leasequery-done>
                                            <msg-recv-v6relay-advertise>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-advertise>
                                            <msg-recv-v6relay-reply>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-reply>
                                            <msg-recv-v6relay-reconfigure>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-reconfigure>
                                            <msg-recv-v6relay-relay-repl>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-relay-repl>
                                            <msg-recv-v6relay-leasequery>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-recv-v6relay-leasequery>
                                            <msg-sent-v6relay-reply>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-reply>
                                            <msg-sent-v6relay-reconfigure>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-reconfigure>
                                            <msg-sent-v6relay-relay-repl>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-relay-repl>
                                            <msg-sent-v6relay-leasequery>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-leasequery>
                                            <msg-sent-v6relay-decline>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-decline>
                                            <msg-sent-v6relay-solicit>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-solicit>
                                            <msg-sent-v6relay-information-request>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-information-request>
                                            <msg-sent-v6relay-release>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-release>
                                            <msg-sent-v6relay-request>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-request>
                                            <msg-sent-v6relay-confirm>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-confirm>
                                            <msg-sent-v6relay-renew>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-renew>
                                            <msg-sent-v6relay-rebind>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-rebind>
                                            <msg-sent-v6relay-relay-forw>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-relay-forw>
                                            <msg-sent-v6relay-leasequery-repl>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-leasequery-repl>
                                            <msg-sent-v6relay-leasequery-data>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-leasequery-data>
                                            <msg-sent-v6relay-leasequery-done>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </msg-sent-v6relay-leasequery-done>
                                            <v6relay-fwd-total>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </v6relay-fwd-total>
                                            <v6relay-fwd-request>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </v6relay-fwd-request>
                                            <v6relay-fwd-reply>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                        </v6relay-fwd-reply>
                                    </statistics>
                                        <bindings>
                                            <binding-state-v6relay-binding>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6relay-binding>
                                            <binding-state-v6relay-init>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6relay-init>
                                            <binding-state-v6relay-bound>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6relay-bound>
                                            <binding-state-v6relay-selecting>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6relay-selecting>
                                            <binding-state-v6relay-requesting>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6relay-requesting>
                                            <binding-state-v6relay-renew>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6relay-renew>
                                            <binding-state-v6relay-release>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-v6relay-release>
                                            <binding-state-relay-restoring>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                            </binding-state-relay-restoring>
                                            <binding-state-v6relay-rebind>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>Count of dhcpv6 relay bindings in rebind state</Description>
                                        </binding-state-v6relay-rebind>
                                    </bindings>
                                        <servers>
                                            <server server-ipv6='index-name'>
                                                <server-ipv6>
                                                        <Leaf_Type name='string'>
                                                        </Leaf_Type>
                                                </server-ipv6>
                                                <response-time>
                                                    <one-minute-minimum-response-time>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                                                    </one-minute-minimum-response-time>
                                                    <one-minute-average-response-time>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                                                    </one-minute-average-response-time>
                                                    <one-minute-maximum-response-time>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                                                    </one-minute-maximum-response-time>
                                                    <one-minute-messages-sent>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                                                    </one-minute-messages-sent>
                                                    <one-minute-messages-received>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                                                    </one-minute-messages-received>
                                                    <one-minute-messages-no-response>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                                            </one-minute-messages-no-response>
                                        </response-time>
                                    </server>
                                </servers>
                            </relay>
                        </routing-instance>
                    </routing-instances>
                </v6>
            </dhcp>
        </client-protocols>
    </subscriber-management>
</system>
</junos>
</jdhcpd_oc>
<jl2tpd_oc>
    <junos>
        <system>
            <subscriber-management>
                <client-protocols>
                    <l2tp>
                        <summary>
                            <l2tp-stats-total-tunnels>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </l2tp-stats-total-tunnels>
                            <l2tp-stats-total-sessions>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </l2tp-stats-total-sessions>
                            <l2tp-stats-control-rx-packets>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </l2tp-stats-control-rx-packets>
                            <l2tp-stats-control-rx-bytes>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </l2tp-stats-control-rx-bytes>
                            <l2tp-stats-control-tx-packets>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </l2tp-stats-control-tx-packets>
                            <l2tp-stats-control-tx-bytes>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </l2tp-stats-control-tx-bytes>
                            <l2tp-era-type-icrq-inflight-count>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </l2tp-era-type-icrq-inflight-count>
                            <l2tp-era-type-icrq-reported-successes>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </l2tp-era-type-icrq-reported-successes>
                            <l2tp-era-type-icrq-reported-failures>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </l2tp-era-type-icrq-reported-failures>
                            <l2tp-era-type-sccrq-inflight-count>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </l2tp-era-type-sccrq-inflight-count>
                            <l2tp-era-type-sccrq-reported-successes>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </l2tp-era-type-sccrq-reported-successes>
                            <l2tp-era-type-sccrq-reported-failures>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
</l2tp-era-type-sccrq-reported-failures>
</summary>
</l2tp>
</client-protocols>
</subscriber-management>
</system>
</junos>
</jl2tpd_oc>
<jpppd_oc>
    <junos>
        <system>
            <subscriber-management>
                <client-protocols>
                    <ppp>
                        <statistics>
                            <ppp-stats-total-subscriber-sessions>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </ppp-stats-total-subscriber-sessions>
                            <ppp-stats-sessions-disable-phase>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </ppp-stats-sessions-disable-phase>
                            <ppp-stats-sessions-establish-phase>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </ppp-stats-sessions-establish-phase>
                            <ppp-stats-sessions-network-phase>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </ppp-stats-sessions-network-phase>
                            <ppp-stats-sessions-authenticate-phase>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
</ppp-stats-sessions-authenticate-phase>
</statistics>
</ppp>
</client-protocols>
</subscriber-management>
</system>
</junos>
</jpppd_oc>
<junos-xmlproxyd_junos-rsvp-interface>
    <junos>
        <rsvp-interface-information>
            <active-count>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
            </active-count>
            <rsvp-interface interface-name='index-name'>
                <interface-name>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </interface-name>
                <index>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </index>
                <rsvp-status>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </rsvp-status>
                <authentication-flag>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </authentication-flag>
                <aggregate-flag>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </aggregate-flag>
                <ack-flag>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </ack-flag>
                <protect-flag>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </protect-flag>
                <hello-interval>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </hello-interval>
                <interface-address>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </interface-address>
                <message-statistics rsvp-message='index-name'>
                    <rsvp-message>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </rsvp-message>
                    <messages-sent>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </messages-sent>
                    <messages-received>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </messages-received>
                    <messages-sent-5seconds>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </messages-sent-5seconds>
                    <messages-received-5seconds>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                </messages-received-5seconds>
            </message-statistics>
                <rsvp-telink>
                    <active-reservation>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </active-reservation>
                    <preemption-count>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </preemption-count>
                    <update-threshold>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </update-threshold>
                    <subscription>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </subscription>
                    <static-bandwidth>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </static-bandwidth>
                    <available-bandwidth>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </available-bandwidth>
                    <reserved-bandwidth bandwidth-priority='index-name'>
                        <bandwidth-priority>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </bandwidth-priority>
                        <total-reserved-bandwidth>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
</total-reserved-bandwidth>
</reserved-bandwidth>
</rsvp-telink>
</rsvp-interface>
</rsvp-interface-information>
</junos>
</junos-xmlproxyd_junos-rsvp-interface>
<junos-xmlproxyd_junos-rtg-task-memory>
    <junos>
        <task-memory-information>
            <task-memory-overall-report>
                <task-size-block-list>
                    <task-size-block tsb-size='index-name'>
                        <tsb-size>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </tsb-size>
                        <tsb-alloc-bytes>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </tsb-alloc-bytes>
                        <tsb-allocs>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </tsb-allocs>
                        <tsb-max-allocs>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </tsb-max-allocs>
                        <tsb-max-bytes>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </tsb-max-bytes>
                        <tsb-free-bytes>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                </tsb-free-bytes>
            </task-size-block>
        </task-size-block-list>
                <task-memory-stats-list>
                    <task-memory-stats tms-name='index-name'>
                        <tms-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </tms-name>
                        <tms-allocs>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </tms-allocs>
                        <tms-alloc-bytes>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </tms-alloc-bytes>
                        <tms-max-allocs>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </tms-max-allocs>
                        <tms-max-bytes>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                </tms-max-bytes>
            </task-memory-stats>
        </task-memory-stats-list>
                <task-memory-total-bytes>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
                </task-memory-total-bytes>
                <task-memory-total-max-bytes>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
                </task-memory-total-max-bytes>
                <task-memory-total-free-bytes>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
            </task-memory-total-free-bytes>
        </task-memory-overall-report>
            <task-memory-allocator-report>
                <task-block-list>
                    <task-block tb-name='index-name'>
                        <tb-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </tb-name>
                        <tb-size>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </tb-size>
                        <tb-alloc-size>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </tb-alloc-size>
                        <tb-alloc-blocks>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </tb-alloc-blocks>
                        <tb-alloc-bytes>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </tb-alloc-bytes>
                        <tb-max-alloc-blocks>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </tb-max-alloc-blocks>
                        <tb-max-alloc-bytes>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                </tb-max-alloc-bytes>
            </task-block>
        </task-block-list>
                <task-lite-page-list>
                    <task-lite-page tlp-name='index-name'>
                        <tlp-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </tlp-name>
                        <tlp-alloc-bytes>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </tlp-alloc-bytes>
                        <tlp-max-alloc-bytes>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                </tlp-max-alloc-bytes>
            </task-lite-page>
        </task-lite-page-list>
                <task-memory-total-bytes>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
                </task-memory-total-bytes>
                <task-memory-total-max-bytes>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
            </task-memory-total-max-bytes>
        </task-memory-allocator-report>
            <task-memory-malloc-usage-report>
                <task-malloc-list>
                    <task-malloc tm-name='index-name'>
                        <tm-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </tm-name>
                        <tm-allocs>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </tm-allocs>
                        <tm-alloc-bytes>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </tm-alloc-bytes>
                        <tm-max-allocs>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </tm-max-allocs>
                        <tm-max-alloc-bytes>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                        </tm-max-alloc-bytes>
                        <tm-function-calls>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                </tm-function-calls>
            </task-malloc>
        </task-malloc-list>
                <task-memory-total-bytes>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
                </task-memory-total-bytes>
                <task-memory-total-max-bytes>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
            </task-memory-total-max-bytes>
        </task-memory-malloc-usage-report>
            <task-memory-dynamic-allocs>
                    <Leaf_Type name='uint64'>
                    </Leaf_Type>
            </task-memory-dynamic-allocs>
            <task-memory-max-dynamic-allocs>
                    <Leaf_Type name='uint64'>
                    </Leaf_Type>
            </task-memory-max-dynamic-allocs>
            <task-memory-bss-bytes>
                    <Leaf_Type name='uint64'>
                    </Leaf_Type>
            </task-memory-bss-bytes>
            <task-memory-max-bss-bytes>
                    <Leaf_Type name='uint64'>
                    </Leaf_Type>
            </task-memory-max-bss-bytes>
            <task-memory-page-data-bytes>
                    <Leaf_Type name='uint64'>
                    </Leaf_Type>
            </task-memory-page-data-bytes>
            <task-memory-max-page-data-bytes>
                    <Leaf_Type name='uint64'>
                    </Leaf_Type>
            </task-memory-max-page-data-bytes>
            <task-memory-dir-bytes>
                    <Leaf_Type name='uint64'>
                    </Leaf_Type>
            </task-memory-dir-bytes>
            <task-memory-max-dir-bytes>
                    <Leaf_Type name='uint64'>
                    </Leaf_Type>
            </task-memory-max-dir-bytes>
            <task-memory-total-bytes-in-use>
                    <Leaf_Type name='uint64'>
                    </Leaf_Type>
            </task-memory-total-bytes-in-use>
            <task-memory-total-bytes-percent>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
</task-memory-total-bytes-percent>
</task-memory-information>
</junos>
</junos-xmlproxyd_junos-rtg-task-memory>
<junos-xmlproxyd_show_local_interface_OC>
    <interfaces>
        <interface name='index-name'>
            <name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
            </name>
            <state>
                <counters>
                    <in-octets>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </in-octets>
                    <in-pkts>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </in-pkts>
                    <in-discards>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </in-discards>
                    <in-errors>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </in-errors>
                    <in-drops>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </in-drops>
                    <in-frame-errors>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </in-frame-errors>
                    <in-runts>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </in-runts>
                    <in-giants>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </in-giants>
                    <in-resource-errors>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </in-resource-errors>
                    <out-octets>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </out-octets>
                    <out-pkts>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </out-pkts>
                    <out-discards>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </out-discards>
                    <out-errors>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </out-errors>
                    <out-drops>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </out-drops>
                    <carrier-transitions>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </carrier-transitions>
                    <mtu-errors>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </mtu-errors>
                    <out-resource-errors>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                    </out-resource-errors>
                    <last-clear>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
            </last-clear>
        </counters>
    </state>
            <subinterfaces>
                <subinterface index='index-name'>
                    <index>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </index>
                    <state>
                        <counters>
                            <in-octets>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </in-octets>
                            <in-pkts>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </in-pkts>
                            <in-discards>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </in-discards>
                            <in-errors>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </in-errors>
                            <in-drops>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </in-drops>
                            <in-frame-errors>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </in-frame-errors>
                            <in-runts>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </in-runts>
                            <in-giants>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </in-giants>
                            <in-resource-errors>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </in-resource-errors>
                            <out-octets>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </out-octets>
                            <out-pkts>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </out-pkts>
                            <out-discards>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </out-discards>
                            <out-errors>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </out-errors>
                            <out-drops>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </out-drops>
                            <carrier-transitions>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </carrier-transitions>
                            <mtu-errors>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </mtu-errors>
                            <out-resource-errors>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </out-resource-errors>
                            <last-clear>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
</last-clear>
</counters>
</state>
</subinterface>
</subinterfaces>
</interface>
</interfaces>
</junos-xmlproxyd_show_local_interface_OC>
<kernel-ifstate-render>
    <junos>
        <kernel-ifstate>
            <stats record-time='index-name'>
                <record-time>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </record-time>
                <record-seq-num>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </record-seq-num>
                <churn-rate>
                    <overall-churn-rate>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </overall-churn-rate>
                    <route-add-rate>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </route-add-rate>
                    <route-change-rate>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </route-change-rate>
                    <route-delete-rate>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </route-delete-rate>
                    <nexthop-add-rate>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </nexthop-add-rate>
                    <nexthop-delete-rate>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </nexthop-delete-rate>
                    <nexthop-change-rate>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                </nexthop-change-rate>
            </churn-rate>
                <peer-consumption-rate peer-index='index-name'>
                    <peer-index>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </peer-index>
                    <consumption-rate-counter>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </consumption-rate-counter>
                    <consumption-route-add-rate>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </consumption-route-add-rate>
                    <consumption-route-change-rate>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </consumption-route-change-rate>
                    <consumption-route-delete-rate>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </consumption-route-delete-rate>
                    <consumption-nexthop-add-rate>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </consumption-nexthop-add-rate>
                    <consumption-nexthop-change-rate>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </consumption-nexthop-change-rate>
                    <consumption-nexthop-delete-rate>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                </consumption-nexthop-delete-rate>
            </peer-consumption-rate>
                <vetos-statistics>
                    <veto-vm-page-count-severe>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </veto-vm-page-count-severe>
                    <veto-ifstate-memory>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </veto-ifstate-memory>
                    <veto-memory-overconsumed>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </veto-memory-overconsumed>
                    <veto-pfe-veto-max-routes>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </veto-pfe-veto-max-routes>
                    <veto-too-many-delayed-unrefs>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </veto-too-many-delayed-unrefs>
                    <veto-nh-memory-usage>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </veto-nh-memory-usage>
                    <veto-mbuf-cluster>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </veto-mbuf-cluster>
                    <veto-flabel-space-exhaustion>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </veto-flabel-space-exhaustion>
                    <veto-flabel-space-consumption>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
</veto-flabel-space-consumption>
</vetos-statistics>
</stats>
</kernel-ifstate>
</junos>
</kernel-ifstate-render>
<kmd_render>
    <junos>
        <ike-security-associations>
            <ike-security-association remote-ip_local-ip_routing-instance='index-name'>
                <remote-ip>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </remote-ip>
                <local-ip>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </local-ip>
                <number-ipsec-sa-created>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </number-ipsec-sa-created>
                <number-ipsec-sa-deleted>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </number-ipsec-sa-deleted>
                <number-ipsec-sa-rekey>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </number-ipsec-sa-rekey>
                <exchange-type>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </exchange-type>
                <in-bytes>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </in-bytes>
                <in-packets>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </in-packets>
                <out-bytes>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </out-bytes>
                <out-packets>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </out-packets>
                <delete-payload-received>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </delete-payload-received>
                <delete-payload-transmitted>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </delete-payload-transmitted>
                <dpd-request-payload-received>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </dpd-request-payload-received>
                <dpd-request-payload-transmitted>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </dpd-request-payload-transmitted>
                <dpd-response-payload-received>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </dpd-response-payload-received>
                <dpd-response-payload-transmitted>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </dpd-response-payload-transmitted>
                <dpd-response-payload-missed>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </dpd-response-payload-missed>
                <dpd-response-payload-maximum-delay>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </dpd-response-payload-maximum-delay>
                <dpd-response-seq-payload-missed>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </dpd-response-seq-payload-missed>
                <invalid-spi-notify-received>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </invalid-spi-notify-received>
                <invalid-spi-notify-transmitted>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                </invalid-spi-notify-transmitted>
                <routing-instance>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
</routing-instance>
</ike-security-association>
</ike-security-associations>
</junos>
</kmd_render>
<l2ald_oc_intf>
    <interfaces>
        <interface name='index-name'>
            <name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
            </name>
            <subinterfaces>
                <subinterface index='index-name'>
                    <index>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </index>
                    <vlan>
                        <state>
                            <vlan-id>
                                    <Leaf_Type name='uint16'>
                                    </Leaf_Type>
            </vlan-id>
        </state>
    </vlan>
</subinterface>
</subinterfaces>
            <ethernet>
                <switched-vlan>
                    <state>
                        <interface-mode>
                                <Leaf_Type name='Enumerations'> ['ACCESS', 'TRUNK']</Leaf_Type>
                        </interface-mode>
                        <native-vlan>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                        </native-vlan>
                        <access-vlan>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                        </access-vlan>
                        <trunk-vlans>
                                <Leaf_Type name='union'>
                                    <Leaf_Type name='uint16'>
                                    </Leaf_Type>
                                    <Leaf_Type name='string'>
                                    <Pattern>(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])\.\.(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])</Pattern>
                                    </Leaf_Type>
                                    <Leaf_Type name='string'>
                                    <Pattern>(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])\.((409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])|\*)</Pattern>
                                    </Leaf_Type>
                                    <Leaf_Type name='union'>
                                        <Leaf_Type name='string'>
                                        <Pattern>(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])\.\.(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])\.((409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])|\*)</Pattern>
                                        </Leaf_Type>
                                        <Leaf_Type name='string'>
                                        <Pattern>(\*|(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9]))\.(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])\.\.(409[0-4]|40[0-8][0-9]|[1-3][0-9]{3}|[1-9][0-9]{1,2}|[1-9])</Pattern>
                                        </Leaf_Type>
                                    </Leaf_Type>
                                </Leaf_Type>
</trunk-vlans>
</state>
</switched-vlan>
</ethernet>
</interface>
</interfaces>
</l2ald_oc_intf>
<l2ald_oc>
    <vlans>
        <vlan vlan-id='index-name'>
            <vlan-id>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
            </vlan-id>
            <state>
                <vlan-id>
                        <Leaf_Type name='uint16'>
                        </Leaf_Type>
                        <Description>Interface VLAN id.</Description>
                </vlan-id>
                <name>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                        <Description>Interface VLAN name.</Description>
                </name>
                <status>
                        <Leaf_Type name='Enumerations'> ['ACTIVE', 'SUSPENDED']</Leaf_Type>
                        <Description>Admin state of the VLAN</Description>
            </status>
        </state>
            <members>
                <member>
                    <interface-ref>
                        <state>
                            <interface>
                </interface>
            </state>
        </interface-ref>
    </member>
</members>
</vlan>
</vlans>
</l2ald_oc>
<l2cpd>
    <lldp>
        <state>
            <enabled>
                    <Leaf_Type name='boolean'>
                    </Leaf_Type>
                    <Description>System level state of the LLDP protocol.</Description>
            </enabled>
            <hello-timer>
                    <Leaf_Type name='uint64'>
                    </Leaf_Type>
                    <Description>System level hello timer for the LLDP protocol.</Description>
            </hello-timer>
            <system-name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
                    <Description>The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.</Description>
            </system-name>
            <system-description>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
                    <Description>The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.</Description>
            </system-description>
            <chassis-id>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
                    <Description>The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent</Description>
            </chassis-id>
            <chassis-id-type>
                    <Leaf_Type name='Enumerations'> ['CHASSIS_COMPONENT', 'INTERFACE_ALIAS', 'PORT_COMPONENT', 'MAC_ADDRESS', 'NETWORK_ADDRESS', 'INTERFACE_NAME', 'LOCAL']</Leaf_Type>
                    <Description>This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.</Description>
            </chassis-id-type>
            <loc-port-id-type>
                    <Leaf_Type name='Enumerations'> ['INTERFACE_ALIAS', 'PORT_COMPONENT', 'MAC_ADDRESS', 'NETWORK_ADDRESS', 'INTERFACE_NAME', 'AGENT_CIRCUIT_ID', 'LOCAL']</Leaf_Type>
                    <Description>The type of port identifier encoding used in the associated 'lldpLocPortId' object.Refered from the lldp standard mib</Description>
            </loc-port-id-type>
            <counters>
                <frame-in>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
                        <Description>The number of lldp frames received.</Description>
                </frame-in>
                <frame-out>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
                        <Description>The number of frames transmitted out.</Description>
                </frame-out>
                <frame-error-in>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
                        <Description>The number of LLDP frames received with errors.</Description>
                </frame-error-in>
                <frame-discard>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
                        <Description>The number of LLDP frames received and discarded.</Description>
                </frame-discard>
                <tlv-discard>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
                        <Description>The number of TLV frames received and discarded.</Description>
                </tlv-discard>
                <tlv-unknown>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
                        <Description>The number of frames received with unknown TLV.</Description>
                </tlv-unknown>
                <last-clear>
                        <Leaf_Type name='string'>
                        <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                        </Leaf_Type>
                        <Description>Indicates the last time the counters were cleared.</Description>
                </last-clear>
                <tlv-accepted>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
                        <Description>The number of valid TLVs received.</Description>
                </tlv-accepted>
                <entries-aged-out>
                        <Leaf_Type name='uint64'>
                        </Leaf_Type>
                        <Description>The number of entries aged out due to timeout.</Description>
        </entries-aged-out>
    </counters>
</state>
        <interfaces>
            <interface name='index-name'>
                <name>
                        <Leaf_Type name='leafref'>
                        </Leaf_Type>
                        <Description>Reference to the list key</Description>
                </name>
                <state>
                    <name>
                            <Description>Reference to the LLDP Ethernet interface</Description>
                    </name>
                    <enabled>
                            <Leaf_Type name='boolean'>
                            </Leaf_Type>
                            <Description>Enable or disable the LLDP protocol on the interface.</Description>
                    </enabled>
                    <counters>
                        <frame-in>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                                <Description>The number of lldp frames received.</Description>
                        </frame-in>
                        <frame-out>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                                <Description>The number of frames transmitted out.</Description>
                        </frame-out>
                        <frame-error-in>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                                <Description>The number of LLDP frames received with errors.</Description>
                        </frame-error-in>
                        <frame-discard>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                                <Description>The number of LLDP frames received and discarded.</Description>
                        </frame-discard>
                        <tlv-discard>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                                <Description>The number of TLV frames received and discarded.</Description>
                        </tlv-discard>
                        <tlv-unknown>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                                <Description>The number of frames received with unknown TLV.</Description>
                        </tlv-unknown>
                        <last-clear>
                                <Leaf_Type name='string'>
                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                </Leaf_Type>
                                <Description>Indicates the last time the counters were cleared.</Description>
                        </last-clear>
                        <frame-error-out>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                                <Description>The number of frame transmit errors on the interface.</Description>
                    </frame-error-out>
                </counters>
                    <loc-port-id>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                            <Description>The string value used to identify the port component associated with a given port in the local system.</Description>
                    </loc-port-id>
                    <loc-port-description>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                            <Description>The string value used to identify the IEEE 802 LAN station's port description associated with the local system. If the local agent supports IETF RFC 2863, lldpLocPortDesc object should have the same value of ifDescr object.</Description>
                </loc-port-description>
            </state>
                <neighbors>
                    <neighbor id='index-name'>
                        <id>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                                <Description> </Description>
                        </id>
                        <state>
                            <system-name>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                    <Description>The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC 3418, the sysName object should be used for this field.</Description>
                            </system-name>
                            <system-description>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                    <Description>The system description field shall contain an alpha-numeric string that is the textual description of the network entity. The system description should include the full name and version identification of the system's hardware type, software operating system, and networking software. If implementations support IETF RFC 3418, the sysDescr object should be used for this field.</Description>
                            </system-description>
                            <chassis-id>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                    <Description>The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated with the transmitting LLDP agent</Description>
                            </chassis-id>
                            <chassis-id-type>
                                    <Leaf_Type name='Enumerations'> ['CHASSIS_COMPONENT', 'INTERFACE_ALIAS', 'PORT_COMPONENT', 'MAC_ADDRESS', 'NETWORK_ADDRESS', 'INTERFACE_NAME', 'LOCAL']</Leaf_Type>
                                    <Description>This field identifies the format and source of the chassis identifier string. It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.</Description>
                            </chassis-id-type>
                            <id>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                    <Description>System generated identifier for the neighbor on the interface.</Description>
                            </id>
                            <age>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>Age since discovery</Description>
                            </age>
                            <last-update>
                                    <Leaf_Type name='int64'>
                                    </Leaf_Type>
                                    <Description>Seconds since last update received.</Description>
                            </last-update>
                            <port-id>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                    <Description>The Port ID is a mandatory TLV which identifies the port component of the endpoint identifier associated with the transmitting LLDP agent. If the specified port is an IEEE 802.3 Repeater port, then this TLV is optional.</Description>
                            </port-id>
                            <port-id-type>
                                    <Leaf_Type name='Enumerations'> ['INTERFACE_ALIAS', 'PORT_COMPONENT', 'MAC_ADDRESS', 'NETWORK_ADDRESS', 'INTERFACE_NAME', 'AGENT_CIRCUIT_ID', 'LOCAL']</Leaf_Type>
                                    <Description>This field identifies the format and source of the port identifier string. It is an enumerator defined by the PtopoPortIdType object from RFC2922.</Description>
                            </port-id-type>
                            <port-description>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                    <Description>The binary string containing the actual port identifier for the port which this LLDP PDU was transmitted. The source and format of this field is defined by PtopoPortId from RFC2922.</Description>
                            </port-description>
                            <management-address>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                    <Description>The Management Address is a mandatory TLV which identifies a network address associated with the local LLDP agent, which can be used to reach the agent on the port identified in the Port ID TLV.</Description>
                            </management-address>
                            <management-address-type>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                    <Description>The enumerated value for the network address type identified in this TLV. This enumeration is defined in the 'Assigned Numbers' RFC [RFC3232] and the ianaAddressFamilyNumbers object.</Description>
                        </management-address-type>
                    </state>
                        <custom-tlvs>
                            <tlv type_oui_oui-subtype='index-name'>
                                <type>
                                        <Leaf_Type name='int32'>
                                        </Leaf_Type>
                                        <Description>Reference to type list key</Description>
                                </type>
                                <oui>
                                        <Leaf_Type name='string'>
                                        </Leaf_Type>
                                        <Description>Reference to oui list key</Description>
                                </oui>
                                <oui-subtype>
                                        <Leaf_Type name='string'>
                                        </Leaf_Type>
                                        <Description>Reference to oui-subtype list key</Description>
                                </oui-subtype>
                                <state>
                                    <type>
                                            <Leaf_Type name='int32'>
                                            </Leaf_Type>
                                            <Description>The integer value identifying the type of information contained in the value field.</Description>
                                    </type>
                                    <oui>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>The organizationally unique identifier field shall contain the organization's OUI as defined in Clause 9 of IEEE Std 802. The high-order octet is 0 and the low-order 3 octets are the SMI Network Management Private Enterprise Code of the Vendor in network byte order, as defined in the 'Assigned Numbers' RFC [RFC3232].</Description>
                                    </oui>
                                    <oui-subtype>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>The organizationally defined subtype field shall contain a unique subtype value assigned by the defining organization.</Description>
                                    </oui-subtype>
                                    <value>
                                            <Leaf_Type name='binary'>
                                            </Leaf_Type>
                                            <Description>A variable-length octet-string containing the instance-specific information for this TLV.</Description>
                        </value>
                    </state>
                </tlv>
            </custom-tlvs>
                        <capabilities>
                            <capability name='index-name'>
                                <name>
                                        <Leaf_Type name='Idenity'>
                                        </Leaf_Type>
                                        <Description>Reference to capabilities list key</Description>
                                </name>
                                <state>
                                    <name>
                                            <Leaf_Type name='Idenity'>
                                            </Leaf_Type>
                                            <Description>Name of the system capability advertised by the neighbor. Capabilities are represented in a bitmap that defines the primary functions of the system. The capabilities are defined in IEEE 802.1AB.</Description>
                                    </name>
                                    <enabled>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>Indicates whether the corresponding system capability is enabled on the neighbor.</Description>
                                    </enabled>
                                </state>
                            </capability>
                        </capabilities>
                    </neighbor>
                </neighbors>
            </interface>
        </interfaces>
    </lldp>
</l2cpd>
<lacpd_oc>
    <lacp>
        <state>
            <system-priority>
                    <Leaf_Type name='uint16'>
                    </Leaf_Type>
                    <Description>Sytem priority used by the node on this LAG interface. Lower value is higher priority for determining which node is the controlling system.</Description>
        </system-priority>
    </state>
        <interfaces>
            <interface name='index-name'>
                <name>
                        <Leaf_Type name='leafref'>
                        </Leaf_Type>
                        <Description>Reference to the list key</Description>
                </name>
                <state>
                    <name>
                            <Description>Reference to the interface on which LACP should be configured.   The type of the target interface must be ieee8023adLag</Description>
                    </name>
                    <interval>
                            <Leaf_Type name='Enumerations'> ['FAST', 'SLOW']</Leaf_Type>
                            <Description>Set the period between LACP messages -- uses the lacp-period-type enumeration.</Description>
                    </interval>
                    <lacp-mode>
                            <Leaf_Type name='Enumerations'> ['ACTIVE', 'PASSIVE']</Leaf_Type>
                            <Description>ACTIVE is to initiate the transmission of LACP packets. PASSIVE is to wait for peer to initiate the transmission of LACP packets.</Description>
                    </lacp-mode>
                    <system-id-mac>
                            <Leaf_Type name='string'>
                            <Pattern>[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}</Pattern>
                            </Leaf_Type>
                            <Description>The MAC address portion of the node's System ID. This is combined with the system priority to construct the 8-octet system-id</Description>
                    </system-id-mac>
                    <system-priority>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                            <Description>Sytem priority used by the node on this LAG interface. Lower value is higher priority for determining which node is the controlling system.</Description>
                </system-priority>
            </state>
                <members>
                    <member interface='index-name'>
                        <interface>
                                <Leaf_Type name='leafref'>
                                </Leaf_Type>
                                <Description>Reference to aggregate member interface</Description>
                        </interface>
                        <state>
                            <interface>
                                    <Description>Reference to interface member of the LACP aggregate</Description>
                            </interface>
                            <activity>
                                    <Leaf_Type name='Enumerations'> ['ACTIVE', 'PASSIVE']</Leaf_Type>
                                    <Description>Indicates participant is active or passive</Description>
                            </activity>
                            <timeout>
                                    <Leaf_Type name='Enumerations'> ['LONG', 'SHORT']</Leaf_Type>
                                    <Description>The timeout type (short or long) used by the participant</Description>
                            </timeout>
                            <synchronization>
                                    <Leaf_Type name='Enumerations'> ['IN_SYNC', 'OUT_SYNC']</Leaf_Type>
                                    <Description>Indicates whether the participant is in-sync or out-of-sync</Description>
                            </synchronization>
                            <aggregatable>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>A true value indicates that the participant will allow the link to be used as part of the aggregate. A false value indicates the link should be used as an individual link</Description>
                            </aggregatable>
                            <collecting>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>If true, the participant is collecting incoming frames on the link, otherwise false</Description>
                            </collecting>
                            <distributing>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>When true, the participant is distributing outgoing frames; when false, distribution is disabled</Description>
                            </distributing>
                            <system-id>
                                    <Leaf_Type name='string'>
                                    <Pattern>[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}</Pattern>
                                    </Leaf_Type>
                                    <Description>MAC address that defines the local system ID for the aggregate interface</Description>
                            </system-id>
                            <oper-key>
                                    <Leaf_Type name='uint16'>
                                    </Leaf_Type>
                                    <Description>Current operational value of the key for the aggregate interface</Description>
                            </oper-key>
                            <partner-id>
                                    <Leaf_Type name='string'>
                                    <Pattern>[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}</Pattern>
                                    </Leaf_Type>
                                    <Description>MAC address representing the protocol partner's interface system ID</Description>
                            </partner-id>
                            <partner-key>
                                    <Leaf_Type name='uint16'>
                                    </Leaf_Type>
                                    <Description>Operational value of the protocol partner's key</Description>
                            </partner-key>
                            <port-num>
                                    <Leaf_Type name='uint16'>
                                    </Leaf_Type>
                                    <Description>Port number of the local (actor) aggregation member</Description>
                            </port-num>
                            <partner-port-num>
                                    <Leaf_Type name='uint16'>
                                    </Leaf_Type>
                                    <Description>Port number of the partner (remote) port for this member port</Description>
                            </partner-port-num>
                            <counters>
                                <lacp-in-pkts>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of LACPDUs received</Description>
                                </lacp-in-pkts>
                                <lacp-out-pkts>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of LACPDUs transmitted</Description>
                                </lacp-out-pkts>
                                <lacp-rx-errors>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of LACPDU receive packet errors</Description>
                                </lacp-rx-errors>
                                <lacp-tx-errors>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of LACPDU transmit packet errors</Description>
                                </lacp-tx-errors>
                                <lacp-unknown-errors>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of LACPDU unknown packet errors</Description>
                                </lacp-unknown-errors>
                                <lacp-errors>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of LACPDU illegal packet errors</Description>
                                </lacp-errors>
                                <collection-time>
                                        <Leaf_Type name='string'>
                                        </Leaf_Type>
                                        <Description>Indicates the time when the counters were captured inside the device</Description>
                            </collection-time>
                        </counters>
                            <mux-state>
                                    <Leaf_Type name='Enumerations'> ['DETACHED', 'WAITING', 'ATTACHED', 'COLLECTING', 'DISTRIBUTING', 'COLLECTING_DISTRIBUTING']</Leaf_Type>
                                    <Description>Indicates LACP mux machine state of the participant</Description>
                            </mux-state>
                        </state>
                    </member>
                </members>
            </interface>
        </interfaces>
    </lacp>
</lacpd_oc>
<mib2d_arp_oc>
    <arp-information>
        <ipv4>
            <neighbors>
                <neighbor ip='index-name'>
                    <ip>
                            <Description>References the configured IP address</Description>
                    </ip>
                    <state>
                        <ip>
                                <Leaf_Type name='string'>
                                <Pattern>[0-9\.]*</Pattern>
                                </Leaf_Type>
                                <Description>The IPv4 address of the neighbor node.</Description>
                        </ip>
                        <link-layer-address>
                                <Leaf_Type name='string'>
                                <Pattern>([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?</Pattern>
                                </Leaf_Type>
                                <Description>The link-layer address of the neighbor node.</Description>
                        </link-layer-address>
                        <origin>
                                <Leaf_Type name='Enumerations'> ['OTHER', 'STATIC', 'DYNAMIC']</Leaf_Type>
                                <Description>The origin of this neighbor entry, static or dynamic.</Description>
                        </origin>
                        <host-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                                <Description>Host name for this neighbor entry</Description>
                        </host-name>
                        <table-id>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                                <Description>Routing table ID for this neighbor entry</Description>
                        </table-id>
                        <neighbor-state>
                                <Leaf_Type name='Enumerations'> ['INCOMPLETE', 'REACHABLE', 'PROBE', 'PERM']</Leaf_Type>
                                <Description>ARP neighbor FSM state</Description>
                        </neighbor-state>
                        <expiry>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                                <Description>lifetime of ARP neighbor entry</Description>
                        </expiry>
                        <is-publish>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>whether the ARP neighbor is a published one</Description>
                        </is-publish>
                        <interface-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                                <Description>interface on which this neighbor entry was learnt</Description>
                        </interface-name>
                        <logical-router-id>
                                <Leaf_Type name='uint8'>
                                </Leaf_Type>
                                <Description>logical router ID for this neighbor entry</Description>
                        </logical-router-id>
                    </state>
                </neighbor>
            </neighbors>
        </ipv4>
    </arp-information>
</mib2d_arp_oc>
<mib2d_nd6_oc>
    <nd6-information>
        <ipv6>
            <neighbors>
                <neighbor ip='index-name'>
                    <ip>
                            <Description>References the configured IP neighbor address</Description>
                    </ip>
                    <state>
                        <ip>
                                <Leaf_Type name='string'>
                                <Pattern>[0-9a-fA-F:\.]*</Pattern>
                                </Leaf_Type>
                                <Description>[adapted from IETF IP model RFC 7277]  The IPv6 address of the neighbor node.</Description>
                        </ip>
                        <link-layer-address>
                                <Leaf_Type name='string'>
                                <Pattern>([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?</Pattern>
                                </Leaf_Type>
                                <Description>[adapted from IETF IP model RFC 7277]  The link-layer address of the neighbor node.</Description>
                        </link-layer-address>
                        <origin>
                                <Leaf_Type name='Enumerations'> ['OTHER', 'STATIC', 'DYNAMIC']</Leaf_Type>
                                <Description>[adapted from IETF IP model RFC 7277]  The origin of this neighbor entry.</Description>
                        </origin>
                        <is-router>
                                <Leaf_Type name='empty'>
                                </Leaf_Type>
                                <Description>[adapted from IETF IP model RFC 7277]  Indicates that the neighbor node acts as a router.</Description>
                        </is-router>
                        <neighbor-state>
                                <Leaf_Type name='Enumerations'> ['INCOMPLETE', 'REACHABLE', 'STALE', 'DELAY', 'PROBE']</Leaf_Type>
                                <Description>[adapted from IETF IP model RFC 7277]  The Neighbor Unreachability Detection state of this entry.</Description>
                        </neighbor-state>
                        <table-id>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                                <Description>Routing table ID for this neighbor entry</Description>
                        </table-id>
                        <is-secure>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>whether the neighbor was learnt from a secure NS message</Description>
                        </is-secure>
                        <expiry>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                                <Description>lifetime of this NDP entry</Description>
                        </expiry>
                        <is-publish>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>whether the NDP neighbor is a published one</Description>
                        </is-publish>
                        <interface-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                                <Description>interface on which this neighbor entry was learnt</Description>
                        </interface-name>
                        <logical-router-id>
                                <Leaf_Type name='uint8'>
                                </Leaf_Type>
                                <Description>logical router ID for this neighbor entry</Description>
                        </logical-router-id>
                    </state>
                </neighbor>
            </neighbors>
        </ipv6>
    </nd6-information>
</mib2d_nd6_oc>
<mib2d_oc>
    <interfaces>
        <interface name='index-name'>
            <name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
            </name>
            <state>
                <type>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                        <Description>[adapted from IETF interfaces model (RFC 7223)]  The type of the interface.  When an interface entry is created, a server MAY initialize the type leaf with a valid value, e.g., if it is possible to derive the type from the name of the interface.  If a client tries to set the type of an interface to a value that can never be used by the system, e.g., if the type is not supported or if the type does not match the name of the interface, the server MUST reject the request. A NETCONF server MUST reply with an rpc-error with the error-tag 'invalid-value' in this case.</Description>
                </type>
                <mtu>
                        <Leaf_Type name='uint16'>
                        </Leaf_Type>
                        <Description>Set the max transmission unit size in octets for the physical interface.  If this is not set, the mtu is set to the operational default -- e.g., 1514 bytes on an Ethernet interface.</Description>
                </mtu>
                <name>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                        <Description>[adapted from IETF interfaces model (RFC 7223)]  The name of the interface.  A device MAY restrict the allowed values for this leaf, possibly depending on the type of the interface. For system-controlled interfaces, this leaf is the device-specific name of the interface.  The 'config false' list interfaces/interface[name]/state contains the currently existing interfaces on the device.  If a client tries to create configuration for a system-controlled interface that is not present in the corresponding state list, the server MAY reject the request if the implementation does not support pre-provisioning of interfaces or if the name refers to an interface that can never exist in the system.  A NETCONF server MUST reply with an rpc-error with the error-tag 'invalid-value' in this case.  The IETF model in RFC 7223 provides YANG features for the following (i.e., pre-provisioning and arbitrary-names), however they are omitted here:   If the device supports pre-provisioning of interface  configuration, the 'pre-provisioning' feature is  advertised.   If the device allows arbitrarily named user-controlled  interfaces, the 'arbitrary-names' feature is advertised.  When a configured user-controlled interface is created by the system, it is instantiated with the same name in the /interfaces/interface[name]/state list.</Description>
                </name>
                <description>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                        <Description>[adapted from IETF interfaces model (RFC 7223)]  A textual description of the interface.  A server implementation MAY map this leaf to the ifAlias MIB object.  Such an implementation needs to use some mechanism to handle the differences in size and characters allowed between this leaf and ifAlias.  The definition of such a mechanism is outside the scope of this document.  Since ifAlias is defined to be stored in non-volatile storage, the MIB implementation MUST map ifAlias to the value of 'description' in the persistently stored datastore.  Specifically, if the device supports ':startup', when ifAlias is read the device MUST return the value of 'description' in the 'startup' datastore, and when it is written, it MUST be written to the 'running' and 'startup' datastores.  Note that it is up to the implementation to  decide whether to modify this single leaf in 'startup' or perform an implicit copy-config from 'running' to 'startup'.  If the device does not support ':startup', ifAlias MUST be mapped to the 'description' leaf in the 'running' datastore.</Description>
                </description>
                <enabled>
                        <Leaf_Type name='boolean'>
                        </Leaf_Type>
                        <Description>[adapted from IETF interfaces model (RFC 7223)]  This leaf contains the configured, desired state of the interface.  Systems that implement the IF-MIB use the value of this leaf in the 'running' datastore to set IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry has been initialized, as described in RFC 2863.  Changes in this leaf in the 'running' datastore are reflected in ifAdminStatus, but if ifAdminStatus is changed over SNMP, this leaf is not affected.</Description>
                </enabled>
                <ifindex>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                        <Description>System assigned number for each interface.  Corresponds to ifIndex object in SNMP Interface MIB</Description>
                </ifindex>
                <admin-status>
                        <Leaf_Type name='Enumerations'> ['UP', 'DOWN', 'TESTING']</Leaf_Type>
                        <Description>[adapted from IETF interfaces model (RFC 7223)]  The desired state of the interface.  In RFC 7223 this leaf has the same read semantics as ifAdminStatus.  Here, it reflects the administrative state as set by enabling or disabling the interface.</Description>
                </admin-status>
                <oper-status>
                        <Leaf_Type name='Enumerations'> ['UP', 'DOWN', 'TESTING', 'UNKNOWN', 'DORMANT', 'NOT_PRESENT', 'LOWER_LAYER_DOWN']</Leaf_Type>
                        <Description>[adapted from IETF interfaces model (RFC 7223)]  The current operational state of the interface.  This leaf has the same semantics as ifOperStatus.</Description>
                </oper-status>
                <last-change>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                        <Description>Date and time of the last state change of the interface (e.g., up-to-down transition).   This corresponds to the ifLastChange object in the standard interface MIB.</Description>
            </last-change>
        </state>
            <subinterfaces>
                <subinterface index='index-name'>
                    <index>
                            <Description>The index number of the subinterface -- used to address the logical interface</Description>
                    </index>
                    <state>
                        <index>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                                <Description>The index of the subinterface, or logical interface number. On systems with no support for subinterfaces, or not using subinterfaces, this value should default to 0, i.e., the default subinterface.</Description>
                        </index>
                        <name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                                <Description>[adapted from IETF interfaces model (RFC 7223)]  The name of the interface.  A device MAY restrict the allowed values for this leaf, possibly depending on the type of the interface. For system-controlled interfaces, this leaf is the device-specific name of the interface.  The 'config false' list interfaces/interface[name]/state contains the currently existing interfaces on the device.  If a client tries to create configuration for a system-controlled interface that is not present in the corresponding state list, the server MAY reject the request if the implementation does not support pre-provisioning of interfaces or if the name refers to an interface that can never exist in the system.  A NETCONF server MUST reply with an rpc-error with the error-tag 'invalid-value' in this case.  The IETF model in RFC 7223 provides YANG features for the following (i.e., pre-provisioning and arbitrary-names), however they are omitted here:   If the device supports pre-provisioning of interface  configuration, the 'pre-provisioning' feature is  advertised.   If the device allows arbitrarily named user-controlled  interfaces, the 'arbitrary-names' feature is advertised.  When a configured user-controlled interface is created by the system, it is instantiated with the same name in the /interfaces/interface[name]/state list.</Description>
                        </name>
                        <description>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                                <Description>[adapted from IETF interfaces model (RFC 7223)]  A textual description of the interface.  A server implementation MAY map this leaf to the ifAlias MIB object.  Such an implementation needs to use some mechanism to handle the differences in size and characters allowed between this leaf and ifAlias.  The definition of such a mechanism is outside the scope of this document.  Since ifAlias is defined to be stored in non-volatile storage, the MIB implementation MUST map ifAlias to the value of 'description' in the persistently stored datastore.  Specifically, if the device supports ':startup', when ifAlias is read the device MUST return the value of 'description' in the 'startup' datastore, and when it is written, it MUST be written to the 'running' and 'startup' datastores.  Note that it is up to the implementation to  decide whether to modify this single leaf in 'startup' or perform an implicit copy-config from 'running' to 'startup'.  If the device does not support ':startup', ifAlias MUST be mapped to the 'description' leaf in the 'running' datastore.</Description>
                        </description>
                        <enabled>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>[adapted from IETF interfaces model (RFC 7223)]  This leaf contains the configured, desired state of the interface.  Systems that implement the IF-MIB use the value of this leaf in the 'running' datastore to set IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry has been initialized, as described in RFC 2863.  Changes in this leaf in the 'running' datastore are reflected in ifAdminStatus, but if ifAdminStatus is changed over SNMP, this leaf is not affected.</Description>
                        </enabled>
                        <ifindex>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                                <Description>System assigned number for each interface.  Corresponds to ifIndex object in SNMP Interface MIB</Description>
                        </ifindex>
                        <admin-status>
                                <Leaf_Type name='Enumerations'> ['UP', 'DOWN', 'TESTING']</Leaf_Type>
                                <Description>[adapted from IETF interfaces model (RFC 7223)]  The desired state of the interface.  In RFC 7223 this leaf has the same read semantics as ifAdminStatus.  Here, it reflects the administrative state as set by enabling or disabling the interface.</Description>
                        </admin-status>
                        <oper-status>
                                <Leaf_Type name='Enumerations'> ['UP', 'DOWN', 'TESTING', 'UNKNOWN', 'DORMANT', 'NOT_PRESENT', 'LOWER_LAYER_DOWN']</Leaf_Type>
                                <Description>[adapted from IETF interfaces model (RFC 7223)]  The current operational state of the interface.  This leaf has the same semantics as ifOperStatus.</Description>
                        </oper-status>
                        <last-change>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                                <Description>Date and time of the last state change of the interface (e.g., up-to-down transition).   This corresponds to the ifLastChange object in the standard interface MIB.</Description>
                    </last-change>
                </state>
                    <ipv4>
                        <addresses>
                            <address ip='index-name'>
                                <ip>
                                        <Description>References the configured IP address</Description>
                                </ip>
                                <state>
                                    <ip>
                                            <Leaf_Type name='string'>
                                            <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                            <Description>[adapted from IETF IP model RFC 7277]  The IPv4 address on the interface.</Description>
                                    </ip>
                                    <prefix-length>
                                            <Leaf_Type name='uint8'>
                                            </Leaf_Type>
                                            <Description>[adapted from IETF IP model RFC 7277]  The length of the subnet prefix.</Description>
                                    </prefix-length>
                                    <origin>
                                            <Leaf_Type name='Enumerations'> ['OTHER', 'STATIC', 'DHCP', 'LINK_LAYER', 'RANDOM']</Leaf_Type>
                                            <Description>The origin of this address, e.g., statically configured, assigned by DHCP, etc..</Description>
                        </origin>
                    </state>
                </address>
            </addresses>
                        <neighbors>
                            <neighbor ip='index-name'>
                                <ip>
                                        <Description>References the configured IP address</Description>
                                </ip>
                                <state>
                                    <ip>
                                            <Leaf_Type name='string'>
                                            <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                            <Description>The IPv4 address of the neighbor node.</Description>
                                    </ip>
                                    <link-layer-address>
                                            <Leaf_Type name='string'>
                                            <Pattern>([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?</Pattern>
                                            </Leaf_Type>
                                            <Description>The link-layer address of the neighbor node.</Description>
                                    </link-layer-address>
                                    <origin>
                                            <Leaf_Type name='Enumerations'> ['OTHER', 'STATIC', 'DYNAMIC']</Leaf_Type>
                                            <Description>The origin of this neighbor entry, static or dynamic.</Description>
                                    </origin>
                                    <host-name>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>Host name for this neighbor entry</Description>
                                    </host-name>
                                    <table-id>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Routing table ID for this neighbor entry</Description>
                                    </table-id>
                                    <neighbor-state>
                                            <Leaf_Type name='Enumerations'> ['INCOMPLETE', 'REACHABLE', 'PROBE', 'PERM']</Leaf_Type>
                                            <Description>ARP neighbor FSM state</Description>
                                    </neighbor-state>
                                    <expiry>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>lifetime of ARP neighbor entry</Description>
                                    </expiry>
                                    <is-publish>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>whether the ARP neighbor is a published one</Description>
                                    </is-publish>
                                    <interface-name>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>interface on which this neighbor entry was learnt</Description>
                                    </interface-name>
                                    <logical-router-id>
                                            <Leaf_Type name='uint8'>
                                            </Leaf_Type>
                                            <Description>logical router ID for this neighbor entry</Description>
                        </logical-router-id>
                    </state>
                </neighbor>
            </neighbors>
                        <unnumbered>
                            <state>
                                <enabled>
                                        <Leaf_Type name='boolean'>
                                        </Leaf_Type>
                                        <Description>Indicates that the subinterface is unnumbered.  By default the subinterface is numbered, i.e., expected to have an IP address configuration.</Description>
                            </enabled>
                        </state>
                            <interface-ref>
                                <state>
                                    <interface>
                                            <Description>Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.</Description>
                                    </interface>
                                    <subinterface>
                                            <Description>Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.</Description>
                        </subinterface>
                    </state>
                </interface-ref>
            </unnumbered>
                        <state>
                            <enabled>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>Controls whether IPv4 is enabled or disabled on this interface.  When IPv4 is enabled, this interface is connected to an IPv4 stack, and the interface can send and receive IPv4 packets.</Description>
                            </enabled>
                            <mtu>
                                    <Leaf_Type name='uint16'>
                                    </Leaf_Type>
                                    <Description>The size, in octets, of the largest IPv4 packet that the interface will send and receive.  The server may restrict the allowed values for this leaf, depending on the interface's type.  If this leaf is not configured, the operationally used MTU depends on the interface's type.</Description>
                    </mtu>
                </state>
            </ipv4>
                    <ipv6>
                        <addresses>
                            <address ip='index-name'>
                                <ip>
                                        <Description>References the configured IP address</Description>
                                </ip>
                                <state>
                                    <ip>
                                            <Leaf_Type name='string'>
                                            <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                            <Description>[adapted from IETF IP model RFC 7277]  The IPv6 address on the interface.</Description>
                                    </ip>
                                    <prefix-length>
                                            <Leaf_Type name='uint8'>
                                            </Leaf_Type>
                                            <Description>[adapted from IETF IP model RFC 7277]  The length of the subnet prefix.</Description>
                                    </prefix-length>
                                    <origin>
                                            <Leaf_Type name='Enumerations'> ['OTHER', 'STATIC', 'DHCP', 'LINK_LAYER', 'RANDOM']</Leaf_Type>
                                            <Description>[adapted from IETF IP model RFC 7277]  The origin of this address, e.g., static, dhcp, etc.</Description>
                                    </origin>
                                    <status>
                                            <Leaf_Type name='Enumerations'> ['PREFERRED', 'DEPRECATED', 'INVALID', 'INACCESSIBLE', 'UNKNOWN', 'TENTATIVE', 'DUPLICATE', 'OPTIMISTIC']</Leaf_Type>
                                            <Description>[adapted from IETF IP model RFC 7277]  The status of an address.  Most of the states correspond to states from the IPv6 Stateless Address Autoconfiguration protocol.</Description>
                        </status>
                    </state>
                </address>
            </addresses>
                        <neighbors>
                            <neighbor ip='index-name'>
                                <ip>
                                        <Description>References the configured IP neighbor address</Description>
                                </ip>
                                <state>
                                    <ip>
                                            <Leaf_Type name='string'>
                                            <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                            <Description>[adapted from IETF IP model RFC 7277]  The IPv6 address of the neighbor node.</Description>
                                    </ip>
                                    <link-layer-address>
                                            <Leaf_Type name='string'>
                                            <Pattern>([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?</Pattern>
                                            </Leaf_Type>
                                            <Description>[adapted from IETF IP model RFC 7277]  The link-layer address of the neighbor node.</Description>
                                    </link-layer-address>
                                    <origin>
                                            <Leaf_Type name='Enumerations'> ['OTHER', 'STATIC', 'DYNAMIC']</Leaf_Type>
                                            <Description>[adapted from IETF IP model RFC 7277]  The origin of this neighbor entry.</Description>
                                    </origin>
                                    <is-router>
                                            <Leaf_Type name='empty'>
                                            </Leaf_Type>
                                            <Description>[adapted from IETF IP model RFC 7277]  Indicates that the neighbor node acts as a router.</Description>
                                    </is-router>
                                    <neighbor-state>
                                            <Leaf_Type name='Enumerations'> ['INCOMPLETE', 'REACHABLE', 'STALE', 'DELAY', 'PROBE']</Leaf_Type>
                                            <Description>[adapted from IETF IP model RFC 7277]  The Neighbor Unreachability Detection state of this entry.</Description>
                                    </neighbor-state>
                                    <table-id>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Routing table ID for this neighbor entry</Description>
                                    </table-id>
                                    <is-secure>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>whether the neighbor was learnt from a secure NS message</Description>
                                    </is-secure>
                                    <expiry>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>lifetime of this NDP entry</Description>
                                    </expiry>
                                    <is-publish>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>whether the NDP neighbor is a published one</Description>
                                    </is-publish>
                                    <interface-name>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>interface on which this neighbor entry was learnt</Description>
                                    </interface-name>
                                    <logical-router-id>
                                            <Leaf_Type name='uint8'>
                                            </Leaf_Type>
                                            <Description>logical router ID for this neighbor entry</Description>
                        </logical-router-id>
                    </state>
                </neighbor>
            </neighbors>
                        <unnumbered>
                            <state>
                                <enabled>
                                        <Leaf_Type name='boolean'>
                                        </Leaf_Type>
                                        <Description>Indicates that the subinterface is unnumbered.  By default the subinterface is numbered, i.e., expected to have an IP address configuration.</Description>
                            </enabled>
                        </state>
                            <interface-ref>
                                <state>
                                    <interface>
                                            <Description>Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.</Description>
                                    </interface>
                                    <subinterface>
                                            <Description>Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.</Description>
                        </subinterface>
                    </state>
                </interface-ref>
            </unnumbered>
                        <state>
                            <enabled>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF IP model RFC 7277]  Controls whether IPv6 is enabled or disabled on this interface.  When IPv6 is enabled, this interface is connected to an IPv6 stack, and the interface can send and receive IPv6 packets.</Description>
                            </enabled>
                            <mtu>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF IP model RFC 7277]  The size, in octets, of the largest IPv6 packet that the interface will send and receive.  The server may restrict the allowed values for this leaf, depending on the interface's type.  If this leaf is not configured, the operationally used MTU depends on the interface's type.</Description>
                            </mtu>
                        </state>
                    </ipv6>
                </subinterface>
            </subinterfaces>
        </interface>
    </interfaces>
</mib2d_oc>
<pfed_base>
</pfed_base>
<pfed_oc>
    <junos>
        <npu-memory pfe-name='index-name'>
            <pfe-name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
            </pfe-name>
            <combined-pool-name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
            </combined-pool-name>
            <combined-size>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
            </combined-size>
            <combined-usage-count>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
            </combined-usage-count>
            <combined-utilization>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
            </combined-utilization>
            <global-pool-name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
            </global-pool-name>
            <global-usage-count>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
            </global-usage-count>
            <global-alloc-count>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
            </global-alloc-count>
            <global-free-count>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
            </global-free-count>
            <local-pool-name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
            </local-pool-name>
            <local-usage-count>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
            </local-usage-count>
            <local-alloc-count>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
            </local-alloc-count>
            <local-free-count>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
</local-free-count>
</npu-memory>
</junos>
</pfed_oc>
<pfe_ifl_oc>
    <interfaces>
        <interface name='index-name'>
            <subinterfaces>
                <subinterface index='index-name'>
                    <state>
                        <counters>
                            <in-octets>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF interfaces model (RFC 7223)]  The total number of octets received on the interface, including framing characters.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                            </in-octets>
                            <in-unicast-pkts>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF interfaces model (RFC 7223)]  The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were not addressed to a multicast or broadcast address at this sub-layer.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                            </in-unicast-pkts>
                            <in-broadcast-pkts>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF interfaces model (RFC 7223)]  The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were addressed to a broadcast address at this sub-layer.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                            </in-broadcast-pkts>
                            <in-multicast-pkts>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF interfaces model (RFC 7223)]   The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were addressed to a multicast address at this sub-layer.  For a MAC-layer protocol, this includes both Group and Functional addresses.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                            </in-multicast-pkts>
                            <in-discards>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  The number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol.  One possible reason for discarding such a packet could be to free up buffer space.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                            </in-discards>
                            <in-errors>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.  For character- oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                            </in-errors>
                            <in-unknown-protos>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  For packet-oriented interfaces, the number of packets received via the interface that were discarded because of an unknown or unsupported protocol.  For character-oriented or fixed-length interfaces that support protocol multiplexing, the number of transmission units received via the interface that were discarded because of an unknown or unsupported protocol. For any interface that does not support protocol multiplexing, this counter is not present.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                            </in-unknown-protos>
                            <out-octets>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  The total number of octets transmitted out of the interface, including framing characters.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                            </out-octets>
                            <out-unicast-pkts>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF interfaces model (RFC 7223)]  The total number of packets that higher-level protocols requested be transmitted, and that were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                            </out-unicast-pkts>
                            <out-broadcast-pkts>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF interfaces model (RFC 7223)]  The total number of packets that higher-level protocols requested be transmitted, and that were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                            </out-broadcast-pkts>
                            <out-multicast-pkts>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  The total number of packets that higher-level protocols requested be transmitted, and that were addressed to a multicast address at this sub-layer, including those that were discarded or not sent.  For a MAC-layer protocol, this includes both Group and Functional addresses.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                            </out-multicast-pkts>
                            <out-discards>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  The number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent their being transmitted.  One possible reason for discarding such a packet could be to free up buffer space.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                            </out-discards>
                            <out-errors>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                                    <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                            </out-errors>
                            <last-clear>
                                    <Leaf_Type name='string'>
                                    <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                    </Leaf_Type>
                                    <Description>Indicates the last time the interface counters were cleared.</Description>
                            </last-clear>
                        </counters>
                    </state>
                </subinterface>
            </subinterfaces>
        </interface>
    </interfaces>
</pfe_ifl_oc>
<pfe_mpls_sr_egress_oc>
</pfe_mpls_sr_egress_oc>
<pfe_mpls_sr_ingress_oc>
</pfe_mpls_sr_ingress_oc>
<pfe_mpls_sr_sid_egress_oc>
</pfe_mpls_sr_sid_egress_oc>
<pfe_mpls_sr_sid_oc>
</pfe_mpls_sr_sid_oc>
<pfe_mpls_sr_te_bsid_oc>
</pfe_mpls_sr_te_bsid_oc>
<pfe_mpls_sr_te_ip_oc>
</pfe_mpls_sr_te_ip_oc>
<pfe_npu_resource>
</pfe_npu_resource>
<pfe_port_oc>
    <interfaces>
        <interface name='index-name'>
            <state>
                <counters>
                    <in-octets>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>[adapted from IETF interfaces model (RFC 7223)]  The total number of octets received on the interface, including framing characters.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                    </in-octets>
                    <in-unicast-pkts>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>[adapted from IETF interfaces model (RFC 7223)]  The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were not addressed to a multicast or broadcast address at this sub-layer.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                    </in-unicast-pkts>
                    <in-broadcast-pkts>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>[adapted from IETF interfaces model (RFC 7223)]  The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were addressed to a broadcast address at this sub-layer.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                    </in-broadcast-pkts>
                    <in-multicast-pkts>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>[adapted from IETF interfaces model (RFC 7223)]   The number of packets, delivered by this sub-layer to a higher (sub-)layer, that were addressed to a multicast address at this sub-layer.  For a MAC-layer protocol, this includes both Group and Functional addresses.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                    </in-multicast-pkts>
                    <in-discards>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  The number of inbound packets that were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol.  One possible reason for discarding such a packet could be to free up buffer space.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                    </in-discards>
                    <in-errors>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.  For character- oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                    </in-errors>
                    <in-unknown-protos>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                            <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  For packet-oriented interfaces, the number of packets received via the interface that were discarded because of an unknown or unsupported protocol.  For character-oriented or fixed-length interfaces that support protocol multiplexing, the number of transmission units received via the interface that were discarded because of an unknown or unsupported protocol. For any interface that does not support protocol multiplexing, this counter is not present.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                    </in-unknown-protos>
                    <out-octets>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  The total number of octets transmitted out of the interface, including framing characters.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                    </out-octets>
                    <out-unicast-pkts>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>[adapted from IETF interfaces model (RFC 7223)]  The total number of packets that higher-level protocols requested be transmitted, and that were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                    </out-unicast-pkts>
                    <out-broadcast-pkts>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>[adapted from IETF interfaces model (RFC 7223)]  The total number of packets that higher-level protocols requested be transmitted, and that were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                    </out-broadcast-pkts>
                    <out-multicast-pkts>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  The total number of packets that higher-level protocols requested be transmitted, and that were addressed to a multicast address at this sub-layer, including those that were discarded or not sent.  For a MAC-layer protocol, this includes both Group and Functional addresses.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                    </out-multicast-pkts>
                    <out-discards>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  The number of outbound packets that were chosen to be discarded even though no errors had been detected to prevent their being transmitted.  One possible reason for discarding such a packet could be to free up buffer space.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                    </out-discards>
                    <out-errors>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>[adapted from IETF interfaces model (RFC 7223)] Changed the counter type to counter64.  For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors.  Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of 'discontinuity-time'.</Description>
                    </out-errors>
                    <last-clear>
                            <Leaf_Type name='string'>
                            <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                            </Leaf_Type>
                            <Description>Indicates the last time the interface counters were cleared.</Description>
                    </last-clear>
                </counters>
            </state>
        </interface>
    </interfaces>
</pfe_port_oc>
<rmopd_render>
    <junos>
        <rpm>
            <probe-results>
                <probe-test-results owner_test-name='index-name'>
                    <owner>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </owner>
                    <test-name>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </test-name>
                    <target-address>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </target-address>
                    <target-url>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </target-url>
                    <source-address>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </source-address>
                    <destination-interface>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </destination-interface>
                    <probe-type>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </probe-type>
                    <icmp-id>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                    </icmp-id>
                    <test-size>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </test-size>
                    <http-status>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </http-status>
                    <routing-instance-name>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </routing-instance-name>
                    <rtt-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </rtt-thresh>
                    <rtt-jitter-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </rtt-jitter-thresh>
                    <rtt-stddev-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </rtt-stddev-thresh>
                    <igr-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </igr-thresh>
                    <igr-jitter-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </igr-jitter-thresh>
                    <igr-stddev-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </igr-stddev-thresh>
                    <egr-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </egr-thresh>
                    <egr-jitter-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </egr-jitter-thresh>
                    <egr-stddev-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </egr-stddev-thresh>
                    <probe-tests-hw-ts-err>
                        <invalid-client-recv-ts-cntr>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </invalid-client-recv-ts-cntr>
                        <invalid-client-nots-cntr>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </invalid-client-nots-cntr>
                        <invalid-server-send-ts-cntr>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </invalid-server-send-ts-cntr>
                        <invalid-server-spent-time-cntr>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                    </invalid-server-spent-time-cntr>
                </probe-tests-hw-ts-err>
                    <probe-single-results>
                        <probe-time>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </probe-time>
                        <probe-sent-time>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </probe-sent-time>
                        <probe-status>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </probe-status>
                        <hardware-timestamp-status>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </hardware-timestamp-status>
                        <rtt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </rtt>
                        <egress>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </egress>
                        <ingress>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </ingress>
                        <egress-jitter>
                                <Leaf_Type name='int32'>
                                </Leaf_Type>
                        </egress-jitter>
                        <ingress-jitter>
                                <Leaf_Type name='int32'>
                                </Leaf_Type>
                        </ingress-jitter>
                        <round-trip-jitter>
                                <Leaf_Type name='int32'>
                                </Leaf_Type>
                        </round-trip-jitter>
                        <egress-interarrival-jitter>
                                <Leaf_Type name='int32'>
                                </Leaf_Type>
                        </egress-interarrival-jitter>
                        <ingress-interarrival-jitter>
                                <Leaf_Type name='int32'>
                                </Leaf_Type>
                        </ingress-interarrival-jitter>
                        <round-trip-interarrival-jitter>
                                <Leaf_Type name='int32'>
                                </Leaf_Type>
                        </round-trip-interarrival-jitter>
                        <http-status>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                    </http-status>
                </probe-single-results>
                    <probe-test-generic-results results-scope='index-name'>
                        <results-scope>
                                <Leaf_Type name='results-scope'>
                                </Leaf_Type>
                        </results-scope>
                        <probes-sent>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </probes-sent>
                        <probe-responses>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </probe-responses>
                        <loss-percentage>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </loss-percentage>
                        <last-test-time>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </last-test-time>
                        <probe-test-generic-measurements probe-measurement-type='index-name'>
                            <probe-measurement-type>
                                    <Leaf_Type name='probe-results-type'>
                                    </Leaf_Type>
                            </probe-measurement-type>
                            <samples>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </samples>
                            <min-delay>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </min-delay>
                            <max-delay>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </max-delay>
                            <avg-delay>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </avg-delay>
                            <jitter-delay>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </jitter-delay>
                            <stddev-delay>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </stddev-delay>
                            <sum-delay>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
            </sum-delay>
        </probe-test-generic-measurements>
    </probe-test-generic-results>
</probe-test-results>
</probe-results>
            <history-results>
                <history-test-results>
                    <history-single-test-results owner_test-name='index-name'>
                        <owner>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </owner>
                        <test-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </test-name>
                        <target-address>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </target-address>
                        <target-url>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </target-url>
                        <source-address>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </source-address>
                        <destination-interface>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </destination-interface>
                        <probe-type>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </probe-type>
                        <icmp-id>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                        </icmp-id>
                        <test-size>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </test-size>
                        <http-status>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </http-status>
                        <routing-instance-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </routing-instance-name>
                        <rtt-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </rtt-thresh>
                        <rtt-jitter-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </rtt-jitter-thresh>
                        <rtt-stddev-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </rtt-stddev-thresh>
                        <igr-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </igr-thresh>
                        <igr-jitter-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </igr-jitter-thresh>
                        <igr-stddev-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </igr-stddev-thresh>
                        <egr-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </egr-thresh>
                        <egr-jitter-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </egr-jitter-thresh>
                        <egr-stddev-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </egr-stddev-thresh>
                        <probe-single-results>
                            <probe-time>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                            </probe-time>
                            <probe-sent-time>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                            </probe-sent-time>
                            <probe-status>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                            </probe-status>
                            <hardware-timestamp-status>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                            </hardware-timestamp-status>
                            <rtt>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </rtt>
                            <egress>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </egress>
                            <ingress>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </ingress>
                            <egress-jitter>
                                    <Leaf_Type name='int32'>
                                    </Leaf_Type>
                            </egress-jitter>
                            <ingress-jitter>
                                    <Leaf_Type name='int32'>
                                    </Leaf_Type>
                            </ingress-jitter>
                            <round-trip-jitter>
                                    <Leaf_Type name='int32'>
                                    </Leaf_Type>
                            </round-trip-jitter>
                            <egress-interarrival-jitter>
                                    <Leaf_Type name='int32'>
                                    </Leaf_Type>
                            </egress-interarrival-jitter>
                            <ingress-interarrival-jitter>
                                    <Leaf_Type name='int32'>
                                    </Leaf_Type>
                            </ingress-interarrival-jitter>
                            <round-trip-interarrival-jitter>
                                    <Leaf_Type name='int32'>
                                    </Leaf_Type>
                            </round-trip-interarrival-jitter>
                            <http-status>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
            </http-status>
        </probe-single-results>
    </history-single-test-results>
</history-test-results>
</history-results>
            <server>
                <active-servers>
                    <protocol>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </protocol>
                    <port>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                    </port>
                    <dst-interface>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
        </dst-interface>
    </active-servers>
</server>
</rpm>
        <twamp>
            <server>
                <control-connection connection-id='index-name'>
                    <connection-id>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </connection-id>
                    <client-address>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </client-address>
                    <client-port>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                    </client-port>
                    <server-address>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </server-address>
                    <server-port>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                    </server-port>
                    <session-count>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </session-count>
                    <authentication-mode>
                            <Leaf_Type name='twamp-mode'>
                            </Leaf_Type>
                    </authentication-mode>
                    <session-state>
                            <Leaf_Type name='twamp-session-state'>
                            </Leaf_Type>
                </session-state>
            </control-connection>
                <test-session connection-id='index-name'>
                    <connection-id>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </connection-id>
                    <test-session-info test-id='index-name'>
                        <test-id>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </test-id>
                        <sender-address>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </sender-address>
                        <sender-port>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                        </sender-port>
                        <reflector-address>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </reflector-address>
                        <reflector-port>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
            </reflector-port>
        </test-session-info>
    </test-session>
</server>
            <client>
                <control-connection control-name='index-name'>
                    <control-name>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </control-name>
                    <client-address>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </client-address>
                    <client-port>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                    </client-port>
                    <server-address>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </server-address>
                    <server-port>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                    </server-port>
                    <session-count>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </session-count>
                    <auth-mode>
                            <Leaf_Type name='twamp-mode'>
                            </Leaf_Type>
                </auth-mode>
            </control-connection>
                <test-session control-name='index-name'>
                    <control-name>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </control-name>
                    <client-address>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </client-address>
                    <client-port>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                    </client-port>
                    <server-address>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </server-address>
                    <server-port>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                    </server-port>
                    <session-count>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </session-count>
                    <auth-mode>
                            <Leaf_Type name='twamp-mode'>
                            </Leaf_Type>
                    </auth-mode>
                    <test-session-info session-name='index-name'>
                        <session-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </session-name>
                        <sender-address>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </sender-address>
                        <sender-port>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                        </sender-port>
                        <reflector-address>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </reflector-address>
                        <reflector-port>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                </reflector-port>
            </test-session-info>
        </test-session>
                <probe-test-results owner_test-name='index-name'>
                    <owner>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </owner>
                    <test-name>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </test-name>
                    <destination-interface>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </destination-interface>
                    <test-size>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </test-size>
                    <client-address>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </client-address>
                    <client-port>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                    </client-port>
                    <sender-address>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </sender-address>
                    <sender-port>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                    </sender-port>
                    <reflector-address>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </reflector-address>
                    <reflector-port>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                    </reflector-port>
                    <server-address>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </server-address>
                    <server-port>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                    </server-port>
                    <loss-thresh-total>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </loss-thresh-total>
                    <loss-thresh-succ>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </loss-thresh-succ>
                    <rtt-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </rtt-thresh>
                    <rtt-jitter-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </rtt-jitter-thresh>
                    <rtt-stddev-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </rtt-stddev-thresh>
                    <igr-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </igr-thresh>
                    <igr-jitter-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </igr-jitter-thresh>
                    <igr-stddev-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </igr-stddev-thresh>
                    <egr-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </egr-thresh>
                    <egr-jitter-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </egr-jitter-thresh>
                    <egr-stddev-thresh>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </egr-stddev-thresh>
                    <routing-instance-name>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </routing-instance-name>
                    <probe-tests-hw-ts-err>
                        <invalid-client-recv-ts-cntr>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </invalid-client-recv-ts-cntr>
                        <invalid-client-nots-cntr>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </invalid-client-nots-cntr>
                        <invalid-server-send-ts-cntr>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </invalid-server-send-ts-cntr>
                        <invalid-server-spent-time-cntr>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                    </invalid-server-spent-time-cntr>
                </probe-tests-hw-ts-err>
                    <probe-single-results>
                        <probe-time>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </probe-time>
                        <probe-sent-time>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </probe-sent-time>
                        <probe-status>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </probe-status>
                        <hardware-timestamp-status>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </hardware-timestamp-status>
                        <rtt>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </rtt>
                        <egress>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </egress>
                        <ingress>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </ingress>
                        <egress-jitter>
                                <Leaf_Type name='int32'>
                                </Leaf_Type>
                        </egress-jitter>
                        <ingress-jitter>
                                <Leaf_Type name='int32'>
                                </Leaf_Type>
                        </ingress-jitter>
                        <round-trip-jitter>
                                <Leaf_Type name='int32'>
                                </Leaf_Type>
                        </round-trip-jitter>
                        <egress-interarrival-jitter>
                                <Leaf_Type name='int32'>
                                </Leaf_Type>
                        </egress-interarrival-jitter>
                        <ingress-interarrival-jitter>
                                <Leaf_Type name='int32'>
                                </Leaf_Type>
                        </ingress-interarrival-jitter>
                        <round-trip-interarrival-jitter>
                                <Leaf_Type name='int32'>
                                </Leaf_Type>
                        </round-trip-interarrival-jitter>
                        <http-status>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                    </http-status>
                </probe-single-results>
                    <probe-test-generic-results results-scope='index-name'>
                        <results-scope>
                                <Leaf_Type name='results-scope'>
                                </Leaf_Type>
                        </results-scope>
                        <probes-sent>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </probes-sent>
                        <probe-responses>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </probe-responses>
                        <loss-percentage>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </loss-percentage>
                        <last-test-time>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </last-test-time>
                        <probe-test-generic-measurements probe-measurement-type='index-name'>
                            <probe-measurement-type>
                                    <Leaf_Type name='probe-results-type'>
                                    </Leaf_Type>
                            </probe-measurement-type>
                            <samples>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </samples>
                            <min-delay>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </min-delay>
                            <max-delay>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </max-delay>
                            <avg-delay>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </avg-delay>
                            <jitter-delay>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </jitter-delay>
                            <stddev-delay>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                            </stddev-delay>
                            <sum-delay>
                                    <Leaf_Type name='uint64'>
                                    </Leaf_Type>
                </sum-delay>
            </probe-test-generic-measurements>
        </probe-test-generic-results>
    </probe-test-results>
                <history-test-results>
                    <history-single-test-results owner_test-name='index-name'>
                        <owner>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </owner>
                        <test-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </test-name>
                        <destination-interface>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </destination-interface>
                        <test-size>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </test-size>
                        <client-address>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </client-address>
                        <client-port>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                        </client-port>
                        <sender-address>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </sender-address>
                        <sender-port>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                        </sender-port>
                        <reflector-address>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </reflector-address>
                        <reflector-port>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                        </reflector-port>
                        <server-address>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </server-address>
                        <server-port>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                        </server-port>
                        <loss-thresh-total>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </loss-thresh-total>
                        <loss-thresh-succ>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </loss-thresh-succ>
                        <rtt-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </rtt-thresh>
                        <rtt-jitter-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </rtt-jitter-thresh>
                        <rtt-stddev-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </rtt-stddev-thresh>
                        <igr-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </igr-thresh>
                        <igr-jitter-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </igr-jitter-thresh>
                        <igr-stddev-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </igr-stddev-thresh>
                        <egr-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </egr-thresh>
                        <egr-jitter-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </egr-jitter-thresh>
                        <egr-stddev-thresh>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                        </egr-stddev-thresh>
                        <routing-instance-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </routing-instance-name>
                        <probe-single-results>
                            <probe-time>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                            </probe-time>
                            <probe-sent-time>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                            </probe-sent-time>
                            <probe-status>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                            </probe-status>
                            <hardware-timestamp-status>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                            </hardware-timestamp-status>
                            <rtt>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </rtt>
                            <egress>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </egress>
                            <ingress>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                            </ingress>
                            <egress-jitter>
                                    <Leaf_Type name='int32'>
                                    </Leaf_Type>
                            </egress-jitter>
                            <ingress-jitter>
                                    <Leaf_Type name='int32'>
                                    </Leaf_Type>
                            </ingress-jitter>
                            <round-trip-jitter>
                                    <Leaf_Type name='int32'>
                                    </Leaf_Type>
                            </round-trip-jitter>
                            <egress-interarrival-jitter>
                                    <Leaf_Type name='int32'>
                                    </Leaf_Type>
                            </egress-interarrival-jitter>
                            <ingress-interarrival-jitter>
                                    <Leaf_Type name='int32'>
                                    </Leaf_Type>
                            </ingress-interarrival-jitter>
                            <round-trip-interarrival-jitter>
                                    <Leaf_Type name='int32'>
                                    </Leaf_Type>
                            </round-trip-interarrival-jitter>
                            <http-status>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
</http-status>
</probe-single-results>
</history-single-test-results>
</history-test-results>
</client>
</twamp>
</junos>
</rmopd_render>
<rpd_bgp_oc>
    <bgp>
        <global>
            <state>
                <as>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                        <Description>Local autonomous system number of the router.  Uses the 32-bit as-number type from the model in RFC 6991.</Description>
                </as>
                <router-id>
                        <Leaf_Type name='string'>
                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])</Pattern>
                        </Leaf_Type>
                        <Description>Router id of the router - an unsigned 32-bit integer expressed in dotted quad notation.</Description>
                </router-id>
                <total-paths>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                        <Description>Total number of BGP paths within the context</Description>
                </total-paths>
                <total-prefixes>
                        <Leaf_Type name='uint32'>
                        </Leaf_Type>
                        <Description>Total number of BGP prefixes received within the context</Description>
            </total-prefixes>
        </state>
            <route-selection-options>
                <state>
                    <always-compare-med>
                            <Leaf_Type name='boolean'>
                            </Leaf_Type>
                            <Description>Compare multi-exit discriminator (MED) value from different ASes when selecting the best route.  The default behavior is to only compare MEDs for paths received from the same AS.</Description>
                    </always-compare-med>
                    <ignore-as-path-length>
                            <Leaf_Type name='boolean'>
                            </Leaf_Type>
                            <Description>Ignore the AS path length when selecting the best path. The default is to use the AS path length and prefer paths with shorter length.</Description>
                    </ignore-as-path-length>
                    <external-compare-router-id>
                            <Leaf_Type name='boolean'>
                            </Leaf_Type>
                            <Description>When comparing similar routes received from external BGP peers, use the router-id as a criterion to select the active path.</Description>
                    </external-compare-router-id>
                    <advertise-inactive-routes>
                            <Leaf_Type name='boolean'>
                            </Leaf_Type>
                            <Description>Advertise inactive routes to external peers.  The default is to only advertise active routes.</Description>
            </advertise-inactive-routes>
        </state>
    </route-selection-options>
            <confederation>
                <state>
                    <enabled>
                            <Leaf_Type name='boolean'>
                            </Leaf_Type>
                            <Description>When this leaf is set to true it indicates that the local-AS is part of a BGP confederation</Description>
                    </enabled>
                    <identifier>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                            <Description>Confederation identifier for the autonomous system.</Description>
                    </identifier>
                    <member-as>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                            <Description>Remote autonomous systems that are to be treated as part of the local confederation.</Description>
            </member-as>
        </state>
    </confederation>
            <graceful-restart>
                <state>
                    <enabled>
                            <Leaf_Type name='boolean'>
                            </Leaf_Type>
                            <Description>Enable or disable the graceful-restart capability.</Description>
                    </enabled>
                    <restart-time>
                            <Leaf_Type name='uint16'>
                            </Leaf_Type>
                            <Description>Estimated time (in seconds) for the local BGP speaker to restart a session. This value is advertise in the graceful restart BGP capability.  This is a 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the suggested default value is &lt;= the hold-time value.</Description>
                    </restart-time>
                    <stale-routes-time>
                            <Leaf_Type name='decimal64'>
                            </Leaf_Type>
                            <Description>An upper-bound on the time thate stale routes will be retained by a router after a session is restarted. If an End-of-RIB (EOR) marker is received prior to this timer expiring stale-routes will be flushed upon its receipt - if no EOR is received, then when this timer expires stale paths will be purged. This timer is referred to as the Selection_Deferral_Timer in RFC4724</Description>
                    </stale-routes-time>
                    <helper-only>
                            <Leaf_Type name='boolean'>
                            </Leaf_Type>
                            <Description>Enable graceful-restart in helper mode only. When this leaf is set, the local system does not retain forwarding its own state during a restart, but supports procedures for the receiving speaker, as defined in RFC4724.</Description>
            </helper-only>
        </state>
    </graceful-restart>
            <apply-policy>
                <state>
                    <import-policy>
                            <Description>list of policy names in sequence to be applied on receiving a routing update in the current context, e.g., for the current peer group, neighbor, address family, etc.</Description>
                    </import-policy>
                    <export-policy>
                            <Description>list of policy names in sequence to be applied on sending a routing update in the current context, e.g., for the current peer group, neighbor, address family, etc.</Description>
            </export-policy>
        </state>
    </apply-policy>
            <afi-safis>
                <afi-safi afi-safi-name='index-name'>
                    <afi-safi-name>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                    </afi-safi-name>
                    <graceful-restart>
                        <state>
                            <enabled>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>This leaf indicates whether graceful-restart is enabled for this AFI-SAFI</Description>
                    </enabled>
                </state>
            </graceful-restart>
                    <state>
                        <afi-safi-name>
                                <Leaf_Type name='Idenity'>
                                </Leaf_Type>
                                <Description>AFI,SAFI</Description>
                        </afi-safi-name>
                        <enabled>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the neighbour or group</Description>
                        </enabled>
                        <total-paths>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                                <Description>Total number of BGP paths within the context</Description>
                        </total-paths>
                        <total-prefixes>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                                <Description>Total number of BGP prefixes received within the context</Description>
                        </total-prefixes>
                        <prefix-limit>
                            <state>
                                <max-prefixes>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>Maximum number of prefixes that will be accepted from the neighbour</Description>
                                </max-prefixes>
                                <shutdown-threshold-pct>
                                        <Leaf_Type name='uint8'>
                                        </Leaf_Type>
                                        <Description>Threshold on number of prefixes that can be received from a neighbour before generation of warning messages or log entries. Expressed as a percentage of max-prefixes</Description>
                                </shutdown-threshold-pct>
                                <restart-timer>
                                        <Leaf_Type name='decimal64'>
                                        </Leaf_Type>
                                        <Description>Time interval in seconds after which the BGP session is re-established after being torn down due to exceeding the max-prefix limit.</Description>
        </restart-timer>
    </state>
</prefix-limit>
</state>
</afi-safi>
</afi-safis>
</global>
        <neighbors>
            <neighbor neighbor-address='index-name'>
                <neighbor-address>
                        <Leaf_Type name='union'>
                            <Leaf_Type name='string'>
                            <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                            </Leaf_Type>
                            <Leaf_Type name='string'>
                            <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                            </Leaf_Type>
                        </Leaf_Type>
                        <Description>Address of the BGP peer, either in IPv4 or IPv6</Description>
                </neighbor-address>
                <state>
                    <peer-as>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                            <Description>AS number of the peer.</Description>
                    </peer-as>
                    <local-as>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                            <Description>The local autonomous system number that is to be used when establishing sessions with the remote peer or peer group, if this differs from the global BGP router autonomous system number.</Description>
                    </local-as>
                    <peer-type>
                            <Leaf_Type name='Enumerations'> ['INTERNAL', 'EXTERNAL']</Leaf_Type>
                            <Description>Explicitly designate the peer or peer group as internal (iBGP) or external (eBGP).</Description>
                    </peer-type>
                    <auth-password>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                            <Description>Configures an MD5 authentication password for use with neighboring devices.</Description>
                    </auth-password>
                    <remove-private-as>
                            <Leaf_Type name='Idenity'>
                            </Leaf_Type>
                            <Description>Remove private AS numbers from updates sent to peers - when this leaf is not specified, the AS_PATH attribute should be sent to the peer unchanged</Description>
                    </remove-private-as>
                    <route-flap-damping>
                            <Leaf_Type name='boolean'>
                            </Leaf_Type>
                            <Description>Enable route flap damping.</Description>
                    </route-flap-damping>
                    <description>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                            <Description>An optional textual description (intended primarily for use with a peer or group</Description>
                    </description>
                    <session-state>
                            <Leaf_Type name='Enumerations'> ['IDLE', 'CONNECT', 'ACTIVE', 'OPENSENT', 'OPENCONFIRM', 'ESTABLISHED']</Leaf_Type>
                            <Description>Operational state of the BGP peer</Description>
                    </session-state>
                    <last-established>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>This timestamp indicates the time that the BGP session last transitioned in or out of the Established state.  The value is the timestamp in seconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC). The BGP session uptime can be computed by clients as the difference between this value and the current time in UTC (assuming the session is in the ESTABLISHED state, per the session-state leaf).</Description>
                    </last-established>
                    <established-transitions>
                            <Leaf_Type name='uint64'>
                            </Leaf_Type>
                            <Description>Number of transitions to the Established state for the neighbor session.  This value is analogous to the bgpPeerFsmEstablishedTransitions object from the standard BGP-4 MIB</Description>
                    </established-transitions>
                    <supported-capabilities>
                            <Leaf_Type name='Idenity'>
                            </Leaf_Type>
                            <Description>BGP capabilities negotiated as supported with the peer</Description>
                    </supported-capabilities>
                    <session-status>
                            <Leaf_Type name='Enumerations'> ['RUNNING', 'HALTED']</Leaf_Type>
                            <Description>Whether the BGP FSM for this remote peer is halted or running. MIB Equivalent: jnxBgpM2PeerStatus</Description>
                    </session-status>
                    <session-admin-status>
                            <Leaf_Type name='Enumerations'> ['STOP', 'START']</Leaf_Type>
                            <Description>The desired state of the BGP connection</Description>
                    </session-admin-status>
                    <interface-error>
                            <Leaf_Type name='boolean'>
                            </Leaf_Type>
                            <Description>If true - this peer session is permanently idled</Description>
                    </interface-error>
                    <peer-group>
                            <Description>The peer-group with which this neighbor is associated</Description>
                    </peer-group>
                    <neighbor-address>
                            <Leaf_Type name='union'>
                                <Leaf_Type name='string'>
                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                </Leaf_Type>
                                <Leaf_Type name='string'>
                                <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                </Leaf_Type>
                            </Leaf_Type>
                            <Description>Address of the BGP peer, either in IPv4 or IPv6</Description>
                    </neighbor-address>
                    <enabled>
                            <Leaf_Type name='boolean'>
                            </Leaf_Type>
                            <Description>Whether the BGP peer is enabled. In cases where the enabled leaf is set to false, the local system should not initiate connections to the neighbor, and should not respond to TCP connections attempts from the neighbor. If the state of the BGP session is ESTABLISHED at the time that this leaf is set to false, the BGP session should be ceased.</Description>
                </enabled>
            </state>
                <timers>
                    <state>
                        <connect-retry>
                                <Leaf_Type name='decimal64'>
                                </Leaf_Type>
                                <Description>Time interval in seconds between attempts to establish a session with the peer.</Description>
                        </connect-retry>
                        <hold-time>
                                <Leaf_Type name='decimal64'>
                                </Leaf_Type>
                                <Description>Time interval in seconds that a BGP session will be considered active in the absence of keepalive or other messages from the peer.  The hold-time is typically set to 3x the keepalive-interval.</Description>
                        </hold-time>
                        <keepalive-interval>
                                <Leaf_Type name='decimal64'>
                                </Leaf_Type>
                                <Description>Time interval in seconds between transmission of keepalive messages to the neighbor.  Typically set to 1/3 the hold-time.</Description>
                        </keepalive-interval>
                        <minimum-advertisement-interval>
                                <Leaf_Type name='decimal64'>
                                </Leaf_Type>
                                <Description>Minimum time which must elapse between subsequent UPDATE messages relating to a common set of NLRI being transmitted to a peer. This timer is referred to as MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to reduce the number of UPDATE messages transmitted when a particular set of NLRI exhibit instability.</Description>
                        </minimum-advertisement-interval>
                        <negotiated-hold-time>
                                <Leaf_Type name='decimal64'>
                                </Leaf_Type>
                                <Description>The negotiated hold-time for the BGP session</Description>
                </negotiated-hold-time>
            </state>
        </timers>
                <transport>
                    <state>
                        <tcp-mss>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                                <Description>Sets the max segment size for BGP TCP sessions.</Description>
                        </tcp-mss>
                        <mtu-discovery>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Turns path mtu discovery for BGP TCP sessions on (true) or off (false)</Description>
                        </mtu-discovery>
                        <passive-mode>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Wait for peers to issue requests to open a BGP session, rather than initiating sessions from the local router.</Description>
                        </passive-mode>
                        <local-address>
                                <Leaf_Type name='union'>
                                    <Leaf_Type name='union'>
                                        <Leaf_Type name='string'>
                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                        </Leaf_Type>
                                        <Leaf_Type name='string'>
                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                        </Leaf_Type>
                                    </Leaf_Type>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                </Leaf_Type>
                                <Description>Set the local IP (either IPv4 or IPv6) address to use for the session when sending BGP update messages.  This may be expressed as either an IP address or reference to the name of an interface.</Description>
                        </local-address>
                        <local-port>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                                <Description>Local TCP port being used for the TCP session supporting the BGP session</Description>
                        </local-port>
                        <remote-address>
                                <Leaf_Type name='union'>
                                    <Leaf_Type name='string'>
                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                    </Leaf_Type>
                                    <Leaf_Type name='string'>
                                    <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                    </Leaf_Type>
                                </Leaf_Type>
                                <Description>Remote address to which the BGP session has been established</Description>
                        </remote-address>
                        <remote-port>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                                <Description>Remote port being used by the peer for the TCP session supporting the BGP session</Description>
                </remote-port>
            </state>
        </transport>
                <error-handling>
                    <state>
                        <treat-as-withdraw>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Specify whether erroneous UPDATE messages for which the NLRI can be extracted are reated as though the NLRI is withdrawn - avoiding session reset</Description>
                        </treat-as-withdraw>
                        <erroneous-update-messages>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                                <Description>The number of BGP UPDATE messages for which the treat-as-withdraw mechanism has been applied based on erroneous message contents</Description>
                </erroneous-update-messages>
            </state>
        </error-handling>
                <logging-options>
                    <state>
                        <log-neighbor-state-changes>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Configure logging of peer state changes.  Default is to enable logging of peer state changes.</Description>
                </log-neighbor-state-changes>
            </state>
        </logging-options>
                <ebgp-multihop>
                    <state>
                        <enabled>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>When enabled the referenced group or neighbors are permitted to be indirectly connected - including cases where the TTL can be decremented between the BGP peers</Description>
                        </enabled>
                        <multihop-ttl>
                                <Leaf_Type name='uint8'>
                                </Leaf_Type>
                                <Description>Time-to-live value to use when packets are sent to the referenced group or neighbors and ebgp-multihop is enabled</Description>
                </multihop-ttl>
            </state>
        </ebgp-multihop>
                <route-reflector>
                    <state>
                        <route-reflector-cluster-id>
                                <Leaf_Type name='union'>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Leaf_Type name='string'>
                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                    </Leaf_Type>
                                </Leaf_Type>
                                <Description>route-reflector cluster id to use when local router is configured as a route reflector.  Commonly set at the group level, but allows a different cluster id to be set for each neighbor.</Description>
                        </route-reflector-cluster-id>
                        <route-reflector-client>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Configure the neighbor as a route reflector client.</Description>
                </route-reflector-client>
            </state>
        </route-reflector>
                <as-path-options>
                    <state>
                        <allow-own-as>
                                <Leaf_Type name='uint8'>
                                </Leaf_Type>
                                <Description>Specify the number of occurrences of the local BGP speaker's AS that can occur within the AS_PATH before it is rejected.</Description>
                        </allow-own-as>
                        <replace-peer-as>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Replace occurrences of the peer's AS in the AS_PATH with the local autonomous system number</Description>
                </replace-peer-as>
            </state>
        </as-path-options>
                <use-multiple-paths>
                    <state>
                        <enabled>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Whether the use of multiple paths for the same NLRI is enabled for the neighbor. This value is overridden by any more specific configuration value.</Description>
                    </enabled>
                </state>
                    <ebgp>
                        <state>
                            <allow-multiple-as>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>Allow multipath to use paths from different neighbouring ASes.  The default is to only consider multiple paths from the same neighbouring AS.</Description>
                            </allow-multiple-as>
                            <maximum-paths>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Maximum number of parallel paths to consider when using BGP multipath. The default is use a single path.</Description>
                    </maximum-paths>
                </state>
            </ebgp>
                    <ibgp>
                        <state>
                            <maximum-paths>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Maximum number of parallel paths to consider when using iBGP multipath. The default is to use a single path</Description>
                </maximum-paths>
            </state>
        </ibgp>
    </use-multiple-paths>
                <afi-safis>
                    <afi-safi afi-safi-name='index-name'>
                        <afi-safi-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </afi-safi-name>
                        <graceful-restart>
                            <state>
                                <enabled>
                                        <Leaf_Type name='boolean'>
                                        </Leaf_Type>
                                        <Description>This leaf indicates whether graceful-restart is enabled for this AFI-SAFI</Description>
                                </enabled>
                                <received>
                                        <Leaf_Type name='boolean'>
                                        </Leaf_Type>
                                        <Description>This leaf indicates whether the neighbor advertised the ability to support graceful-restart for this AFI-SAFI</Description>
                                </received>
                                <advertised>
                                        <Leaf_Type name='boolean'>
                                        </Leaf_Type>
                                        <Description>This leaf indicates whether the ability to support graceful-restart has been advertised to the peer</Description>
                        </advertised>
                    </state>
                </graceful-restart>
                        <state>
                            <afi-safi-name>
                                    <Leaf_Type name='Idenity'>
                                    </Leaf_Type>
                                    <Description>AFI,SAFI</Description>
                            </afi-safi-name>
                            <enabled>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the neighbour or group</Description>
                            </enabled>
                            <active>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>This value indicates whether a particular AFI-SAFI has been succesfully negotiated with the peer. An AFI-SAFI may be enabled in the current running configuration, but a session restart may be required in order to negotiate the new capability.</Description>
                            </active>
                            <prefixes>
                                <received>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>The number of prefixes received from the neighbor</Description>
                                </received>
                                <sent>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>The number of prefixes advertised to the neighbor</Description>
                                </sent>
                                <installed>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>The number of advertised prefixes installed in the Loc-RIB</Description>
                            </installed>
                        </prefixes>
                            <prefix-limit-exceeded>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>If true - the prefix limit has exceeded</Description>
                            </prefix-limit-exceeded>
                            <total-paths>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Total number of BGP paths within the context</Description>
                            </total-paths>
                            <total-prefixes>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Total number of BGP prefixes received within the context</Description>
                            </total-prefixes>
                            <prefix-limit>
                                <state>
                                    <max-prefixes>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Maximum number of prefixes that will be accepted from the neighbour</Description>
                                    </max-prefixes>
                                    <shutdown-threshold-pct>
                                            <Leaf_Type name='uint8'>
                                            </Leaf_Type>
                                            <Description>Threshold on number of prefixes that can be received from a neighbour before generation of warning messages or log entries. Expressed as a percentage of max-prefixes</Description>
                                    </shutdown-threshold-pct>
                                    <restart-timer>
                                            <Leaf_Type name='decimal64'>
                                            </Leaf_Type>
                                            <Description>Time interval in seconds after which the BGP session is re-established after being torn down due to exceeding the max-prefix limit.</Description>
                        </restart-timer>
                    </state>
                </prefix-limit>
            </state>
                        <add-paths>
                            <receive>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>Enable ability to receive multiple path advertisements for an NLRI from the neighbor or group</Description>
                            </receive>
                            <send-max>
                                    <Leaf_Type name='uint8'>
                                    </Leaf_Type>
                                    <Description>The maximum number of paths to advertise to neighbors for a single NLRI</Description>
                            </send-max>
                            <eligible-prefix-policy>
                                    <Description>A reference to a routing policy which can be used to restrict the prefixes for which add-paths is enabled</Description>
                </eligible-prefix-policy>
            </add-paths>
        </afi-safi>
    </afi-safis>
                <graceful-restart>
                    <state>
                        <enabled>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Enable or disable the graceful-restart capability.</Description>
                        </enabled>
                        <restart-time>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                                <Description>Estimated time (in seconds) for the local BGP speaker to restart a session. This value is advertise in the graceful restart BGP capability.  This is a 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the suggested default value is &lt;= the hold-time value.</Description>
                        </restart-time>
                        <stale-routes-time>
                                <Leaf_Type name='decimal64'>
                                </Leaf_Type>
                                <Description>An upper-bound on the time thate stale routes will be retained by a router after a session is restarted. If an End-of-RIB (EOR) marker is received prior to this timer expiring stale-routes will be flushed upon its receipt - if no EOR is received, then when this timer expires stale paths will be purged. This timer is referred to as the Selection_Deferral_Timer in RFC4724</Description>
                        </stale-routes-time>
                        <helper-only>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Enable graceful-restart in helper mode only. When this leaf is set, the local system does not retain forwarding its own state during a restart, but supports procedures for the receiving speaker, as defined in RFC4724.</Description>
                        </helper-only>
                        <peer-restart-time>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                                <Description>The period of time (advertised by the peer) that the peer expects a restart of a BGP session to take</Description>
                        </peer-restart-time>
                        <peer-restarting>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>This flag indicates whether the remote neighbor is currently in the process of restarting, and hence received routes are currently stale</Description>
                        </peer-restarting>
                        <local-restarting>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>This flag indicates whether the local neighbor is currently restarting. The flag is unset after all NLRI have been advertised to the peer, and the End-of-RIB (EOR) marker has been unset</Description>
                        </local-restarting>
                        <mode>
                                <Leaf_Type name='Enumerations'> ['HELPER_ONLY', 'BILATERAL', 'REMOTE_HELPER']</Leaf_Type>
                                <Description>Ths leaf indicates the mode of operation of BGP graceful restart with the peer</Description>
                </mode>
            </state>
        </graceful-restart>
                <apply-policy>
                    <state>
                        <import-policy>
                                <Description>list of policy names in sequence to be applied on receiving a routing update in the current context, e.g., for the current peer group, neighbor, address family, etc.</Description>
                        </import-policy>
                        <export-policy>
                                <Description>list of policy names in sequence to be applied on sending a routing update in the current context, e.g., for the current peer group, neighbor, address family, etc.</Description>
        </export-policy>
    </state>
</apply-policy>
</neighbor>
</neighbors>
        <peer-groups>
            <peer-group peer-group-name='index-name'>
                <peer-group-name>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                        <Description>Name of the BGP peer-group</Description>
                </peer-group-name>
                <state>
                    <peer-as>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                            <Description>AS number of the peer.</Description>
                    </peer-as>
                    <local-as>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                            <Description>The local autonomous system number that is to be used when establishing sessions with the remote peer or peer group, if this differs from the global BGP router autonomous system number.</Description>
                    </local-as>
                    <peer-type>
                            <Leaf_Type name='Enumerations'> ['INTERNAL', 'EXTERNAL']</Leaf_Type>
                            <Description>Explicitly designate the peer or peer group as internal (iBGP) or external (eBGP).</Description>
                    </peer-type>
                    <auth-password>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                            <Description>Configures an MD5 authentication password for use with neighboring devices.</Description>
                    </auth-password>
                    <remove-private-as>
                            <Leaf_Type name='Idenity'>
                            </Leaf_Type>
                            <Description>Remove private AS numbers from updates sent to peers - when this leaf is not specified, the AS_PATH attribute should be sent to the peer unchanged</Description>
                    </remove-private-as>
                    <route-flap-damping>
                            <Leaf_Type name='boolean'>
                            </Leaf_Type>
                            <Description>Enable route flap damping.</Description>
                    </route-flap-damping>
                    <description>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                            <Description>An optional textual description (intended primarily for use with a peer or group</Description>
                    </description>
                    <peer-group-name>
                            <Leaf_Type name='string'>
                            </Leaf_Type>
                            <Description>Name of the BGP peer-group</Description>
                    </peer-group-name>
                    <total-paths>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                            <Description>Total number of BGP paths within the context</Description>
                    </total-paths>
                    <total-prefixes>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                            <Description>Total number of BGP prefixes received within the context</Description>
                </total-prefixes>
            </state>
                <timers>
                    <state>
                        <connect-retry>
                                <Leaf_Type name='decimal64'>
                                </Leaf_Type>
                                <Description>Time interval in seconds between attempts to establish a session with the peer.</Description>
                        </connect-retry>
                        <hold-time>
                                <Leaf_Type name='decimal64'>
                                </Leaf_Type>
                                <Description>Time interval in seconds that a BGP session will be considered active in the absence of keepalive or other messages from the peer.  The hold-time is typically set to 3x the keepalive-interval.</Description>
                        </hold-time>
                        <keepalive-interval>
                                <Leaf_Type name='decimal64'>
                                </Leaf_Type>
                                <Description>Time interval in seconds between transmission of keepalive messages to the neighbor.  Typically set to 1/3 the hold-time.</Description>
                        </keepalive-interval>
                        <minimum-advertisement-interval>
                                <Leaf_Type name='decimal64'>
                                </Leaf_Type>
                                <Description>Minimum time which must elapse between subsequent UPDATE messages relating to a common set of NLRI being transmitted to a peer. This timer is referred to as MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to reduce the number of UPDATE messages transmitted when a particular set of NLRI exhibit instability.</Description>
                </minimum-advertisement-interval>
            </state>
        </timers>
                <transport>
                    <state>
                        <tcp-mss>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                                <Description>Sets the max segment size for BGP TCP sessions.</Description>
                        </tcp-mss>
                        <mtu-discovery>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Turns path mtu discovery for BGP TCP sessions on (true) or off (false)</Description>
                        </mtu-discovery>
                        <passive-mode>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Wait for peers to issue requests to open a BGP session, rather than initiating sessions from the local router.</Description>
                        </passive-mode>
                        <local-address>
                                <Leaf_Type name='union'>
                                    <Leaf_Type name='union'>
                                        <Leaf_Type name='string'>
                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                        </Leaf_Type>
                                        <Leaf_Type name='string'>
                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                        </Leaf_Type>
                                    </Leaf_Type>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                </Leaf_Type>
                                <Description>Set the local IP (either IPv4 or IPv6) address to use for the session when sending BGP update messages.  This may be expressed as either an IP address or reference to the name of an interface.</Description>
                </local-address>
            </state>
        </transport>
                <error-handling>
                    <state>
                        <treat-as-withdraw>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Specify whether erroneous UPDATE messages for which the NLRI can be extracted are reated as though the NLRI is withdrawn - avoiding session reset</Description>
                </treat-as-withdraw>
            </state>
        </error-handling>
                <logging-options>
                    <state>
                        <log-neighbor-state-changes>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Configure logging of peer state changes.  Default is to enable logging of peer state changes.</Description>
                </log-neighbor-state-changes>
            </state>
        </logging-options>
                <ebgp-multihop>
                    <state>
                        <enabled>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>When enabled the referenced group or neighbors are permitted to be indirectly connected - including cases where the TTL can be decremented between the BGP peers</Description>
                        </enabled>
                        <multihop-ttl>
                                <Leaf_Type name='uint8'>
                                </Leaf_Type>
                                <Description>Time-to-live value to use when packets are sent to the referenced group or neighbors and ebgp-multihop is enabled</Description>
                </multihop-ttl>
            </state>
        </ebgp-multihop>
                <route-reflector>
                    <state>
                        <route-reflector-cluster-id>
                                <Leaf_Type name='union'>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Leaf_Type name='string'>
                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                    </Leaf_Type>
                                </Leaf_Type>
                                <Description>route-reflector cluster id to use when local router is configured as a route reflector.  Commonly set at the group level, but allows a different cluster id to be set for each neighbor.</Description>
                        </route-reflector-cluster-id>
                        <route-reflector-client>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Configure the neighbor as a route reflector client.</Description>
                </route-reflector-client>
            </state>
        </route-reflector>
                <as-path-options>
                    <state>
                        <allow-own-as>
                                <Leaf_Type name='uint8'>
                                </Leaf_Type>
                                <Description>Specify the number of occurrences of the local BGP speaker's AS that can occur within the AS_PATH before it is rejected.</Description>
                        </allow-own-as>
                        <replace-peer-as>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Replace occurrences of the peer's AS in the AS_PATH with the local autonomous system number</Description>
                </replace-peer-as>
            </state>
        </as-path-options>
                <use-multiple-paths>
                    <state>
                        <enabled>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Whether the use of multiple paths for the same NLRI is enabled for the neighbor. This value is overridden by any more specific configuration value.</Description>
                    </enabled>
                </state>
                    <ebgp>
                        <state>
                            <allow-multiple-as>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>Allow multipath to use paths from different neighbouring ASes.  The default is to only consider multiple paths from the same neighbouring AS.</Description>
                            </allow-multiple-as>
                            <maximum-paths>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Maximum number of parallel paths to consider when using BGP multipath. The default is use a single path.</Description>
                    </maximum-paths>
                </state>
            </ebgp>
                    <ibgp>
                        <state>
                            <maximum-paths>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Maximum number of parallel paths to consider when using iBGP multipath. The default is to use a single path</Description>
                </maximum-paths>
            </state>
        </ibgp>
    </use-multiple-paths>
                <afi-safis>
                    <afi-safi afi-safi-name='index-name'>
                        <afi-safi-name>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </afi-safi-name>
                        <graceful-restart>
                            <state>
                                <enabled>
                                        <Leaf_Type name='boolean'>
                                        </Leaf_Type>
                                        <Description>This leaf indicates whether graceful-restart is enabled for this AFI-SAFI</Description>
                        </enabled>
                    </state>
                </graceful-restart>
                        <state>
                            <afi-safi-name>
                                    <Leaf_Type name='Idenity'>
                                    </Leaf_Type>
                                    <Description>AFI,SAFI</Description>
                            </afi-safi-name>
                            <enabled>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the neighbour or group</Description>
                            </enabled>
                            <active>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>This value indicates whether a particular AFI-SAFI has been succesfully negotiated with the peer. An AFI-SAFI may be enabled in the current running configuration, but a session restart may be required in order to negotiate the new capability.</Description>
                            </active>
                            <prefixes>
                                <received>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>The number of prefixes received from the neighbor</Description>
                                </received>
                                <sent>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>The number of prefixes advertised to the neighbor</Description>
                                </sent>
                                <installed>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>The number of advertised prefixes installed in the Loc-RIB</Description>
                            </installed>
                        </prefixes>
                            <total-paths>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Total number of BGP paths within the context</Description>
                            </total-paths>
                            <total-prefixes>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Total number of BGP prefixes received within the context</Description>
                            </total-prefixes>
                            <prefix-limit>
                                <state>
                                    <max-prefixes>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Maximum number of prefixes that will be accepted from the neighbour</Description>
                                    </max-prefixes>
                                    <shutdown-threshold-pct>
                                            <Leaf_Type name='uint8'>
                                            </Leaf_Type>
                                            <Description>Threshold on number of prefixes that can be received from a neighbour before generation of warning messages or log entries. Expressed as a percentage of max-prefixes</Description>
                                    </shutdown-threshold-pct>
                                    <restart-timer>
                                            <Leaf_Type name='decimal64'>
                                            </Leaf_Type>
                                            <Description>Time interval in seconds after which the BGP session is re-established after being torn down due to exceeding the max-prefix limit.</Description>
                        </restart-timer>
                    </state>
                </prefix-limit>
            </state>
                        <add-paths>
                            <receive>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>Enable ability to receive multiple path advertisements for an NLRI from the neighbor or group</Description>
                            </receive>
                            <send-max>
                                    <Leaf_Type name='uint8'>
                                    </Leaf_Type>
                                    <Description>The maximum number of paths to advertise to neighbors for a single NLRI</Description>
                            </send-max>
                            <eligible-prefix-policy>
                                    <Description>A reference to a routing policy which can be used to restrict the prefixes for which add-paths is enabled</Description>
                </eligible-prefix-policy>
            </add-paths>
        </afi-safi>
    </afi-safis>
                <graceful-restart>
                    <state>
                        <enabled>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Enable or disable the graceful-restart capability.</Description>
                        </enabled>
                        <restart-time>
                                <Leaf_Type name='uint16'>
                                </Leaf_Type>
                                <Description>Estimated time (in seconds) for the local BGP speaker to restart a session. This value is advertise in the graceful restart BGP capability.  This is a 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the suggested default value is &lt;= the hold-time value.</Description>
                        </restart-time>
                        <stale-routes-time>
                                <Leaf_Type name='decimal64'>
                                </Leaf_Type>
                                <Description>An upper-bound on the time thate stale routes will be retained by a router after a session is restarted. If an End-of-RIB (EOR) marker is received prior to this timer expiring stale-routes will be flushed upon its receipt - if no EOR is received, then when this timer expires stale paths will be purged. This timer is referred to as the Selection_Deferral_Timer in RFC4724</Description>
                        </stale-routes-time>
                        <helper-only>
                                <Leaf_Type name='boolean'>
                                </Leaf_Type>
                                <Description>Enable graceful-restart in helper mode only. When this leaf is set, the local system does not retain forwarding its own state during a restart, but supports procedures for the receiving speaker, as defined in RFC4724.</Description>
                </helper-only>
            </state>
        </graceful-restart>
                <apply-policy>
                    <state>
                        <import-policy>
                                <Description>list of policy names in sequence to be applied on receiving a routing update in the current context, e.g., for the current peer group, neighbor, address family, etc.</Description>
                        </import-policy>
                        <export-policy>
                                <Description>list of policy names in sequence to be applied on sending a routing update in the current context, e.g., for the current peer group, neighbor, address family, etc.</Description>
                        </export-policy>
                    </state>
                </apply-policy>
            </peer-group>
        </peer-groups>
    </bgp>
</rpd_bgp_oc>
<rpd_bgp_rib_oc>
    <bgp-rib>
        <afi-safis>
            <afi-safi afi-safi-name='index-name'>
                <afi-safi-name>
                        <Leaf_Type name='string'>
                        </Leaf_Type>
                </afi-safi-name>
                <ipv4-unicast>
                    <loc-rib>
                        <num-routes>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                                <Description>Number of route entries in the table</Description>
                        </num-routes>
                        <routes>
                            <route>
                                <prefix>
                                        <Leaf_Type name='string'>
                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                        </Leaf_Type>
                                        <Description>Prefix for the route</Description>
                                </prefix>
                                <attributes>
                                    <origin>
                                            <Leaf_Type name='Enumerations'> ['IGP', 'EGP', 'INCOMPLETE']</Leaf_Type>
                                            <Description>BGP attribute defining the origin of the path information.</Description>
                                    </origin>
                                    <as-path>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>String representation of the BGP AS path attribute as concatenated AS path segments.  Each segment of the AS_PATH should be formatted as follows based on the segment type (#### denotes a single AS number):  AS_SEQ: #### #### #####  AS_SET: { #### #### }  AS_CONFED_SEQUENCE: ( #### #### )  AS_CONFED_SET: [ #### #### ] AS_PATH segment types are described in RFC 5065. In the Adj-RIB-In or Adj-RIB-Out, this leaf should show the received or sent AS_PATH value, respectively.  For example, if the local router is not 4-byte capable, this value should consist of 2-octet ASNs or the AS_TRANS (AS 23456) values received or sent in route updates. In the Loc-RIB, this leaf should reflect the effective AS path for the route, e.g., a 4-octet value if the local router is 4-octet capable.</Description>
                                    </as-path>
                                    <as4-path>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>This string represents the AS path encoded with 4-octet AS numbers in the optional transitive AS4_PATH attribute. This value is populated with the received or sent attribute in Adj-RIB-In or Adj-RIB-Out, respectively.  It should not be populated in Loc-RIB since the Loc-RIB is expected to store the effective AS-Path in the as-path leaf regardless of being 4-octet or 2-octet.</Description>
                                    </as4-path>
                                    <next-hop>
                                            <Leaf_Type name='union'>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                            </Leaf_Type>
                                            <Description>BGP next hop attribute defining the IP address of the router that should be used as the next hop to the destination</Description>
                                    </next-hop>
                                    <med>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>BGP multi-exit discriminator attribute used in BGP route selection process</Description>
                                    </med>
                                    <local-pref>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>BGP local preference attribute sent to internal peers to indicate</Description>
                                    </local-pref>
                                    <atomic-aggr>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>BGP attribute indicating that the prefix is an atomic aggregate, i.e., the peer selected a less specific route without selecting a more specific route that is included in it.</Description>
                                    </atomic-aggr>
                                    <aggregator>
                                        <as>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>AS number of the autnonomous system that performed the aggregation.</Description>
                                        </as>
                                        <as4>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>AS number of the autnonomous system that performed the aggregation (4-octet representation).  This value is populated if an upstream router is not 4-octet capable. Its semantics are similar to the AS4_PATH optional transitive attribute</Description>
                                        </as4>
                                        <address>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                                <Description>IP address of the router that performed the aggregation.</Description>
                                    </address>
                                </aggregator>
                                    <community>
                                            <Leaf_Type name='union'>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>([0-9]+:[0-9]+)</Pattern>
                                                </Leaf_Type>
                                            </Leaf_Type>
                                            <Description>List of standard BGP community attributes.</Description>
                                </community>
                            </attributes>
                                <ext-attributes>
                                    <originator-id>
                                            <Leaf_Type name='string'>
                                            <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                            <Description>BGP attribute that provides the id as an IPv4 address of the route reflector that created the announcement</Description>
                                    </originator-id>
                                    <cluster-list>
                                            <Leaf_Type name='string'>
                                            <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                            <Description>Represents the reflection path that the route has passed.</Description>
                                    </cluster-list>
                                    <ext-community>
                                            <Leaf_Type name='union'>
                                                <Leaf_Type name='string'>
                                                <Pattern>(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>route\-target:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>route\-target:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>route\-origin:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>route\-origin:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                </Leaf_Type>
                                            </Leaf_Type>
                                            <Description>List of BGP extended community attributes</Description>
                                    </ext-community>
                                    <aigp>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>BGP path attribute representing the accumulated IGP metric for the path</Description>
                                    </aigp>
                                    <path-id>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>When the BGP speaker supports advertisement of multiple paths for a prefix, the path identifier is used to uniquely identify a route based on the combination of the prefix and path id.  In the Adj-RIB-In, the path-id value is the value received in the update message.   In the Loc-RIB, if used, it should represent a locally generated path-id value for the corresponding route.  In Adj-RIB-Out, it should be the value sent to a neighbor when add-paths is used, i.e., the capability has been negotiated.</Description>
                                    </path-id>
                                    <unknown-attribute attr-type='index-name'>
                                        <attr-type>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>2-octet value encoding the attribute flags and the attribute type code</Description>
                                        </attr-type>
                                        <attr-len>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>One or two octet attribute length field indicating the length of the attribute data in octets.  If the Extended Length attribute flag in the attribute type field is set, the length field is 2 octets, otherwise it is 1 octet</Description>
                                        </attr-len>
                                        <attr-value>
                                                <Leaf_Type name='binary'>
                                                </Leaf_Type>
                                                <Description>Raw attribute value data, not to exceed the length indicated in the attr-len field.  The maximum length of the attribute data is 2^16-1 per the max value of the attr-len field (2 octets).</Description>
                                </attr-value>
                            </unknown-attribute>
                        </ext-attributes>
                                <last-modified-date>
                                        <Leaf_Type name='string'>
                                        <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                        </Leaf_Type>
                                        <Description>Timestamp of when this path was last changed</Description>
                                </last-modified-date>
                                <last-update-received>
                                        <Leaf_Type name='string'>
                                        <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                        </Leaf_Type>
                                        <Description>Timestamp of when the last BGP update message was received for this path / prefix</Description>
                                </last-update-received>
                                <valid-route>
                                        <Leaf_Type name='boolean'>
                                        </Leaf_Type>
                                        <Description>Indicates that the route is considered valid by the local router</Description>
                                </valid-route>
                                <invalid-reason>
                                        <Leaf_Type name='Idenity'>
                                        </Leaf_Type>
                                        <Description>If the route is rejected as invalid, this indicates the reason.</Description>
                                </invalid-reason>
                                <best-path>
                                        <Leaf_Type name='boolean'>
                                        </Leaf_Type>
                                        <Description>Current path was selected as the best path.</Description>
                    </best-path>
                </route>
            </routes>
        </loc-rib>
                    <neighbors>
                        <neighbor neighbor-address='index-name'>
                            <neighbor-address>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                            </neighbor-address>
                            <adj-rib-in-pre>
                                <num-routes>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of route entries in the table</Description>
                                </num-routes>
                                <routes>
                                    <route>
                                        <prefix>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                                </Leaf_Type>
                                                <Description>Prefix for the route</Description>
                                        </prefix>
                                        <attributes>
                                            <origin>
                                                    <Leaf_Type name='Enumerations'> ['IGP', 'EGP', 'INCOMPLETE']</Leaf_Type>
                                                    <Description>BGP attribute defining the origin of the path information.</Description>
                                            </origin>
                                            <as-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>String representation of the BGP AS path attribute as concatenated AS path segments.  Each segment of the AS_PATH should be formatted as follows based on the segment type (#### denotes a single AS number):  AS_SEQ: #### #### #####  AS_SET: { #### #### }  AS_CONFED_SEQUENCE: ( #### #### )  AS_CONFED_SET: [ #### #### ] AS_PATH segment types are described in RFC 5065. In the Adj-RIB-In or Adj-RIB-Out, this leaf should show the received or sent AS_PATH value, respectively.  For example, if the local router is not 4-byte capable, this value should consist of 2-octet ASNs or the AS_TRANS (AS 23456) values received or sent in route updates. In the Loc-RIB, this leaf should reflect the effective AS path for the route, e.g., a 4-octet value if the local router is 4-octet capable.</Description>
                                            </as-path>
                                            <as4-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>This string represents the AS path encoded with 4-octet AS numbers in the optional transitive AS4_PATH attribute. This value is populated with the received or sent attribute in Adj-RIB-In or Adj-RIB-Out, respectively.  It should not be populated in Loc-RIB since the Loc-RIB is expected to store the effective AS-Path in the as-path leaf regardless of being 4-octet or 2-octet.</Description>
                                            </as4-path>
                                            <next-hop>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>BGP next hop attribute defining the IP address of the router that should be used as the next hop to the destination</Description>
                                            </next-hop>
                                            <med>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP multi-exit discriminator attribute used in BGP route selection process</Description>
                                            </med>
                                            <local-pref>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP local preference attribute sent to internal peers to indicate</Description>
                                            </local-pref>
                                            <atomic-aggr>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute indicating that the prefix is an atomic aggregate, i.e., the peer selected a less specific route without selecting a more specific route that is included in it.</Description>
                                            </atomic-aggr>
                                            <aggregator>
                                                <as>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation.</Description>
                                                </as>
                                                <as4>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation (4-octet representation).  This value is populated if an upstream router is not 4-octet capable. Its semantics are similar to the AS4_PATH optional transitive attribute</Description>
                                                </as4>
                                                <address>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Description>IP address of the router that performed the aggregation.</Description>
                                            </address>
                                        </aggregator>
                                            <community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>([0-9]+:[0-9]+)</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of standard BGP community attributes.</Description>
                                        </community>
                                    </attributes>
                                        <ext-attributes>
                                            <originator-id>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute that provides the id as an IPv4 address of the route reflector that created the announcement</Description>
                                            </originator-id>
                                            <cluster-list>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>Represents the reflection path that the route has passed.</Description>
                                            </cluster-list>
                                            <ext-community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of BGP extended community attributes</Description>
                                            </ext-community>
                                            <aigp>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>BGP path attribute representing the accumulated IGP metric for the path</Description>
                                            </aigp>
                                            <path-id>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>When the BGP speaker supports advertisement of multiple paths for a prefix, the path identifier is used to uniquely identify a route based on the combination of the prefix and path id.  In the Adj-RIB-In, the path-id value is the value received in the update message.   In the Loc-RIB, if used, it should represent a locally generated path-id value for the corresponding route.  In Adj-RIB-Out, it should be the value sent to a neighbor when add-paths is used, i.e., the capability has been negotiated.</Description>
                                            </path-id>
                                            <unknown-attribute attr-type='index-name'>
                                                <attr-type>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>2-octet value encoding the attribute flags and the attribute type code</Description>
                                                </attr-type>
                                                <attr-len>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>One or two octet attribute length field indicating the length of the attribute data in octets.  If the Extended Length attribute flag in the attribute type field is set, the length field is 2 octets, otherwise it is 1 octet</Description>
                                                </attr-len>
                                                <attr-value>
                                                        <Leaf_Type name='binary'>
                                                        </Leaf_Type>
                                                        <Description>Raw attribute value data, not to exceed the length indicated in the attr-len field.  The maximum length of the attribute data is 2^16-1 per the max value of the attr-len field (2 octets).</Description>
                                        </attr-value>
                                    </unknown-attribute>
                                </ext-attributes>
                                        <last-modified-date>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when this path was last changed</Description>
                                        </last-modified-date>
                                        <last-update-received>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when the last BGP update message was received for this path / prefix</Description>
                                        </last-update-received>
                                        <valid-route>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Indicates that the route is considered valid by the local router</Description>
                                        </valid-route>
                                        <invalid-reason>
                                                <Leaf_Type name='Idenity'>
                                                </Leaf_Type>
                                                <Description>If the route is rejected as invalid, this indicates the reason.</Description>
                                        </invalid-reason>
                                        <best-path>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Current path was selected as the best path.</Description>
                            </best-path>
                        </route>
                    </routes>
                </adj-rib-in-pre>
                            <adj-rib-in-post>
                                <num-routes>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of route entries in the table</Description>
                                </num-routes>
                                <routes>
                                    <route>
                                        <prefix>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                                </Leaf_Type>
                                                <Description>Prefix for the route</Description>
                                        </prefix>
                                        <attributes>
                                            <origin>
                                                    <Leaf_Type name='Enumerations'> ['IGP', 'EGP', 'INCOMPLETE']</Leaf_Type>
                                                    <Description>BGP attribute defining the origin of the path information.</Description>
                                            </origin>
                                            <as-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>String representation of the BGP AS path attribute as concatenated AS path segments.  Each segment of the AS_PATH should be formatted as follows based on the segment type (#### denotes a single AS number):  AS_SEQ: #### #### #####  AS_SET: { #### #### }  AS_CONFED_SEQUENCE: ( #### #### )  AS_CONFED_SET: [ #### #### ] AS_PATH segment types are described in RFC 5065. In the Adj-RIB-In or Adj-RIB-Out, this leaf should show the received or sent AS_PATH value, respectively.  For example, if the local router is not 4-byte capable, this value should consist of 2-octet ASNs or the AS_TRANS (AS 23456) values received or sent in route updates. In the Loc-RIB, this leaf should reflect the effective AS path for the route, e.g., a 4-octet value if the local router is 4-octet capable.</Description>
                                            </as-path>
                                            <as4-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>This string represents the AS path encoded with 4-octet AS numbers in the optional transitive AS4_PATH attribute. This value is populated with the received or sent attribute in Adj-RIB-In or Adj-RIB-Out, respectively.  It should not be populated in Loc-RIB since the Loc-RIB is expected to store the effective AS-Path in the as-path leaf regardless of being 4-octet or 2-octet.</Description>
                                            </as4-path>
                                            <next-hop>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>BGP next hop attribute defining the IP address of the router that should be used as the next hop to the destination</Description>
                                            </next-hop>
                                            <med>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP multi-exit discriminator attribute used in BGP route selection process</Description>
                                            </med>
                                            <local-pref>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP local preference attribute sent to internal peers to indicate</Description>
                                            </local-pref>
                                            <atomic-aggr>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute indicating that the prefix is an atomic aggregate, i.e., the peer selected a less specific route without selecting a more specific route that is included in it.</Description>
                                            </atomic-aggr>
                                            <aggregator>
                                                <as>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation.</Description>
                                                </as>
                                                <as4>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation (4-octet representation).  This value is populated if an upstream router is not 4-octet capable. Its semantics are similar to the AS4_PATH optional transitive attribute</Description>
                                                </as4>
                                                <address>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Description>IP address of the router that performed the aggregation.</Description>
                                            </address>
                                        </aggregator>
                                            <community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>([0-9]+:[0-9]+)</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of standard BGP community attributes.</Description>
                                        </community>
                                    </attributes>
                                        <ext-attributes>
                                            <originator-id>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute that provides the id as an IPv4 address of the route reflector that created the announcement</Description>
                                            </originator-id>
                                            <cluster-list>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>Represents the reflection path that the route has passed.</Description>
                                            </cluster-list>
                                            <ext-community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of BGP extended community attributes</Description>
                                            </ext-community>
                                            <aigp>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>BGP path attribute representing the accumulated IGP metric for the path</Description>
                                            </aigp>
                                            <path-id>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>When the BGP speaker supports advertisement of multiple paths for a prefix, the path identifier is used to uniquely identify a route based on the combination of the prefix and path id.  In the Adj-RIB-In, the path-id value is the value received in the update message.   In the Loc-RIB, if used, it should represent a locally generated path-id value for the corresponding route.  In Adj-RIB-Out, it should be the value sent to a neighbor when add-paths is used, i.e., the capability has been negotiated.</Description>
                                            </path-id>
                                            <unknown-attribute attr-type='index-name'>
                                                <attr-type>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>2-octet value encoding the attribute flags and the attribute type code</Description>
                                                </attr-type>
                                                <attr-len>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>One or two octet attribute length field indicating the length of the attribute data in octets.  If the Extended Length attribute flag in the attribute type field is set, the length field is 2 octets, otherwise it is 1 octet</Description>
                                                </attr-len>
                                                <attr-value>
                                                        <Leaf_Type name='binary'>
                                                        </Leaf_Type>
                                                        <Description>Raw attribute value data, not to exceed the length indicated in the attr-len field.  The maximum length of the attribute data is 2^16-1 per the max value of the attr-len field (2 octets).</Description>
                                        </attr-value>
                                    </unknown-attribute>
                                </ext-attributes>
                                        <last-modified-date>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when this path was last changed</Description>
                                        </last-modified-date>
                                        <last-update-received>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when the last BGP update message was received for this path / prefix</Description>
                                        </last-update-received>
                                        <valid-route>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Indicates that the route is considered valid by the local router</Description>
                                        </valid-route>
                                        <invalid-reason>
                                                <Leaf_Type name='Idenity'>
                                                </Leaf_Type>
                                                <Description>If the route is rejected as invalid, this indicates the reason.</Description>
                                        </invalid-reason>
                                        <best-path>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Current path was selected as the best path.</Description>
                            </best-path>
                        </route>
                    </routes>
                </adj-rib-in-post>
                            <adj-rib-out-pre>
                                <num-routes>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of route entries in the table</Description>
                                </num-routes>
                                <routes>
                                    <route>
                                        <prefix>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                                </Leaf_Type>
                                                <Description>Prefix for the route</Description>
                                        </prefix>
                                        <attributes>
                                            <origin>
                                                    <Leaf_Type name='Enumerations'> ['IGP', 'EGP', 'INCOMPLETE']</Leaf_Type>
                                                    <Description>BGP attribute defining the origin of the path information.</Description>
                                            </origin>
                                            <as-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>String representation of the BGP AS path attribute as concatenated AS path segments.  Each segment of the AS_PATH should be formatted as follows based on the segment type (#### denotes a single AS number):  AS_SEQ: #### #### #####  AS_SET: { #### #### }  AS_CONFED_SEQUENCE: ( #### #### )  AS_CONFED_SET: [ #### #### ] AS_PATH segment types are described in RFC 5065. In the Adj-RIB-In or Adj-RIB-Out, this leaf should show the received or sent AS_PATH value, respectively.  For example, if the local router is not 4-byte capable, this value should consist of 2-octet ASNs or the AS_TRANS (AS 23456) values received or sent in route updates. In the Loc-RIB, this leaf should reflect the effective AS path for the route, e.g., a 4-octet value if the local router is 4-octet capable.</Description>
                                            </as-path>
                                            <as4-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>This string represents the AS path encoded with 4-octet AS numbers in the optional transitive AS4_PATH attribute. This value is populated with the received or sent attribute in Adj-RIB-In or Adj-RIB-Out, respectively.  It should not be populated in Loc-RIB since the Loc-RIB is expected to store the effective AS-Path in the as-path leaf regardless of being 4-octet or 2-octet.</Description>
                                            </as4-path>
                                            <next-hop>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>BGP next hop attribute defining the IP address of the router that should be used as the next hop to the destination</Description>
                                            </next-hop>
                                            <med>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP multi-exit discriminator attribute used in BGP route selection process</Description>
                                            </med>
                                            <local-pref>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP local preference attribute sent to internal peers to indicate</Description>
                                            </local-pref>
                                            <atomic-aggr>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute indicating that the prefix is an atomic aggregate, i.e., the peer selected a less specific route without selecting a more specific route that is included in it.</Description>
                                            </atomic-aggr>
                                            <aggregator>
                                                <as>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation.</Description>
                                                </as>
                                                <as4>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation (4-octet representation).  This value is populated if an upstream router is not 4-octet capable. Its semantics are similar to the AS4_PATH optional transitive attribute</Description>
                                                </as4>
                                                <address>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Description>IP address of the router that performed the aggregation.</Description>
                                            </address>
                                        </aggregator>
                                            <community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>([0-9]+:[0-9]+)</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of standard BGP community attributes.</Description>
                                        </community>
                                    </attributes>
                                        <ext-attributes>
                                            <originator-id>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute that provides the id as an IPv4 address of the route reflector that created the announcement</Description>
                                            </originator-id>
                                            <cluster-list>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>Represents the reflection path that the route has passed.</Description>
                                            </cluster-list>
                                            <ext-community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of BGP extended community attributes</Description>
                                            </ext-community>
                                            <aigp>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>BGP path attribute representing the accumulated IGP metric for the path</Description>
                                            </aigp>
                                            <path-id>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>When the BGP speaker supports advertisement of multiple paths for a prefix, the path identifier is used to uniquely identify a route based on the combination of the prefix and path id.  In the Adj-RIB-In, the path-id value is the value received in the update message.   In the Loc-RIB, if used, it should represent a locally generated path-id value for the corresponding route.  In Adj-RIB-Out, it should be the value sent to a neighbor when add-paths is used, i.e., the capability has been negotiated.</Description>
                                            </path-id>
                                            <unknown-attribute attr-type='index-name'>
                                                <attr-type>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>2-octet value encoding the attribute flags and the attribute type code</Description>
                                                </attr-type>
                                                <attr-len>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>One or two octet attribute length field indicating the length of the attribute data in octets.  If the Extended Length attribute flag in the attribute type field is set, the length field is 2 octets, otherwise it is 1 octet</Description>
                                                </attr-len>
                                                <attr-value>
                                                        <Leaf_Type name='binary'>
                                                        </Leaf_Type>
                                                        <Description>Raw attribute value data, not to exceed the length indicated in the attr-len field.  The maximum length of the attribute data is 2^16-1 per the max value of the attr-len field (2 octets).</Description>
                                        </attr-value>
                                    </unknown-attribute>
                                </ext-attributes>
                                        <last-modified-date>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when this path was last changed</Description>
                                        </last-modified-date>
                                        <last-update-received>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when the last BGP update message was received for this path / prefix</Description>
                                        </last-update-received>
                                        <valid-route>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Indicates that the route is considered valid by the local router</Description>
                                        </valid-route>
                                        <invalid-reason>
                                                <Leaf_Type name='Idenity'>
                                                </Leaf_Type>
                                                <Description>If the route is rejected as invalid, this indicates the reason.</Description>
                                        </invalid-reason>
                                        <best-path>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Current path was selected as the best path.</Description>
                            </best-path>
                        </route>
                    </routes>
                </adj-rib-out-pre>
                            <adj-rib-out-post>
                                <num-routes>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of route entries in the table</Description>
                                </num-routes>
                                <routes>
                                    <route>
                                        <prefix>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                                </Leaf_Type>
                                                <Description>Prefix for the route</Description>
                                        </prefix>
                                        <attributes>
                                            <origin>
                                                    <Leaf_Type name='Enumerations'> ['IGP', 'EGP', 'INCOMPLETE']</Leaf_Type>
                                                    <Description>BGP attribute defining the origin of the path information.</Description>
                                            </origin>
                                            <as-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>String representation of the BGP AS path attribute as concatenated AS path segments.  Each segment of the AS_PATH should be formatted as follows based on the segment type (#### denotes a single AS number):  AS_SEQ: #### #### #####  AS_SET: { #### #### }  AS_CONFED_SEQUENCE: ( #### #### )  AS_CONFED_SET: [ #### #### ] AS_PATH segment types are described in RFC 5065. In the Adj-RIB-In or Adj-RIB-Out, this leaf should show the received or sent AS_PATH value, respectively.  For example, if the local router is not 4-byte capable, this value should consist of 2-octet ASNs or the AS_TRANS (AS 23456) values received or sent in route updates. In the Loc-RIB, this leaf should reflect the effective AS path for the route, e.g., a 4-octet value if the local router is 4-octet capable.</Description>
                                            </as-path>
                                            <as4-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>This string represents the AS path encoded with 4-octet AS numbers in the optional transitive AS4_PATH attribute. This value is populated with the received or sent attribute in Adj-RIB-In or Adj-RIB-Out, respectively.  It should not be populated in Loc-RIB since the Loc-RIB is expected to store the effective AS-Path in the as-path leaf regardless of being 4-octet or 2-octet.</Description>
                                            </as4-path>
                                            <next-hop>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>BGP next hop attribute defining the IP address of the router that should be used as the next hop to the destination</Description>
                                            </next-hop>
                                            <med>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP multi-exit discriminator attribute used in BGP route selection process</Description>
                                            </med>
                                            <local-pref>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP local preference attribute sent to internal peers to indicate</Description>
                                            </local-pref>
                                            <atomic-aggr>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute indicating that the prefix is an atomic aggregate, i.e., the peer selected a less specific route without selecting a more specific route that is included in it.</Description>
                                            </atomic-aggr>
                                            <aggregator>
                                                <as>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation.</Description>
                                                </as>
                                                <as4>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation (4-octet representation).  This value is populated if an upstream router is not 4-octet capable. Its semantics are similar to the AS4_PATH optional transitive attribute</Description>
                                                </as4>
                                                <address>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Description>IP address of the router that performed the aggregation.</Description>
                                            </address>
                                        </aggregator>
                                            <community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>([0-9]+:[0-9]+)</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of standard BGP community attributes.</Description>
                                        </community>
                                    </attributes>
                                        <ext-attributes>
                                            <originator-id>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute that provides the id as an IPv4 address of the route reflector that created the announcement</Description>
                                            </originator-id>
                                            <cluster-list>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>Represents the reflection path that the route has passed.</Description>
                                            </cluster-list>
                                            <ext-community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of BGP extended community attributes</Description>
                                            </ext-community>
                                            <aigp>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>BGP path attribute representing the accumulated IGP metric for the path</Description>
                                            </aigp>
                                            <path-id>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>When the BGP speaker supports advertisement of multiple paths for a prefix, the path identifier is used to uniquely identify a route based on the combination of the prefix and path id.  In the Adj-RIB-In, the path-id value is the value received in the update message.   In the Loc-RIB, if used, it should represent a locally generated path-id value for the corresponding route.  In Adj-RIB-Out, it should be the value sent to a neighbor when add-paths is used, i.e., the capability has been negotiated.</Description>
                                            </path-id>
                                            <unknown-attribute attr-type='index-name'>
                                                <attr-type>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>2-octet value encoding the attribute flags and the attribute type code</Description>
                                                </attr-type>
                                                <attr-len>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>One or two octet attribute length field indicating the length of the attribute data in octets.  If the Extended Length attribute flag in the attribute type field is set, the length field is 2 octets, otherwise it is 1 octet</Description>
                                                </attr-len>
                                                <attr-value>
                                                        <Leaf_Type name='binary'>
                                                        </Leaf_Type>
                                                        <Description>Raw attribute value data, not to exceed the length indicated in the attr-len field.  The maximum length of the attribute data is 2^16-1 per the max value of the attr-len field (2 octets).</Description>
                                        </attr-value>
                                    </unknown-attribute>
                                </ext-attributes>
                                        <last-modified-date>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when this path was last changed</Description>
                                        </last-modified-date>
                                        <last-update-received>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when the last BGP update message was received for this path / prefix</Description>
                                        </last-update-received>
                                        <valid-route>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Indicates that the route is considered valid by the local router</Description>
                                        </valid-route>
                                        <invalid-reason>
                                                <Leaf_Type name='Idenity'>
                                                </Leaf_Type>
                                                <Description>If the route is rejected as invalid, this indicates the reason.</Description>
                                        </invalid-reason>
                                        <best-path>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Current path was selected as the best path.</Description>
                </best-path>
            </route>
        </routes>
    </adj-rib-out-post>
</neighbor>
</neighbors>
</ipv4-unicast>
                <ipv6-unicast>
                    <loc-rib>
                        <num-routes>
                                <Leaf_Type name='uint64'>
                                </Leaf_Type>
                                <Description>Number of route entries in the table</Description>
                        </num-routes>
                        <routes>
                            <route>
                                <prefix>
                                        <Leaf_Type name='string'>
                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                        </Leaf_Type>
                                        <Description>Prefix for the route</Description>
                                </prefix>
                                <attributes>
                                    <origin>
                                            <Leaf_Type name='Enumerations'> ['IGP', 'EGP', 'INCOMPLETE']</Leaf_Type>
                                            <Description>BGP attribute defining the origin of the path information.</Description>
                                    </origin>
                                    <as-path>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>String representation of the BGP AS path attribute as concatenated AS path segments.  Each segment of the AS_PATH should be formatted as follows based on the segment type (#### denotes a single AS number):  AS_SEQ: #### #### #####  AS_SET: { #### #### }  AS_CONFED_SEQUENCE: ( #### #### )  AS_CONFED_SET: [ #### #### ] AS_PATH segment types are described in RFC 5065. In the Adj-RIB-In or Adj-RIB-Out, this leaf should show the received or sent AS_PATH value, respectively.  For example, if the local router is not 4-byte capable, this value should consist of 2-octet ASNs or the AS_TRANS (AS 23456) values received or sent in route updates. In the Loc-RIB, this leaf should reflect the effective AS path for the route, e.g., a 4-octet value if the local router is 4-octet capable.</Description>
                                    </as-path>
                                    <as4-path>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>This string represents the AS path encoded with 4-octet AS numbers in the optional transitive AS4_PATH attribute. This value is populated with the received or sent attribute in Adj-RIB-In or Adj-RIB-Out, respectively.  It should not be populated in Loc-RIB since the Loc-RIB is expected to store the effective AS-Path in the as-path leaf regardless of being 4-octet or 2-octet.</Description>
                                    </as4-path>
                                    <next-hop>
                                            <Leaf_Type name='union'>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                            </Leaf_Type>
                                            <Description>BGP next hop attribute defining the IP address of the router that should be used as the next hop to the destination</Description>
                                    </next-hop>
                                    <med>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>BGP multi-exit discriminator attribute used in BGP route selection process</Description>
                                    </med>
                                    <local-pref>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>BGP local preference attribute sent to internal peers to indicate</Description>
                                    </local-pref>
                                    <atomic-aggr>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>BGP attribute indicating that the prefix is an atomic aggregate, i.e., the peer selected a less specific route without selecting a more specific route that is included in it.</Description>
                                    </atomic-aggr>
                                    <aggregator>
                                        <as>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>AS number of the autnonomous system that performed the aggregation.</Description>
                                        </as>
                                        <as4>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>AS number of the autnonomous system that performed the aggregation (4-octet representation).  This value is populated if an upstream router is not 4-octet capable. Its semantics are similar to the AS4_PATH optional transitive attribute</Description>
                                        </as4>
                                        <address>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                                <Description>IP address of the router that performed the aggregation.</Description>
                                    </address>
                                </aggregator>
                                    <community>
                                            <Leaf_Type name='union'>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>([0-9]+:[0-9]+)</Pattern>
                                                </Leaf_Type>
                                            </Leaf_Type>
                                            <Description>List of standard BGP community attributes.</Description>
                                </community>
                            </attributes>
                                <ext-attributes>
                                    <originator-id>
                                            <Leaf_Type name='string'>
                                            <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                            <Description>BGP attribute that provides the id as an IPv4 address of the route reflector that created the announcement</Description>
                                    </originator-id>
                                    <cluster-list>
                                            <Leaf_Type name='string'>
                                            <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                            <Description>Represents the reflection path that the route has passed.</Description>
                                    </cluster-list>
                                    <ext-community>
                                            <Leaf_Type name='union'>
                                                <Leaf_Type name='string'>
                                                <Pattern>(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>route\-target:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>route\-target:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>route\-origin:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>route\-origin:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                </Leaf_Type>
                                            </Leaf_Type>
                                            <Description>List of BGP extended community attributes</Description>
                                    </ext-community>
                                    <aigp>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>BGP path attribute representing the accumulated IGP metric for the path</Description>
                                    </aigp>
                                    <path-id>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>When the BGP speaker supports advertisement of multiple paths for a prefix, the path identifier is used to uniquely identify a route based on the combination of the prefix and path id.  In the Adj-RIB-In, the path-id value is the value received in the update message.   In the Loc-RIB, if used, it should represent a locally generated path-id value for the corresponding route.  In Adj-RIB-Out, it should be the value sent to a neighbor when add-paths is used, i.e., the capability has been negotiated.</Description>
                                    </path-id>
                                    <unknown-attribute attr-type='index-name'>
                                        <attr-type>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>2-octet value encoding the attribute flags and the attribute type code</Description>
                                        </attr-type>
                                        <attr-len>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>One or two octet attribute length field indicating the length of the attribute data in octets.  If the Extended Length attribute flag in the attribute type field is set, the length field is 2 octets, otherwise it is 1 octet</Description>
                                        </attr-len>
                                        <attr-value>
                                                <Leaf_Type name='binary'>
                                                </Leaf_Type>
                                                <Description>Raw attribute value data, not to exceed the length indicated in the attr-len field.  The maximum length of the attribute data is 2^16-1 per the max value of the attr-len field (2 octets).</Description>
                                </attr-value>
                            </unknown-attribute>
                        </ext-attributes>
                                <last-modified-date>
                                        <Leaf_Type name='string'>
                                        <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                        </Leaf_Type>
                                        <Description>Timestamp of when this path was last changed</Description>
                                </last-modified-date>
                                <last-update-received>
                                        <Leaf_Type name='string'>
                                        <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                        </Leaf_Type>
                                        <Description>Timestamp of when the last BGP update message was received for this path / prefix</Description>
                                </last-update-received>
                                <valid-route>
                                        <Leaf_Type name='boolean'>
                                        </Leaf_Type>
                                        <Description>Indicates that the route is considered valid by the local router</Description>
                                </valid-route>
                                <invalid-reason>
                                        <Leaf_Type name='Idenity'>
                                        </Leaf_Type>
                                        <Description>If the route is rejected as invalid, this indicates the reason.</Description>
                                </invalid-reason>
                                <best-path>
                                        <Leaf_Type name='boolean'>
                                        </Leaf_Type>
                                        <Description>Current path was selected as the best path.</Description>
                    </best-path>
                </route>
            </routes>
        </loc-rib>
                    <neighbors>
                        <neighbor neighbor-address='index-name'>
                            <neighbor-address>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                            </neighbor-address>
                            <adj-rib-in-pre>
                                <num-routes>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of route entries in the table</Description>
                                </num-routes>
                                <routes>
                                    <route>
                                        <prefix>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                                </Leaf_Type>
                                                <Description>Prefix for the route</Description>
                                        </prefix>
                                        <attributes>
                                            <origin>
                                                    <Leaf_Type name='Enumerations'> ['IGP', 'EGP', 'INCOMPLETE']</Leaf_Type>
                                                    <Description>BGP attribute defining the origin of the path information.</Description>
                                            </origin>
                                            <as-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>String representation of the BGP AS path attribute as concatenated AS path segments.  Each segment of the AS_PATH should be formatted as follows based on the segment type (#### denotes a single AS number):  AS_SEQ: #### #### #####  AS_SET: { #### #### }  AS_CONFED_SEQUENCE: ( #### #### )  AS_CONFED_SET: [ #### #### ] AS_PATH segment types are described in RFC 5065. In the Adj-RIB-In or Adj-RIB-Out, this leaf should show the received or sent AS_PATH value, respectively.  For example, if the local router is not 4-byte capable, this value should consist of 2-octet ASNs or the AS_TRANS (AS 23456) values received or sent in route updates. In the Loc-RIB, this leaf should reflect the effective AS path for the route, e.g., a 4-octet value if the local router is 4-octet capable.</Description>
                                            </as-path>
                                            <as4-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>This string represents the AS path encoded with 4-octet AS numbers in the optional transitive AS4_PATH attribute. This value is populated with the received or sent attribute in Adj-RIB-In or Adj-RIB-Out, respectively.  It should not be populated in Loc-RIB since the Loc-RIB is expected to store the effective AS-Path in the as-path leaf regardless of being 4-octet or 2-octet.</Description>
                                            </as4-path>
                                            <next-hop>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>BGP next hop attribute defining the IP address of the router that should be used as the next hop to the destination</Description>
                                            </next-hop>
                                            <med>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP multi-exit discriminator attribute used in BGP route selection process</Description>
                                            </med>
                                            <local-pref>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP local preference attribute sent to internal peers to indicate</Description>
                                            </local-pref>
                                            <atomic-aggr>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute indicating that the prefix is an atomic aggregate, i.e., the peer selected a less specific route without selecting a more specific route that is included in it.</Description>
                                            </atomic-aggr>
                                            <aggregator>
                                                <as>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation.</Description>
                                                </as>
                                                <as4>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation (4-octet representation).  This value is populated if an upstream router is not 4-octet capable. Its semantics are similar to the AS4_PATH optional transitive attribute</Description>
                                                </as4>
                                                <address>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Description>IP address of the router that performed the aggregation.</Description>
                                            </address>
                                        </aggregator>
                                            <community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>([0-9]+:[0-9]+)</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of standard BGP community attributes.</Description>
                                        </community>
                                    </attributes>
                                        <ext-attributes>
                                            <originator-id>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute that provides the id as an IPv4 address of the route reflector that created the announcement</Description>
                                            </originator-id>
                                            <cluster-list>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>Represents the reflection path that the route has passed.</Description>
                                            </cluster-list>
                                            <ext-community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of BGP extended community attributes</Description>
                                            </ext-community>
                                            <aigp>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>BGP path attribute representing the accumulated IGP metric for the path</Description>
                                            </aigp>
                                            <path-id>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>When the BGP speaker supports advertisement of multiple paths for a prefix, the path identifier is used to uniquely identify a route based on the combination of the prefix and path id.  In the Adj-RIB-In, the path-id value is the value received in the update message.   In the Loc-RIB, if used, it should represent a locally generated path-id value for the corresponding route.  In Adj-RIB-Out, it should be the value sent to a neighbor when add-paths is used, i.e., the capability has been negotiated.</Description>
                                            </path-id>
                                            <unknown-attribute attr-type='index-name'>
                                                <attr-type>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>2-octet value encoding the attribute flags and the attribute type code</Description>
                                                </attr-type>
                                                <attr-len>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>One or two octet attribute length field indicating the length of the attribute data in octets.  If the Extended Length attribute flag in the attribute type field is set, the length field is 2 octets, otherwise it is 1 octet</Description>
                                                </attr-len>
                                                <attr-value>
                                                        <Leaf_Type name='binary'>
                                                        </Leaf_Type>
                                                        <Description>Raw attribute value data, not to exceed the length indicated in the attr-len field.  The maximum length of the attribute data is 2^16-1 per the max value of the attr-len field (2 octets).</Description>
                                        </attr-value>
                                    </unknown-attribute>
                                </ext-attributes>
                                        <last-modified-date>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when this path was last changed</Description>
                                        </last-modified-date>
                                        <last-update-received>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when the last BGP update message was received for this path / prefix</Description>
                                        </last-update-received>
                                        <valid-route>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Indicates that the route is considered valid by the local router</Description>
                                        </valid-route>
                                        <invalid-reason>
                                                <Leaf_Type name='Idenity'>
                                                </Leaf_Type>
                                                <Description>If the route is rejected as invalid, this indicates the reason.</Description>
                                        </invalid-reason>
                                        <best-path>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Current path was selected as the best path.</Description>
                            </best-path>
                        </route>
                    </routes>
                </adj-rib-in-pre>
                            <adj-rib-in-post>
                                <num-routes>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of route entries in the table</Description>
                                </num-routes>
                                <routes>
                                    <route>
                                        <prefix>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                                </Leaf_Type>
                                                <Description>Prefix for the route</Description>
                                        </prefix>
                                        <attributes>
                                            <origin>
                                                    <Leaf_Type name='Enumerations'> ['IGP', 'EGP', 'INCOMPLETE']</Leaf_Type>
                                                    <Description>BGP attribute defining the origin of the path information.</Description>
                                            </origin>
                                            <as-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>String representation of the BGP AS path attribute as concatenated AS path segments.  Each segment of the AS_PATH should be formatted as follows based on the segment type (#### denotes a single AS number):  AS_SEQ: #### #### #####  AS_SET: { #### #### }  AS_CONFED_SEQUENCE: ( #### #### )  AS_CONFED_SET: [ #### #### ] AS_PATH segment types are described in RFC 5065. In the Adj-RIB-In or Adj-RIB-Out, this leaf should show the received or sent AS_PATH value, respectively.  For example, if the local router is not 4-byte capable, this value should consist of 2-octet ASNs or the AS_TRANS (AS 23456) values received or sent in route updates. In the Loc-RIB, this leaf should reflect the effective AS path for the route, e.g., a 4-octet value if the local router is 4-octet capable.</Description>
                                            </as-path>
                                            <as4-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>This string represents the AS path encoded with 4-octet AS numbers in the optional transitive AS4_PATH attribute. This value is populated with the received or sent attribute in Adj-RIB-In or Adj-RIB-Out, respectively.  It should not be populated in Loc-RIB since the Loc-RIB is expected to store the effective AS-Path in the as-path leaf regardless of being 4-octet or 2-octet.</Description>
                                            </as4-path>
                                            <next-hop>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>BGP next hop attribute defining the IP address of the router that should be used as the next hop to the destination</Description>
                                            </next-hop>
                                            <med>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP multi-exit discriminator attribute used in BGP route selection process</Description>
                                            </med>
                                            <local-pref>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP local preference attribute sent to internal peers to indicate</Description>
                                            </local-pref>
                                            <atomic-aggr>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute indicating that the prefix is an atomic aggregate, i.e., the peer selected a less specific route without selecting a more specific route that is included in it.</Description>
                                            </atomic-aggr>
                                            <aggregator>
                                                <as>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation.</Description>
                                                </as>
                                                <as4>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation (4-octet representation).  This value is populated if an upstream router is not 4-octet capable. Its semantics are similar to the AS4_PATH optional transitive attribute</Description>
                                                </as4>
                                                <address>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Description>IP address of the router that performed the aggregation.</Description>
                                            </address>
                                        </aggregator>
                                            <community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>([0-9]+:[0-9]+)</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of standard BGP community attributes.</Description>
                                        </community>
                                    </attributes>
                                        <ext-attributes>
                                            <originator-id>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute that provides the id as an IPv4 address of the route reflector that created the announcement</Description>
                                            </originator-id>
                                            <cluster-list>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>Represents the reflection path that the route has passed.</Description>
                                            </cluster-list>
                                            <ext-community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of BGP extended community attributes</Description>
                                            </ext-community>
                                            <aigp>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>BGP path attribute representing the accumulated IGP metric for the path</Description>
                                            </aigp>
                                            <path-id>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>When the BGP speaker supports advertisement of multiple paths for a prefix, the path identifier is used to uniquely identify a route based on the combination of the prefix and path id.  In the Adj-RIB-In, the path-id value is the value received in the update message.   In the Loc-RIB, if used, it should represent a locally generated path-id value for the corresponding route.  In Adj-RIB-Out, it should be the value sent to a neighbor when add-paths is used, i.e., the capability has been negotiated.</Description>
                                            </path-id>
                                            <unknown-attribute attr-type='index-name'>
                                                <attr-type>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>2-octet value encoding the attribute flags and the attribute type code</Description>
                                                </attr-type>
                                                <attr-len>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>One or two octet attribute length field indicating the length of the attribute data in octets.  If the Extended Length attribute flag in the attribute type field is set, the length field is 2 octets, otherwise it is 1 octet</Description>
                                                </attr-len>
                                                <attr-value>
                                                        <Leaf_Type name='binary'>
                                                        </Leaf_Type>
                                                        <Description>Raw attribute value data, not to exceed the length indicated in the attr-len field.  The maximum length of the attribute data is 2^16-1 per the max value of the attr-len field (2 octets).</Description>
                                        </attr-value>
                                    </unknown-attribute>
                                </ext-attributes>
                                        <last-modified-date>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when this path was last changed</Description>
                                        </last-modified-date>
                                        <last-update-received>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when the last BGP update message was received for this path / prefix</Description>
                                        </last-update-received>
                                        <valid-route>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Indicates that the route is considered valid by the local router</Description>
                                        </valid-route>
                                        <invalid-reason>
                                                <Leaf_Type name='Idenity'>
                                                </Leaf_Type>
                                                <Description>If the route is rejected as invalid, this indicates the reason.</Description>
                                        </invalid-reason>
                                        <best-path>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Current path was selected as the best path.</Description>
                            </best-path>
                        </route>
                    </routes>
                </adj-rib-in-post>
                            <adj-rib-out-pre>
                                <num-routes>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of route entries in the table</Description>
                                </num-routes>
                                <routes>
                                    <route>
                                        <prefix>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                                </Leaf_Type>
                                                <Description>Prefix for the route</Description>
                                        </prefix>
                                        <attributes>
                                            <origin>
                                                    <Leaf_Type name='Enumerations'> ['IGP', 'EGP', 'INCOMPLETE']</Leaf_Type>
                                                    <Description>BGP attribute defining the origin of the path information.</Description>
                                            </origin>
                                            <as-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>String representation of the BGP AS path attribute as concatenated AS path segments.  Each segment of the AS_PATH should be formatted as follows based on the segment type (#### denotes a single AS number):  AS_SEQ: #### #### #####  AS_SET: { #### #### }  AS_CONFED_SEQUENCE: ( #### #### )  AS_CONFED_SET: [ #### #### ] AS_PATH segment types are described in RFC 5065. In the Adj-RIB-In or Adj-RIB-Out, this leaf should show the received or sent AS_PATH value, respectively.  For example, if the local router is not 4-byte capable, this value should consist of 2-octet ASNs or the AS_TRANS (AS 23456) values received or sent in route updates. In the Loc-RIB, this leaf should reflect the effective AS path for the route, e.g., a 4-octet value if the local router is 4-octet capable.</Description>
                                            </as-path>
                                            <as4-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>This string represents the AS path encoded with 4-octet AS numbers in the optional transitive AS4_PATH attribute. This value is populated with the received or sent attribute in Adj-RIB-In or Adj-RIB-Out, respectively.  It should not be populated in Loc-RIB since the Loc-RIB is expected to store the effective AS-Path in the as-path leaf regardless of being 4-octet or 2-octet.</Description>
                                            </as4-path>
                                            <next-hop>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>BGP next hop attribute defining the IP address of the router that should be used as the next hop to the destination</Description>
                                            </next-hop>
                                            <med>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP multi-exit discriminator attribute used in BGP route selection process</Description>
                                            </med>
                                            <local-pref>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP local preference attribute sent to internal peers to indicate</Description>
                                            </local-pref>
                                            <atomic-aggr>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute indicating that the prefix is an atomic aggregate, i.e., the peer selected a less specific route without selecting a more specific route that is included in it.</Description>
                                            </atomic-aggr>
                                            <aggregator>
                                                <as>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation.</Description>
                                                </as>
                                                <as4>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation (4-octet representation).  This value is populated if an upstream router is not 4-octet capable. Its semantics are similar to the AS4_PATH optional transitive attribute</Description>
                                                </as4>
                                                <address>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Description>IP address of the router that performed the aggregation.</Description>
                                            </address>
                                        </aggregator>
                                            <community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>([0-9]+:[0-9]+)</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of standard BGP community attributes.</Description>
                                        </community>
                                    </attributes>
                                        <ext-attributes>
                                            <originator-id>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute that provides the id as an IPv4 address of the route reflector that created the announcement</Description>
                                            </originator-id>
                                            <cluster-list>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>Represents the reflection path that the route has passed.</Description>
                                            </cluster-list>
                                            <ext-community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of BGP extended community attributes</Description>
                                            </ext-community>
                                            <aigp>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>BGP path attribute representing the accumulated IGP metric for the path</Description>
                                            </aigp>
                                            <path-id>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>When the BGP speaker supports advertisement of multiple paths for a prefix, the path identifier is used to uniquely identify a route based on the combination of the prefix and path id.  In the Adj-RIB-In, the path-id value is the value received in the update message.   In the Loc-RIB, if used, it should represent a locally generated path-id value for the corresponding route.  In Adj-RIB-Out, it should be the value sent to a neighbor when add-paths is used, i.e., the capability has been negotiated.</Description>
                                            </path-id>
                                            <unknown-attribute attr-type='index-name'>
                                                <attr-type>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>2-octet value encoding the attribute flags and the attribute type code</Description>
                                                </attr-type>
                                                <attr-len>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>One or two octet attribute length field indicating the length of the attribute data in octets.  If the Extended Length attribute flag in the attribute type field is set, the length field is 2 octets, otherwise it is 1 octet</Description>
                                                </attr-len>
                                                <attr-value>
                                                        <Leaf_Type name='binary'>
                                                        </Leaf_Type>
                                                        <Description>Raw attribute value data, not to exceed the length indicated in the attr-len field.  The maximum length of the attribute data is 2^16-1 per the max value of the attr-len field (2 octets).</Description>
                                        </attr-value>
                                    </unknown-attribute>
                                </ext-attributes>
                                        <last-modified-date>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when this path was last changed</Description>
                                        </last-modified-date>
                                        <last-update-received>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when the last BGP update message was received for this path / prefix</Description>
                                        </last-update-received>
                                        <valid-route>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Indicates that the route is considered valid by the local router</Description>
                                        </valid-route>
                                        <invalid-reason>
                                                <Leaf_Type name='Idenity'>
                                                </Leaf_Type>
                                                <Description>If the route is rejected as invalid, this indicates the reason.</Description>
                                        </invalid-reason>
                                        <best-path>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Current path was selected as the best path.</Description>
                            </best-path>
                        </route>
                    </routes>
                </adj-rib-out-pre>
                            <adj-rib-out-post>
                                <num-routes>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                        <Description>Number of route entries in the table</Description>
                                </num-routes>
                                <routes>
                                    <route>
                                        <prefix>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                                </Leaf_Type>
                                                <Description>Prefix for the route</Description>
                                        </prefix>
                                        <attributes>
                                            <origin>
                                                    <Leaf_Type name='Enumerations'> ['IGP', 'EGP', 'INCOMPLETE']</Leaf_Type>
                                                    <Description>BGP attribute defining the origin of the path information.</Description>
                                            </origin>
                                            <as-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>String representation of the BGP AS path attribute as concatenated AS path segments.  Each segment of the AS_PATH should be formatted as follows based on the segment type (#### denotes a single AS number):  AS_SEQ: #### #### #####  AS_SET: { #### #### }  AS_CONFED_SEQUENCE: ( #### #### )  AS_CONFED_SET: [ #### #### ] AS_PATH segment types are described in RFC 5065. In the Adj-RIB-In or Adj-RIB-Out, this leaf should show the received or sent AS_PATH value, respectively.  For example, if the local router is not 4-byte capable, this value should consist of 2-octet ASNs or the AS_TRANS (AS 23456) values received or sent in route updates. In the Loc-RIB, this leaf should reflect the effective AS path for the route, e.g., a 4-octet value if the local router is 4-octet capable.</Description>
                                            </as-path>
                                            <as4-path>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                    <Description>This string represents the AS path encoded with 4-octet AS numbers in the optional transitive AS4_PATH attribute. This value is populated with the received or sent attribute in Adj-RIB-In or Adj-RIB-Out, respectively.  It should not be populated in Loc-RIB since the Loc-RIB is expected to store the effective AS-Path in the as-path leaf regardless of being 4-octet or 2-octet.</Description>
                                            </as4-path>
                                            <next-hop>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>BGP next hop attribute defining the IP address of the router that should be used as the next hop to the destination</Description>
                                            </next-hop>
                                            <med>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP multi-exit discriminator attribute used in BGP route selection process</Description>
                                            </med>
                                            <local-pref>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>BGP local preference attribute sent to internal peers to indicate</Description>
                                            </local-pref>
                                            <atomic-aggr>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute indicating that the prefix is an atomic aggregate, i.e., the peer selected a less specific route without selecting a more specific route that is included in it.</Description>
                                            </atomic-aggr>
                                            <aggregator>
                                                <as>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation.</Description>
                                                </as>
                                                <as4>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>AS number of the autnonomous system that performed the aggregation (4-octet representation).  This value is populated if an upstream router is not 4-octet capable. Its semantics are similar to the AS4_PATH optional transitive attribute</Description>
                                                </as4>
                                                <address>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Description>IP address of the router that performed the aggregation.</Description>
                                            </address>
                                        </aggregator>
                                            <community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>([0-9]+:[0-9]+)</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of standard BGP community attributes.</Description>
                                        </community>
                                    </attributes>
                                        <ext-attributes>
                                            <originator-id>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>BGP attribute that provides the id as an IPv4 address of the route reflector that created the announcement</Description>
                                            </originator-id>
                                            <cluster-list>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Description>Represents the reflection path that the route has passed.</Description>
                                            </cluster-list>
                                            <ext-community>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-target:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9]):(4[0-2][0-9][0-4][0-9][0-6][0-7][0-2][0-9][0-6]|[1-3][0-9]{9}|[1-9]([0-9]{1,7})?[0-9]|[1-9])</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>route\-origin:(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]):(6[0-5][0-5][0-3][0-5]|[1-5][0-9]{4}|[1-9][0-9]{1,4}|[0-9])</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>List of BGP extended community attributes</Description>
                                            </ext-community>
                                            <aigp>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>BGP path attribute representing the accumulated IGP metric for the path</Description>
                                            </aigp>
                                            <path-id>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>When the BGP speaker supports advertisement of multiple paths for a prefix, the path identifier is used to uniquely identify a route based on the combination of the prefix and path id.  In the Adj-RIB-In, the path-id value is the value received in the update message.   In the Loc-RIB, if used, it should represent a locally generated path-id value for the corresponding route.  In Adj-RIB-Out, it should be the value sent to a neighbor when add-paths is used, i.e., the capability has been negotiated.</Description>
                                            </path-id>
                                            <unknown-attribute attr-type='index-name'>
                                                <attr-type>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>2-octet value encoding the attribute flags and the attribute type code</Description>
                                                </attr-type>
                                                <attr-len>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>One or two octet attribute length field indicating the length of the attribute data in octets.  If the Extended Length attribute flag in the attribute type field is set, the length field is 2 octets, otherwise it is 1 octet</Description>
                                                </attr-len>
                                                <attr-value>
                                                        <Leaf_Type name='binary'>
                                                        </Leaf_Type>
                                                        <Description>Raw attribute value data, not to exceed the length indicated in the attr-len field.  The maximum length of the attribute data is 2^16-1 per the max value of the attr-len field (2 octets).</Description>
                                        </attr-value>
                                    </unknown-attribute>
                                </ext-attributes>
                                        <last-modified-date>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when this path was last changed</Description>
                                        </last-modified-date>
                                        <last-update-received>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Timestamp of when the last BGP update message was received for this path / prefix</Description>
                                        </last-update-received>
                                        <valid-route>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Indicates that the route is considered valid by the local router</Description>
                                        </valid-route>
                                        <invalid-reason>
                                                <Leaf_Type name='Idenity'>
                                                </Leaf_Type>
                                                <Description>If the route is rejected as invalid, this indicates the reason.</Description>
                                        </invalid-reason>
                                        <best-path>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Current path was selected as the best path.</Description>
                                        </best-path>
                                    </route>
                                </routes>
                            </adj-rib-out-post>
                        </neighbor>
                    </neighbors>
                </ipv6-unicast>
            </afi-safi>
        </afi-safis>
    </bgp-rib>
</rpd_bgp_rib_oc>
<rpd_ipv6_ra_oc>
    <ipv6-ra>
        <ipv6-ra-interface>
            <name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
                    <Description>Name of the interface</Description>
            </name>
            <initial-adv-sent>
                    <Leaf_Type name='uint16'>
                    </Leaf_Type>
                    <Description>Number of initial advertisements sent</Description>
            </initial-adv-sent>
            <adv-sent>
                    <Leaf_Type name='uint64'>
                    </Leaf_Type>
                    <Description>Number of advertisements sent</Description>
            </adv-sent>
            <adv-received>
                    <Leaf_Type name='uint64'>
                    </Leaf_Type>
                    <Description>Number of advertisements received</Description>
            </adv-received>
            <solicits-received>
                    <Leaf_Type name='uint64'>
                    </Leaf_Type>
                    <Description>Number of solicits received</Description>
            </solicits-received>
            <last-adv-time>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
                    <Description>Time (in seconds) since last advertisement sent</Description>
            </last-adv-time>
            <last-solicit-time>
                    <Leaf_Type name='uint32'>
                    </Leaf_Type>
                    <Description>Time (in seconds) since last solicit received</Description>
            </last-solicit-time>
        </ipv6-ra-interface>
    </ipv6-ra>
</rpd_ipv6_ra_oc>
<rpd_isis_oc>
    <network-instances>
        <network-instance instance-name='index-name'>
            <instance-name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
            </instance-name>
            <protocols>
                <protocol>
                    <isis>
                        <levels>
                            <level level-number='index-name'>
                                <level-number>
                                        <Description>Reference to ISIS level-number.</Description>
                                </level-number>
                                <state>
                                    <level-number>
                                            <Leaf_Type name='uint8'>
                                            </Leaf_Type>
                                            <Description>ISIS level number (level-1, level-2).</Description>
                                </level-number>
                            </state>
                                <system-level-counters>
                                    <state>
                                        <corrupted-lsps>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of corrupted in-memory LSPs detected. LSPs received from the wire with a bad checksum are silently dropped and not counted. LSPs received from the wire with parse errors are counted by lsp-errors. MIB Entry: SysCorrLSPs.</Description>
                                        </corrupted-lsps>
                                        <database-overloads>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times the database has become overloaded. MIB entry: SysLSPL(Level)DbaseOloads.</Description>
                                        </database-overloads>
                                        <manual-address-drop-from-areas>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times a manual address has been dropped from area. MIB Entry: SysManAddrDropFromAreas.</Description>
                                        </manual-address-drop-from-areas>
                                        <exceed-max-seq-nums>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>The number of times the system has attempted to exceed the maximum sequence number. MIB Entry: SysAttmptToExMaxSeqNums.</Description>
                                        </exceed-max-seq-nums>
                                        <seq-num-skips>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times a sequence number skip has occurred. MIB Entry: SysSeqNumSkips.</Description>
                                        </seq-num-skips>
                                        <own-lsp-purges>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times a zero-aged copy of the system's own LSP is received from some other node. MIB Entry: isisSysOwnLSPPurges.</Description>
                                        </own-lsp-purges>
                                        <id-len-mismatch>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times a PDU is received with a different value for ID field length from that of the receiving system. MIB Entry: isisSysIDFieldLenMismatches.</Description>
                                        </id-len-mismatch>
                                        <part-changes>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>The number of partition changes detected. MIB Entry: SysPartChanges.</Description>
                                        </part-changes>
                                        <max-area-address-mismatches>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times a PDU is received with a different value for MaximumAreaAddresses from that of the receiving system. MIB Entry: SysMaxAreaAddrMismatches.</Description>
                                        </max-area-address-mismatches>
                                        <auth-fails>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>The number of authentication key failures. MIB Entry: SysAuthFails.</Description>
                                        </auth-fails>
                                        <spf-runs>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>The number of times SPF was ran at this level.</Description>
                                        </spf-runs>
                                        <auth-type-fails>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>The number of authentication type mismatches.</Description>
                                        </auth-type-fails>
                                        <lsp-errors>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>The number of received LSPs with errors.</Description>
                                </lsp-errors>
                            </state>
                        </system-level-counters>
                                <link-state-database>
                                    <lsp lsp-id='index-name'>
                                        <lsp-id>
                                                <Description>A reference to the Link State PDU ID.</Description>
                                        </lsp-id>
                                        <state>
                                            <lsp-id>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9][0-9]-[0-9][0-9]</Pattern>
                                                    </Leaf_Type>
                                                    <Description>LSP ID of the LSP.</Description>
                                            </lsp-id>
                                            <maximum-area-addresses>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>Number of area addresses permitted for this ISs area. 0 indicates the IS only supports three area addresses (by default). Any number inclusive of 1 and 254 indicates the number of areas allowed.</Description>
                                            </maximum-area-addresses>
                                            <version>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>PDU version. This is set to 1.</Description>
                                            </version>
                                            <version2>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>PDU version2. This is set to 1</Description>
                                            </version2>
                                            <id-length>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>Length of the ID field of NSAP addresses and NETs used in this routing domain.</Description>
                                            </id-length>
                                            <pdu-type>
                                                    <Leaf_Type name='Enumerations'> ['LEVEL_1', 'LEVEL_2']</Leaf_Type>
                                                    <Description>Link State PDU type.</Description>
                                            </pdu-type>
                                            <remaining-lifetime>
                                                    <Leaf_Type name='uint16'>
                                                    </Leaf_Type>
                                                    <Description>Remaining lifetime in seconds before the LSP expiration.</Description>
                                            </remaining-lifetime>
                                            <sequence-number>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>Sequence number of the LSP.</Description>
                                            </sequence-number>
                                            <checksum>
                                                    <Leaf_Type name='uint16'>
                                                    </Leaf_Type>
                                                    <Description>Checksum of the LSP.</Description>
                                            </checksum>
                                            <pdu-length>
                                                    <Leaf_Type name='uint16'>
                                                    </Leaf_Type>
                                                    <Description>Total length of the LSP.</Description>
                                            </pdu-length>
                                            <lsp-install-time>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>LSP install time</Description>
                                        </lsp-install-time>
                                    </state>
                                        <tlvs>
                                            <tlv type='index-name'>
                                                <type>
                                                        <Description>A reference for the TLV type being described within the LSDB.</Description>
                                                </type>
                                                <state>
                                                    <type>
                                                            <Leaf_Type name='Idenity'>
                                                            </Leaf_Type>
                                                            <Description>The type of TLV being described. The type of TLV is expressed as a canonical name.</Description>
                                                </type>
                                            </state>
                                                <area-address>
                                                    <state>
                                                        <type>
                                                                <Leaf_Type name='Idenity'>
                                                                </Leaf_Type>
                                                                <Description>The type of TLV being described. The type of TLV is expressed as a canonical name.</Description>
                                                        </type>
                                                        <area-address>
                                                                <Leaf_Type name='string'>
                                                                <Pattern>[0-9A-Fa-f]{2}\.([0-9A-Fa-f]{4}\.){0,3}</Pattern>
                                                                </Leaf_Type>
                                                                <Description>Area adress(es) of the IS. Set of manual area addresses of this IS.</Description>
                                                </area-address>
                                            </state>
                                        </area-address>
                                                <nlpid>
                                                    <state>
                                                        <type>
                                                                <Leaf_Type name='Idenity'>
                                                                </Leaf_Type>
                                                                <Description>The type of TLV being described. The type of TLV is expressed as a canonical name.</Description>
                                                        </type>
                                                        <nlpids>
                                                                <Leaf_Type name='Enumerations'> ['IPV4', 'IPV6']</Leaf_Type>
                                                </nlpids>
                                            </state>
                                        </nlpid>
                                                <hostname>
                                                    <state>
                                                        <type>
                                                                <Leaf_Type name='Idenity'>
                                                                </Leaf_Type>
                                                                <Description>The type of TLV being described. The type of TLV is expressed as a canonical name.</Description>
                                                        </type>
                                                        <hostname>
                                                                <Leaf_Type name='string'>
                                                                </Leaf_Type>
                                                                <Description>Name of the node.</Description>
                                                </hostname>
                                            </state>
                                        </hostname>
                                                <ipv4-interface-addresses>
                                                    <state>
                                                        <type>
                                                                <Leaf_Type name='Idenity'>
                                                                </Leaf_Type>
                                                                <Description>The type of TLV being described. The type of TLV is expressed as a canonical name.</Description>
                                                        </type>
                                                        <ipv4-interface-addresses>
                                                                <Leaf_Type name='string'>
                                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                                                </Leaf_Type>
                                                                <Description>IPv4 address(es) of the interface corresponding to the SNPA over which this PDU is to be transmitted.</Description>
                                                </ipv4-interface-addresses>
                                            </state>
                                        </ipv4-interface-addresses>
                                                <ipv4-te-router-id>
                                                    <state>
                                                        <type>
                                                                <Leaf_Type name='Idenity'>
                                                                </Leaf_Type>
                                                                <Description>The type of TLV being described. The type of TLV is expressed as a canonical name.</Description>
                                                        </type>
                                                        <ipv4-te-router-id>
                                                                <Leaf_Type name='string'>
                                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                                </Leaf_Type>
                                                                <Description>IPv4 Traffic Engineering router ID of the node. For traffic engineering, it guarantees that we have a single stable address that can always be referenced in a path that will be reachable from multiple hops away, regardless of the state of the node's interfaces.</Description>
                                                </ipv4-te-router-id>
                                            </state>
                                        </ipv4-te-router-id>
                                                <router-capabilities>
                                                    <router-capability>
                                                        <state>
                                                            <type>
                                                                    <Leaf_Type name='Idenity'>
                                                                    </Leaf_Type>
                                                                    <Description>The type of TLV being described. The type of TLV is expressed as a canonical name.</Description>
                                                            </type>
                                                            <router-id>
                                                                    <Leaf_Type name='string'>
                                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                                    </Leaf_Type>
                                                                    <Description>IPv4 router-id.</Description>
                                                            </router-id>
                                                            <flags>
                                                                    <Leaf_Type name='Enumerations'> ['FLOOD', 'DOWN']</Leaf_Type>
                                                                    <Description>Router capability flags.</Description>
                                                        </flags>
                                                    </state>
                                                        <subtlvs>
                                                            <subtlvs subtlv-type='index-name'>
                                                                <subtlv-type>
                                                                        <Description>A reference for the TLV type being described within the LSDB</Description>
                                                                </subtlv-type>
                                                                <state>
                                                                    <subtlv-type>
                                                                            <Leaf_Type name='Idenity'>
                                                                            </Leaf_Type>
                                                                            <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                </subtlv-type>
                                                            </state>
                                                                <segment-routing-algorithm>
                                                                    <state>
                                                                        <segment-routing-algorithm>
                                                                                <Leaf_Type name='Enumerations'> ['SPF', 'STRICT_SPF']</Leaf_Type>
                                                                                <Description>Segment routing algorithm.</Description>
                                                                </segment-routing-algorithm>
                                                            </state>
                                                        </segment-routing-algorithm>
                                                                <segment-routing-capability>
                                                                    <state>
                                                                        <subtlv-type>
                                                                                <Leaf_Type name='Idenity'>
                                                                                </Leaf_Type>
                                                                                <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                        </subtlv-type>
                                                                        <flags>
                                                                                <Leaf_Type name='Enumerations'> ['IPV4_MPLS', 'IPV6_MPLS', 'IPV6_SR']</Leaf_Type>
                                                                                <Description>Segment Routing Capability Flags.</Description>
                                                                        </flags>
                                                                        <range>
                                                                                <Leaf_Type name='uint32'>
                                                                                </Leaf_Type>
                                                                                <Description>Number of SRGB elements. The range value MUST be higher than 0. </Description>
                                                                        </range>
                                                                        <label>
                                                                                <Leaf_Type name='uint32'>
                                                                                </Leaf_Type>
                                                                                <Description>The first value of the SRGB.</Description>
                                                        </label>
                                                    </state>
                                                </segment-routing-capability>
                                            </subtlvs>
                                        </subtlvs>
                                                        <undefined-subtlvs>
                                                            <undefined-subtlv type='index-name'>
                                                                <type>
                                                                        <Description>A reference to a subTLV</Description>
                                                                </type>
                                                                <state>
                                                                    <type>
                                                                            <Leaf_Type name='uint8'>
                                                                            </Leaf_Type>
                                                                            <Description>TLV Type.</Description>
                                                                    </type>
                                                                    <length>
                                                                            <Leaf_Type name='uint8'>
                                                                            </Leaf_Type>
                                                                            <Description>TLV length.</Description>
                                                                    </length>
                                                                    <value>
                                                                            <Leaf_Type name='binary'>
                                                                            </Leaf_Type>
                                                                            <Description>TLV value.</Description>
                                                </value>
                                            </state>
                                        </undefined-subtlv>
                                    </undefined-subtlvs>
                                </router-capability>
                            </router-capabilities>
                                                <extended-is-reachability>
                                                    <state>
                                                        <type>
                                                                <Leaf_Type name='Idenity'>
                                                                </Leaf_Type>
                                                                <Description>The type of TLV being described. The type of TLV is expressed as a canonical name.</Description>
                                                    </type>
                                                </state>
                                                    <neighbors>
                                                        <neighbors>
                                                            <state>
                                                                <system-id>
                                                                        <Leaf_Type name='string'>
                                                                        <Pattern>[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}</Pattern>
                                                                        </Leaf_Type>
                                                                        <Description>System-id of the neighbor.</Description>
                                                                </system-id>
                                                                <metric>
                                                                        <Leaf_Type name='uint32'>
                                                                        </Leaf_Type>
                                                                        <Description>Metric value.</Description>
                                                            </metric>
                                                        </state>
                                                            <subTLVs>
                                                                <subTLVs subtlv-type='index-name'>
                                                                    <subtlv-type>
                                                                            <Description>A reference for the TLV type being described within the LSDB</Description>
                                                                    </subtlv-type>
                                                                    <state>
                                                                        <subtlv-type>
                                                                                <Leaf_Type name='Idenity'>
                                                                                </Leaf_Type>
                                                                                <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                    </subtlv-type>
                                                                </state>
                                                                    <ipv4-interface-address>
                                                                        <state>
                                                                            <subtlv-type>
                                                                                    <Leaf_Type name='Idenity'>
                                                                                    </Leaf_Type>
                                                                                    <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                            </subtlv-type>
                                                                            <ipv4-interface-address>
                                                                                    <Leaf_Type name='string'>
                                                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                                                    </Leaf_Type>
                                                                                    <Description>A 4-octet IPv4 address for the interface described by the (main) TLV. This sub-TLV can occur multiple times.</Description>
                                                                    </ipv4-interface-address>
                                                                </state>
                                                            </ipv4-interface-address>
                                                                    <ipv4-neighbor-address>
                                                                        <state>
                                                                            <subtlv-type>
                                                                                    <Leaf_Type name='Idenity'>
                                                                                    </Leaf_Type>
                                                                                    <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                            </subtlv-type>
                                                                            <ipv4-neighbor-address>
                                                                                    <Leaf_Type name='string'>
                                                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                                                    </Leaf_Type>
                                                                                    <Description>A single IPv4 address for a neighboring router on this link. This sub-TLV can occur multiple times.</Description>
                                                                    </ipv4-neighbor-address>
                                                                </state>
                                                            </ipv4-neighbor-address>
                                                                    <max-link-bandwidth>
                                                                        <state>
                                                                            <subtlv-type>
                                                                                    <Leaf_Type name='Idenity'>
                                                                                    </Leaf_Type>
                                                                                    <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                            </subtlv-type>
                                                                            <max-link-bandwidth>
                                                                                    <Leaf_Type name='binary'>
                                                                                    </Leaf_Type>
                                                                                    <Description>The maximum bandwidth that can be used on this link in this direction (from the system originating the LSP to its neighbors).  It is encoded in 32 bits in IEEE floating point format.  The units are bytes (not bits!) per second.</Description>
                                                                    </max-link-bandwidth>
                                                                </state>
                                                            </max-link-bandwidth>
                                                                    <max-reservable-link-bandwidth>
                                                                        <state>
                                                                            <subtlv-type>
                                                                                    <Leaf_Type name='Idenity'>
                                                                                    </Leaf_Type>
                                                                                    <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                            </subtlv-type>
                                                                            <max-reservable-link-bandwidth>
                                                                                    <Leaf_Type name='binary'>
                                                                                    </Leaf_Type>
                                                                                    <Description>The maximum amount of bandwidth that can be reserved in this direction on this link.  Note that for oversubscription purposes,  this can be greater than the bandwidth of the link. It is encoded  in 32 bits in IEEE floating point format.  The units are bytes  (not bits!) per second.</Description>
                                                                    </max-reservable-link-bandwidth>
                                                                </state>
                                                            </max-reservable-link-bandwidth>
                                                                    <unreserved-bandwidth>
                                                                        <setup-priority>
                                                                            <state>
                                                                                <setup-priority>
                                                                                        <Leaf_Type name='uint8'>
                                                                                        </Leaf_Type>
                                                                                        <Description>Setup priority level of 0 through 7 to be used by Unreserved Bandwidth sub-TLV 11.</Description>
                                                                                </setup-priority>
                                                                                <subtlv-type>
                                                                                        <Leaf_Type name='Idenity'>
                                                                                        </Leaf_Type>
                                                                                        <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                                </subtlv-type>
                                                                                <unreserved-bandwidth>
                                                                                        <Leaf_Type name='binary'>
                                                                                        </Leaf_Type>
                                                                                        <Description>The amount of bandwidth reservable in this direction on this link. Note that for oversubscription purposes, this can be greater than the bandwidth of the link. It contains eight 32-bit IEEE floating point numbers(one for each priority). The units are bytes (not bits!) per second. The values correspond to the bandwidth that can be reserved with a setup priority of 0 through 7, arranged in increasing order with priority 0 occurring at the start of the sub-TLV, and priority 7 at the end of the sub-TLV.</Description>
                                                                    </unreserved-bandwidth>
                                                                </state>
                                                            </setup-priority>
                                                        </unreserved-bandwidth>
                                                                    <te-default-metric>
                                                                        <state>
                                                                            <subtlv-type>
                                                                                    <Leaf_Type name='Idenity'>
                                                                                    </Leaf_Type>
                                                                                    <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                            </subtlv-type>
                                                                            <te-default-metric>
                                                                                    <Leaf_Type name='uint32'>
                                                                                    </Leaf_Type>
                                                                                    <Description>This metric is administratively assigned and can be used to present a differently weighted topology to traffic engineering SPF calculations. To preclude overflow within a traffic engineering SPF implementation, all metrics greater than or equal to MAX_PATH_METRIC SHALL be considered to have a metric of MAX_PATH_METRIC.</Description>
                                                                    </te-default-metric>
                                                                </state>
                                                            </te-default-metric>
                                                                    <bandwidth-constraints>
                                                                        <state>
                                                                            <subtlv-type>
                                                                                    <Leaf_Type name='Idenity'>
                                                                                    </Leaf_Type>
                                                                                    <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                            </subtlv-type>
                                                                            <model-id>
                                                                                    <Leaf_Type name='uint8'>
                                                                                    </Leaf_Type>
                                                                                    <Description>Identifier for the Bandwidth Constraints  Model currently in use by the LSR initiating the IGP advertisement.</Description>
                                                                            </model-id>
                                                                            <reserved>
                                                                                    <Leaf_Type name='uint32'>
                                                                                    </Leaf_Type>
                                                                                    <Description>Should be set to zero by the LSR generating the sub-TLV and should be ignored by the LSR receiving the sub-TLV.</Description>
                                                                            </reserved>
                                                                            <bandwidth-constraints>
                                                                                    <Leaf_Type name='binary'>
                                                                                    </Leaf_Type>
                                                                                    <Description>Contains BC0, BC1,... BC(N-1).  Each BC is encoded on 32 bits in IEEE floating point format.  The units are bytes (not bits!) per secondy.</Description>
                                                                    </bandwidth-constraints>
                                                                </state>
                                                            </bandwidth-constraints>
                                                                    <adjacency-sid>
                                                                        <sid>
                                                                            <state>
                                                                                <value>
                                                                                        <Leaf_Type name='uint32'>
                                                                                        </Leaf_Type>
                                                                                        <Description>Adjacency-SID value.</Description>
                                                                                </value>
                                                                                <flags>
                                                                                        <Leaf_Type name='Enumerations'> ['ADDRESS_FAMILY', 'BACKUP', 'VALUE', 'LOCAL', 'SET']</Leaf_Type>
                                                                                        <Description>Flags associated with Adj-Segment-ID.</Description>
                                                                                </flags>
                                                                                <weight>
                                                                                        <Leaf_Type name='uint8'>
                                                                                        </Leaf_Type>
                                                                                        <Description>Value that represents the weight of the Adj-SID for the purpose of load balancing.</Description>
                                                                    </weight>
                                                                </state>
                                                            </sid>
                                                        </adjacency-sid>
                                                                    <lan-adjacency-sid>
                                                                        <sid>
                                                                            <state>
                                                                                <value>
                                                                                        <Leaf_Type name='uint32'>
                                                                                        </Leaf_Type>
                                                                                        <Description>LAN Adjacency-SID value.</Description>
                                                                                </value>
                                                                                <flags>
                                                                                        <Leaf_Type name='Enumerations'> ['ADDRESS_FAMILY', 'BACKUP', 'VALUE', 'LOCAL', 'SET']</Leaf_Type>
                                                                                        <Description>Flags associated with LAN-Adj-Segment-ID.</Description>
                                                                                </flags>
                                                                                <weight>
                                                                                        <Leaf_Type name='uint8'>
                                                                                        </Leaf_Type>
                                                                                        <Description>Value that represents the weight of the Adj-SID for the purpose of load balancing.</Description>
                                                                                </weight>
                                                                                <neighbor-id>
                                                                                        <Leaf_Type name='string'>
                                                                                        <Pattern>[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}</Pattern>
                                                                                        </Leaf_Type>
                                                                                        <Description>System ID of the neighbor associated with the LAN-Adj-Segment-ID value.</Description>
                                                                    </neighbor-id>
                                                                </state>
                                                            </sid>
                                                        </lan-adjacency-sid>
                                                                    <if-indices>
                                                                        <state>
                                                                            <subtlv-type>
                                                                                    <Leaf_Type name='Idenity'>
                                                                                    </Leaf_Type>
                                                                                    <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                            </subtlv-type>
                                                                            <local-index>
                                                                                    <Leaf_Type name='uint32'>
                                                                                    </Leaf_Type>
                                                                                    <Description>Local interface index</Description>
                                                                            </local-index>
                                                                            <remote-index>
                                                                                    <Leaf_Type name='uint32'>
                                                                                    </Leaf_Type>
                                                                                    <Description>remote interface index</Description>
                                                            </remote-index>
                                                        </state>
                                                    </if-indices>
                                                </subTLVs>
                                            </subTLVs>
                                                            <undefined-subtlvs>
                                                                <undefined-subtlv type='index-name'>
                                                                    <type>
                                                                            <Description>A reference to a subTLV</Description>
                                                                    </type>
                                                                    <state>
                                                                        <type>
                                                                                <Leaf_Type name='uint8'>
                                                                                </Leaf_Type>
                                                                                <Description>TLV Type.</Description>
                                                                        </type>
                                                                        <length>
                                                                                <Leaf_Type name='uint8'>
                                                                                </Leaf_Type>
                                                                                <Description>TLV length.</Description>
                                                                        </length>
                                                                        <value>
                                                                                <Leaf_Type name='binary'>
                                                                                </Leaf_Type>
                                                                                <Description>TLV value.</Description>
                                                </value>
                                            </state>
                                        </undefined-subtlv>
                                    </undefined-subtlvs>
                                </neighbors>
                            </neighbors>
                        </extended-is-reachability>
                                                <extended-ipv4-reachability>
                                                    <state>
                                                        <type>
                                                                <Leaf_Type name='Idenity'>
                                                                </Leaf_Type>
                                                                <Description>The type of TLV being described. The type of TLV is expressed as a canonical name.</Description>
                                                    </type>
                                                </state>
                                                    <prefixes>
                                                        <prefix>
                                                            <state>
                                                                <up-down>
                                                                        <Leaf_Type name='boolean'>
                                                                        </Leaf_Type>
                                                                        <Description>The up/down bit. Set if a prefix is advertised from a higher level to a lower level (e.g., level 2 to level 1), indicating that the prefix has traveled down the hierarchy. Prefixes that have the up/down bit set may only be advertised down the hierarchy, i.e., to lower levels. When a prefix is first injected into IS-IS, the bit is UNSET.</Description>
                                                                </up-down>
                                                                <s-bit>
                                                                        <Leaf_Type name='boolean'>
                                                                        </Leaf_Type>
                                                                        <Description>The Sub-TLV present bit. If UNSET, the octets of Sub-TLVs are not present. Otherwise, the bit is set and the octet following the prefix will contain the length of the Sub-TLV portion of the structure.</Description>
                                                                </s-bit>
                                                                <ipv4-prefix>
                                                                        <Leaf_Type name='string'>
                                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                                                        </Leaf_Type>
                                                                        <Description>IPv4 prefix contained within extended reachability TLVs.</Description>
                                                                </ipv4-prefix>
                                                                <metric>
                                                                        <Leaf_Type name='uint32'>
                                                                        </Leaf_Type>
                                                                        <Description>ISIS metric value.</Description>
                                                            </metric>
                                                        </state>
                                                            <subTLVs>
                                                                <subTLVs subtlv-type='index-name'>
                                                                    <subtlv-type>
                                                                            <Description>A reference for the TLV type being described within the LSDB</Description>
                                                                    </subtlv-type>
                                                                    <state>
                                                                        <subtlv-type>
                                                                                <Leaf_Type name='Idenity'>
                                                                                </Leaf_Type>
                                                                                <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                    </subtlv-type>
                                                                </state>
                                                                    <tag>
                                                                        <state>
                                                                            <subtlv-type>
                                                                                    <Leaf_Type name='Idenity'>
                                                                                    </Leaf_Type>
                                                                                    <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                            </subtlv-type>
                                                                            <tag32>
                                                                                    <Leaf_Type name='uint32'>
                                                                                    </Leaf_Type>
                                                                                    <Description>List of 32-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.</Description>
                                                                    </tag32>
                                                                </state>
                                                            </tag>
                                                                    <prefix-sid>
                                                                        <sid>
                                                                            <state>
                                                                                <subtlv-type>
                                                                                        <Leaf_Type name='Idenity'>
                                                                                        </Leaf_Type>
                                                                                        <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                                </subtlv-type>
                                                                                <value>
                                                                                        <Leaf_Type name='uint32'>
                                                                                        </Leaf_Type>
                                                                                        <Description>IGP Prefix-SID value.</Description>
                                                                                </value>
                                                                                <flags>
                                                                                        <Leaf_Type name='Enumerations'> ['READVERTISEMENT', 'NODE', 'PHP', 'EXPLICIT_NULL', 'VALUE', 'LOCAL']</Leaf_Type>
                                                                                        <Description>Flags associated with Prefix Segment-ID.</Description>
                                                                                </flags>
                                                                                <algorithm>
                                                                                        <Leaf_Type name='uint8'>
                                                                                        </Leaf_Type>
                                                                                        <Description>Prefix-SID algorithm to be used for path computation.</Description>
                                                            </algorithm>
                                                        </state>
                                                    </sid>
                                                </prefix-sid>
                                            </subTLVs>
                                        </subTLVs>
                                                            <undefined-subtlvs>
                                                                <undefined-subtlv type='index-name'>
                                                                    <type>
                                                                            <Description>A reference to a subTLV</Description>
                                                                    </type>
                                                                    <state>
                                                                        <type>
                                                                                <Leaf_Type name='uint8'>
                                                                                </Leaf_Type>
                                                                                <Description>TLV Type.</Description>
                                                                        </type>
                                                                        <length>
                                                                                <Leaf_Type name='uint8'>
                                                                                </Leaf_Type>
                                                                                <Description>TLV length.</Description>
                                                                        </length>
                                                                        <value>
                                                                                <Leaf_Type name='binary'>
                                                                                </Leaf_Type>
                                                                                <Description>TLV value.</Description>
                                                </value>
                                            </state>
                                        </undefined-subtlv>
                                    </undefined-subtlvs>
                                </prefix>
                            </prefixes>
                        </extended-ipv4-reachability>
                                                <ipv6-reachability>
                                                    <state>
                                                        <type>
                                                                <Leaf_Type name='Idenity'>
                                                                </Leaf_Type>
                                                                <Description>The type of TLV being described. The type of TLV is expressed as a canonical name.</Description>
                                                    </type>
                                                </state>
                                                    <prefixes>
                                                        <prefixes>
                                                            <state>
                                                                <up-down>
                                                                        <Leaf_Type name='boolean'>
                                                                        </Leaf_Type>
                                                                        <Description>The up/down bit. Set if a prefix is advertised from a higher level to a lower level (e.g., level 2 to level 1), indicating that the prefix has traveled down the hierarchy. Prefixes that have the up/down bit set may only be advertised down the hierarchy, i.e., to lower levels. When a prefix is first injected into IS-IS, the bit is UNSET.</Description>
                                                                </up-down>
                                                                <x-bit>
                                                                        <Leaf_Type name='boolean'>
                                                                        </Leaf_Type>
                                                                        <Description>The external bit. Set when the prefix was distributed into IS-IS from another routing protocol.</Description>
                                                                </x-bit>
                                                                <s-bit>
                                                                        <Leaf_Type name='boolean'>
                                                                        </Leaf_Type>
                                                                        <Description>The sub-tlv present bit. If UNSET, the octets of Sub-TLVs are not present. Otherwise, the bit is set and the octet following the prefix will contain the length of the Sub-TLV portion of the structure.</Description>
                                                                </s-bit>
                                                                <ipv6-prefix>
                                                                        <Leaf_Type name='string'>
                                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))</Pattern>
                                                                        </Leaf_Type>
                                                                        <Description>IPv6 prefix contained within extended reachability TLVs.</Description>
                                                                </ipv6-prefix>
                                                                <metric>
                                                                        <Leaf_Type name='uint32'>
                                                                        </Leaf_Type>
                                                                        <Description>ISIS metric value.</Description>
                                                            </metric>
                                                        </state>
                                                            <subTLVs>
                                                                <subTLVs subtlv-type='index-name'>
                                                                    <subtlv-type>
                                                                            <Description>A reference for the TLV type being described within the LSDB</Description>
                                                                    </subtlv-type>
                                                                    <state>
                                                                        <subtlv-type>
                                                                                <Leaf_Type name='Idenity'>
                                                                                </Leaf_Type>
                                                                                <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                    </subtlv-type>
                                                                </state>
                                                                    <tag>
                                                                        <state>
                                                                            <subtlv-type>
                                                                                    <Leaf_Type name='Idenity'>
                                                                                    </Leaf_Type>
                                                                                    <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                            </subtlv-type>
                                                                            <tag32>
                                                                                    <Leaf_Type name='uint32'>
                                                                                    </Leaf_Type>
                                                                                    <Description>List of 32-bit tags associated with the prefix. Example uses of these tags include carrying BGP standard (or extended) communities and controlling redistribution between levels and areas, different routing protocols, or multiple instances of IS-IS running on the same router.</Description>
                                                                    </tag32>
                                                                </state>
                                                            </tag>
                                                                    <prefix-sid>
                                                                        <sid>
                                                                            <state>
                                                                                <subtlv-type>
                                                                                        <Leaf_Type name='Idenity'>
                                                                                        </Leaf_Type>
                                                                                        <Description>The type of subTLV being described. The type of subTLV is expressed as a canonical name.</Description>
                                                                                </subtlv-type>
                                                                                <value>
                                                                                        <Leaf_Type name='uint32'>
                                                                                        </Leaf_Type>
                                                                                        <Description>IGP Prefix-SID value.</Description>
                                                                                </value>
                                                                                <flags>
                                                                                        <Leaf_Type name='Enumerations'> ['READVERTISEMENT', 'NODE', 'PHP', 'EXPLICIT_NULL', 'VALUE', 'LOCAL']</Leaf_Type>
                                                                                        <Description>Flags associated with Prefix Segment-ID.</Description>
                                                                                </flags>
                                                                                <algorithm>
                                                                                        <Leaf_Type name='uint8'>
                                                                                        </Leaf_Type>
                                                                                        <Description>Prefix-SID algorithm to be used for path computation.</Description>
                                                            </algorithm>
                                                        </state>
                                                    </sid>
                                                </prefix-sid>
                                            </subTLVs>
                                        </subTLVs>
                                                            <undefined-subtlvs>
                                                                <undefined-subtlv type='index-name'>
                                                                    <type>
                                                                            <Description>A reference to a subTLV</Description>
                                                                    </type>
                                                                    <state>
                                                                        <type>
                                                                                <Leaf_Type name='uint8'>
                                                                                </Leaf_Type>
                                                                                <Description>TLV Type.</Description>
                                                                        </type>
                                                                        <length>
                                                                                <Leaf_Type name='uint8'>
                                                                                </Leaf_Type>
                                                                                <Description>TLV length.</Description>
                                                                        </length>
                                                                        <value>
                                                                                <Leaf_Type name='binary'>
                                                                                </Leaf_Type>
                                                                                <Description>TLV value.</Description>
                                                </value>
                                            </state>
                                        </undefined-subtlv>
                                    </undefined-subtlvs>
                                </prefixes>
                            </prefixes>
                        </ipv6-reachability>
                                                <lsp-buffer-size>
                                                    <state>
                                                        <type>
                                                                <Leaf_Type name='Idenity'>
                                                                </Leaf_Type>
                                                                <Description>The type of TLV being described. The type of TLV is expressed as a canonical name.</Description>
                                                        </type>
                                                        <buffer-size>
                                                                <Leaf_Type name='uint16'>
                                                                </Leaf_Type>
                                                                <Description>Buffer size</Description>
                                        </buffer-size>
                                    </state>
                                </lsp-buffer-size>
                            </tlv>
                        </tlvs>
                                        <undefined-tlvs>
                                            <undefined-tlv type='index-name'>
                                                <type>
                                                        <Description>Reference to the type of the undefined TLV.</Description>
                                                </type>
                                                <state>
                                                    <type>
                                                            <Leaf_Type name='uint8'>
                                                            </Leaf_Type>
                                                            <Description>TLV Type.</Description>
                                                    </type>
                                                    <length>
                                                            <Leaf_Type name='uint8'>
                                                            </Leaf_Type>
                                                            <Description>TLV length.</Description>
                                                    </length>
                                                    <value>
                                                            <Leaf_Type name='binary'>
                                                            </Leaf_Type>
                                                            <Description>TLV value.</Description>
                        </value>
                    </state>
                </undefined-tlv>
            </undefined-tlvs>
        </lsp>
    </link-state-database>
</level>
</levels>
                        <interfaces>
                            <interface interface-id='index-name'>
                                <interface-id>
                                        <Description>Reference to interface-id</Description>
                                </interface-id>
                                <circuit-counters>
                                    <state>
                                        <adj-changes>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times an adjacency state change has occurred on this circuit. MIB Entry: CircAdjChanges.</Description>
                                        </adj-changes>
                                        <init-fails>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times initialization of this circuit has failed. This counts events such as PPP NCP failures. MIB Entry: CircInitFails.</Description>
                                        </init-fails>
                                        <rejected-adj>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times an adjacency has been rejected on this circuit. MIB Entry: CircRejAdjs.</Description>
                                        </rejected-adj>
                                        <id-field-len-mismatches>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times an IS-IS control PDU with an ID field length different from that for this system has been received. MIB Entry: CircIDFieldLenMismatches.</Description>
                                        </id-field-len-mismatches>
                                        <max-area-address-mismatches>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times an IS-IS control PDU with a max area address field different from that for this system has been received. MIB Entry: CircMaxAreaAddrMismatches.</Description>
                                        </max-area-address-mismatches>
                                        <auth-type-fails>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times an IS-IS control PDU with an auth type field different from that for this system has been received. MIB Entry: CircAuthTypeFails.</Description>
                                        </auth-type-fails>
                                        <auth-fails>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times an IS-IS control PDU with the correct auth type has failed to pass authentication validation. MIB Entry: CircAuthFails.</Description>
                                        </auth-fails>
                                        <lan-dis-changes>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of times the Designated IS has changed on this circuit at this level. If the circuit is point to point, this count is zero. MIB Entry: CircLANDesISChanges.</Description>
                                        </lan-dis-changes>
                                        <adj-number>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Number of adjacencies on this circuit. MIB Entry: CircNumAdj.</Description>
                                </adj-number>
                            </state>
                        </circuit-counters>
                                <levels>
                                    <level level-number='index-name'>
                                        <level-number>
                                                <Description>Reference to ISIS level-number.</Description>
                                        </level-number>
                                        <packet-counters>
                                            <lsp>
                                                <state>
                                                    <received>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU received on the interface.</Description>
                                                    </received>
                                                    <processed>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU received on the interface that have been processed by the local system.</Description>
                                                    </processed>
                                                    <dropped>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU received on the interface that have been dropped.</Description>
                                                    </dropped>
                                                    <sent>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU that have been sent by the local system on the interface.</Description>
                                                    </sent>
                                                    <retransmit>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU that that have been retransmitted by the local system on the interface.</Description>
                                            </retransmit>
                                        </state>
                                    </lsp>
                                            <iih>
                                                <state>
                                                    <received>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU received on the interface.</Description>
                                                    </received>
                                                    <processed>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU received on the interface that have been processed by the local system.</Description>
                                                    </processed>
                                                    <dropped>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU received on the interface that have been dropped.</Description>
                                                    </dropped>
                                                    <sent>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU that have been sent by the local system on the interface.</Description>
                                                    </sent>
                                                    <retransmit>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU that that have been retransmitted by the local system on the interface.</Description>
                                            </retransmit>
                                        </state>
                                    </iih>
                                            <psnp>
                                                <state>
                                                    <received>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU received on the interface.</Description>
                                                    </received>
                                                    <processed>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU received on the interface that have been processed by the local system.</Description>
                                                    </processed>
                                                    <dropped>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU received on the interface that have been dropped.</Description>
                                                    </dropped>
                                                    <sent>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU that have been sent by the local system on the interface.</Description>
                                                    </sent>
                                                    <retransmit>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU that that have been retransmitted by the local system on the interface.</Description>
                                            </retransmit>
                                        </state>
                                    </psnp>
                                            <cnsp>
                                                <state>
                                                    <received>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU received on the interface.</Description>
                                                    </received>
                                                    <processed>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU received on the interface that have been processed by the local system.</Description>
                                                    </processed>
                                                    <dropped>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU received on the interface that have been dropped.</Description>
                                                    </dropped>
                                                    <sent>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU that have been sent by the local system on the interface.</Description>
                                                    </sent>
                                                    <retransmit>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The number of the specified type of PDU that that have been retransmitted by the local system on the interface.</Description>
                                        </retransmit>
                                    </state>
                                </cnsp>
                            </packet-counters>
                                        <adjacencies>
                                            <adjacency system-id='index-name'>
                                                <system-id>
                                                        <Description>Reference to the IS neighbor.</Description>
                                                </system-id>
                                                <state>
                                                    <system-id>
                                                            <Leaf_Type name='string'>
                                                            <Pattern>[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}</Pattern>
                                                            </Leaf_Type>
                                                            <Description>ISIS neighbor system-id.</Description>
                                                    </system-id>
                                                    <neighbor-snpa>
                                                            <Leaf_Type name='string'>
                                                            </Leaf_Type>
                                                            <Description>ISIS neighbor SNPA.</Description>
                                                    </neighbor-snpa>
                                                    <local-extended-circuit-id>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>Local extended circuit ID.</Description>
                                                    </local-extended-circuit-id>
                                                    <neighbor-extended-circuit-id>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>ISIS neighbor extended circuit ID.</Description>
                                                    </neighbor-extended-circuit-id>
                                                    <priority>
                                                            <Leaf_Type name='uint8'>
                                                            </Leaf_Type>
                                                            <Description>Priority of the neighboring IS(LAN Hello only).</Description>
                                                    </priority>
                                                    <dis-system-id>
                                                            <Leaf_Type name='string'>
                                                            <Pattern>[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}\.[0-9A-Fa-f]{4}</Pattern>
                                                            </Leaf_Type>
                                                            <Description>DIS System ID(LAN hello only).</Description>
                                                    </dis-system-id>
                                                    <neighbor-circuit-type>
                                                            <Leaf_Type name='Enumerations'> ['LEVEL_1', 'LEVEL_2', 'LEVEL_1_2']</Leaf_Type>
                                                            <Description>Received ISIS circuit type (level-1, level-2, level-1-2).</Description>
                                                    </neighbor-circuit-type>
                                                    <adjacency-type>
                                                            <Leaf_Type name='Enumerations'> ['LEVEL_1', 'LEVEL_2', 'LEVEL_1_2']</Leaf_Type>
                                                            <Description>Formed ISIS adjacency type(level-1, level-2, level-1-2).</Description>
                                                    </adjacency-type>
                                                    <adjacency-state>
                                                            <Leaf_Type name='Enumerations'> ['UP', 'DOWN', 'INIT', 'FAILED']</Leaf_Type>
                                                            <Description>P2P 3-way ISIS adjacency state(up, down, init, failed).</Description>
                                                    </adjacency-state>
                                                    <remaining-hold-time>
                                                            <Leaf_Type name='uint16'>
                                                            </Leaf_Type>
                                                            <Description>Holding time in seconds for adjacency. This value is based on received hello PDUs and the elapsed time since receipt.</Description>
                                                    </remaining-hold-time>
                                                    <up-time>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>Adjacency up time.</Description>
                                                    </up-time>
                                                    <multi-topology>
                                                            <Leaf_Type name='boolean'>
                                                            </Leaf_Type>
                                                            <Description>When set to true, ISIS multi-topology is supported.</Description>
                                                    </multi-topology>
                                                    <topology>
                                                            <Leaf_Type name='Idenity'>
                                                            </Leaf_Type>
                                                            <Description>ISIS topology type support(ipv4-unicast, ipv6-unicast, ipv4-multicast, ipv6-multicast).</Description>
                                                    </topology>
                                                    <restart-support>
                                                            <Leaf_Type name='boolean'>
                                                            </Leaf_Type>
                                                            <Description>When set to true, Graceful-restart signaling is supported.</Description>
                                                    </restart-support>
                                                    <restart-suppress>
                                                            <Leaf_Type name='boolean'>
                                                            </Leaf_Type>
                                                            <Description>When set to true, adjacency is not advertised. The SA bit is used by a starting router to  request that its neighbor suppress advertisement of the adjacency  to the starting router in the neighbor's LSPs.</Description>
                                                    </restart-suppress>
                                                    <restart-status>
                                                            <Leaf_Type name='boolean'>
                                                            </Leaf_Type>
                                                            <Description>When set to true, neighbor is being helped. The RR bit is used by a (re)starting router to signal to its neighbors that a (re)start is in progress.</Description>
                                                    </restart-status>
                                                    <area-address>
                                                            <Leaf_Type name='string'>
                                                            <Pattern>[0-9A-Fa-f]{2}\.([0-9A-Fa-f]{4}\.){0,3}</Pattern>
                                                            </Leaf_Type>
                                                            <Description>List of ISIS area-address(es).</Description>
                                                    </area-address>
                                                    <nlpid>
                                                            <Leaf_Type name='Enumerations'> ['IPV4', 'IPV6']</Leaf_Type>
                                                            <Description>Supported Protocol. IPv4 is defined as (0xcc) and IPv6 - (0x8e). ISIS reference is TLV 129.</Description>
                                                    </nlpid>
                                                    <ipv4-neighbor-address>
                                                            <Leaf_Type name='string'>
                                                            </Leaf_Type>
                                                            <Description>nbr ipv4 address</Description>
                                                    </ipv4-neighbor-address>
                                                    <ipv6-neighbor-address>
                                                            <Leaf_Type name='string'>
                                                            </Leaf_Type>
                                                            <Description>nbr ipv6 address</Description>
                                                    </ipv6-neighbor-address>
                                                </state>
                                            </adjacency>
                                        </adjacencies>
                                    </level>
                                </levels>
                            </interface>
                        </interfaces>
                    </isis>
                </protocol>
            </protocols>
        </network-instance>
    </network-instances>
</rpd_isis_oc>
<rpd_loc_rib_oc>
    <local-routes>
        <static-routes>
            <static>
                <prefix>
                        <Leaf_Type name='union'>
                            <Leaf_Type name='string'>
                            <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                            </Leaf_Type>
                            <Leaf_Type name='string'>
                            <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))</Pattern>
                            </Leaf_Type>
                        </Leaf_Type>
                </prefix>
                <state>
                    <prefix>
                            <Leaf_Type name='union'>
                                <Leaf_Type name='string'>
                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                </Leaf_Type>
                                <Leaf_Type name='string'>
                                <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))</Pattern>
                                </Leaf_Type>
                            </Leaf_Type>
                            <Description>Destination prefix for the static route, either IPv4 or IPv6.</Description>
                    </prefix>
                    <set-tag>
                            <Leaf_Type name='union'>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                                <Leaf_Type name='string'>
                                <Pattern>([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?</Pattern>
                                </Leaf_Type>
                            </Leaf_Type>
                            <Description>Set a generic tag value on the route. This tag can be used for filtering routes that are distributed to other routing protocols.</Description>
                </set-tag>
            </state>
                <next-hops>
                    <next-hop>
                        <index>
                                <Leaf_Type name='string'>
                                </Leaf_Type>
                        </index>
                        <state>
                            <index>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                    <Description>An user-specified identifier utilised to uniquely reference the next-hop entry in the next-hop list. The value of this index has no semantic meaning other than for referencing the entry.</Description>
                            </index>
                            <next-hop>
                                    <Leaf_Type name='union'>
                                        <Leaf_Type name='union'>
                                            <Leaf_Type name='string'>
                                            <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                            <Leaf_Type name='string'>
                                            <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                        </Leaf_Type>
                                        <Leaf_Type name='Identity'/>
                                    </Leaf_Type>
                                    <Description>The next-hop that is to be used for the static route - this may be specified as an IP address, an interface or a pre-defined next-hop type - for instance, DROP or LOCAL_LINK. When this leaf is not set, and the interface-ref value is specified for the next-hop, then the system should treat the prefix as though it is directly connected to the interface.</Description>
                            </next-hop>
                            <metric>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>A metric which is utilised to specify the preference of the next-hop entry when it is injected into the RIB. The lower the metric, the more preferable the prefix is. When this value is not specified the metric is inherited from the default metric utilised for static routes within the network instance that the static routes are being instantiated. When multiple next-hops are specified for a static route, the metric is utilised to determine which of the next-hops is to be installed in the RIB. When multiple next-hops have the same metric (be it specified, or simply the default) then these next-hops should all be installed in the RIB</Description>
                            </metric>
                            <recurse>
                                    <Leaf_Type name='boolean'>
                                    </Leaf_Type>
                                    <Description>Determines whether the next-hop should be allowed to be looked up recursively - i.e., via a RIB entry which has been installed by a routing protocol, or another static route - rather than needing to be connected directly to an interface of the local system within the current network instance. When the interface reference specified within the next-hop entry is set (i.e., is not null) then forwarding is restricted to being via the interface specified - and recursion is hence disabled.</Description>
                            </recurse>
                            <set-tag>
                                    <Leaf_Type name='union'>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Leaf_Type name='string'>
                                        <Pattern>([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?</Pattern>
                                        </Leaf_Type>
                                    </Leaf_Type>
                                    <Description>In Junos each qualified next-hop can have a tag on its own. This leaf will be used to display tag value of a  qualified next-hop.</Description>
                        </set-tag>
                    </state>
                        <interface-ref>
                            <state>
                                <interface>
                                        <Description>Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.</Description>
                                </interface>
                                <subinterface>
                                        <Description>Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.</Description>
        </subinterface>
    </state>
</interface-ref>
</next-hop>
</next-hops>
</static>
</static-routes>
        <local-aggregates>
            <aggregate>
                <prefix>
                        <Leaf_Type name='union'>
                            <Leaf_Type name='string'>
                            <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                            </Leaf_Type>
                            <Leaf_Type name='string'>
                            <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))</Pattern>
                            </Leaf_Type>
                        </Leaf_Type>
                </prefix>
                <state>
                    <prefix>
                            <Leaf_Type name='union'>
                                <Leaf_Type name='string'>
                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))</Pattern>
                                </Leaf_Type>
                                <Leaf_Type name='string'>
                                <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))</Pattern>
                                </Leaf_Type>
                            </Leaf_Type>
                            <Description>Aggregate prefix to be advertised</Description>
                    </prefix>
                    <discard>
                            <Leaf_Type name='boolean'>
                            </Leaf_Type>
                            <Description>When true, install the aggregate route with a discard next-hop -- traffic destined to the aggregate will be discarded with no ICMP message generated.  When false, traffic destined to an aggregate address when no constituent routes are present will generate an ICMP unreachable message.</Description>
                    </discard>
                    <set-tag>
                            <Leaf_Type name='union'>
                                <Leaf_Type name='uint32'>
                                </Leaf_Type>
                                <Leaf_Type name='string'>
                                <Pattern>([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?</Pattern>
                                </Leaf_Type>
                            </Leaf_Type>
                            <Description>Set a generic tag value on the route. This tag can be used for filtering routes that are distributed to other routing protocols.</Description>
                    </set-tag>
                </state>
            </aggregate>
        </local-aggregates>
    </local-routes>
</rpd_loc_rib_oc>
<rpd_ni_bgp_oc>
    <network-instances>
        <network-instance instance-name='index-name'>
            <instance-name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
            </instance-name>
            <protocols>
                <protocol>
                    <bgp>
                        <global>
                            <state>
                                <as>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>Local autonomous system number of the router.  Uses the 32-bit as-number type from the model in RFC 6991.</Description>
                                </as>
                                <router-id>
                                        <Leaf_Type name='string'>
                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])</Pattern>
                                        </Leaf_Type>
                                        <Description>Router id of the router - an unsigned 32-bit integer expressed in dotted quad notation.</Description>
                                </router-id>
                                <total-paths>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>Total number of BGP paths within the context</Description>
                                </total-paths>
                                <total-prefixes>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>Total number of BGP prefixes received within the context</Description>
                            </total-prefixes>
                        </state>
                            <route-selection-options>
                                <state>
                                    <always-compare-med>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>Compare multi-exit discriminator (MED) value from different ASes when selecting the best route.  The default behavior is to only compare MEDs for paths received from the same AS.</Description>
                                    </always-compare-med>
                                    <ignore-as-path-length>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>Ignore the AS path length when selecting the best path. The default is to use the AS path length and prefer paths with shorter length.</Description>
                                    </ignore-as-path-length>
                                    <external-compare-router-id>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>When comparing similar routes received from external BGP peers, use the router-id as a criterion to select the active path.</Description>
                                    </external-compare-router-id>
                                    <advertise-inactive-routes>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>Advertise inactive routes to external peers.  The default is to only advertise active routes.</Description>
                            </advertise-inactive-routes>
                        </state>
                    </route-selection-options>
                            <confederation>
                                <state>
                                    <enabled>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>When this leaf is set to true it indicates that the local-AS is part of a BGP confederation</Description>
                                    </enabled>
                                    <identifier>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Confederation identifier for the autonomous system.</Description>
                                    </identifier>
                                    <member-as>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Remote autonomous systems that are to be treated as part of the local confederation.</Description>
                            </member-as>
                        </state>
                    </confederation>
                            <graceful-restart>
                                <state>
                                    <enabled>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>Enable or disable the graceful-restart capability.</Description>
                                    </enabled>
                                    <restart-time>
                                            <Leaf_Type name='uint16'>
                                            </Leaf_Type>
                                            <Description>Estimated time (in seconds) for the local BGP speaker to restart a session. This value is advertise in the graceful restart BGP capability.  This is a 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the suggested default value is &lt;= the hold-time value.</Description>
                                    </restart-time>
                                    <stale-routes-time>
                                            <Leaf_Type name='decimal64'>
                                            </Leaf_Type>
                                            <Description>An upper-bound on the time thate stale routes will be retained by a router after a session is restarted. If an End-of-RIB (EOR) marker is received prior to this timer expiring stale-routes will be flushed upon its receipt - if no EOR is received, then when this timer expires stale paths will be purged. This timer is referred to as the Selection_Deferral_Timer in RFC4724</Description>
                                    </stale-routes-time>
                                    <helper-only>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>Enable graceful-restart in helper mode only. When this leaf is set, the local system does not retain forwarding its own state during a restart, but supports procedures for the receiving speaker, as defined in RFC4724.</Description>
                            </helper-only>
                        </state>
                    </graceful-restart>
                            <apply-policy>
                                <state>
                                    <import-policy>
                                            <Description>list of policy names in sequence to be applied on receiving a routing update in the current context, e.g., for the current peer group, neighbor, address family, etc.</Description>
                                    </import-policy>
                                    <export-policy>
                                            <Description>list of policy names in sequence to be applied on sending a routing update in the current context, e.g., for the current peer group, neighbor, address family, etc.</Description>
                            </export-policy>
                        </state>
                    </apply-policy>
                            <afi-safis>
                                <afi-safi afi-safi-name='index-name'>
                                    <afi-safi-name>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                    </afi-safi-name>
                                    <graceful-restart>
                                        <state>
                                            <enabled>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>This leaf indicates whether graceful-restart is enabled for this AFI-SAFI</Description>
                                    </enabled>
                                </state>
                            </graceful-restart>
                                    <state>
                                        <afi-safi-name>
                                                <Leaf_Type name='Idenity'>
                                                </Leaf_Type>
                                                <Description>AFI,SAFI</Description>
                                        </afi-safi-name>
                                        <enabled>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the neighbour or group</Description>
                                        </enabled>
                                        <total-paths>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Total number of BGP paths within the context</Description>
                                        </total-paths>
                                        <total-prefixes>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Total number of BGP prefixes received within the context</Description>
                                        </total-prefixes>
                                        <prefix-limit>
                                            <state>
                                                <max-prefixes>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>Maximum number of prefixes that will be accepted from the neighbour</Description>
                                                </max-prefixes>
                                                <shutdown-threshold-pct>
                                                        <Leaf_Type name='uint8'>
                                                        </Leaf_Type>
                                                        <Description>Threshold on number of prefixes that can be received from a neighbour before generation of warning messages or log entries. Expressed as a percentage of max-prefixes</Description>
                                                </shutdown-threshold-pct>
                                                <restart-timer>
                                                        <Leaf_Type name='decimal64'>
                                                        </Leaf_Type>
                                                        <Description>Time interval in seconds after which the BGP session is re-established after being torn down due to exceeding the max-prefix limit.</Description>
                        </restart-timer>
                    </state>
                </prefix-limit>
            </state>
        </afi-safi>
    </afi-safis>
</global>
                        <neighbors>
                            <neighbor neighbor-address='index-name'>
                                <neighbor-address>
                                        <Leaf_Type name='union'>
                                            <Leaf_Type name='string'>
                                            <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                            <Leaf_Type name='string'>
                                            <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                        </Leaf_Type>
                                        <Description>Address of the BGP peer, either in IPv4 or IPv6</Description>
                                </neighbor-address>
                                <snmp-peer-index>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>An unique index for the remote peer entry in the jnxBgpM2PeerTable</Description>
                                </snmp-peer-index>
                                <state>
                                    <peer-as>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>AS number of the peer.</Description>
                                    </peer-as>
                                    <local-as>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>The local autonomous system number that is to be used when establishing sessions with the remote peer or peer group, if this differs from the global BGP router autonomous system number.</Description>
                                    </local-as>
                                    <peer-type>
                                            <Leaf_Type name='Enumerations'> ['INTERNAL', 'EXTERNAL']</Leaf_Type>
                                            <Description>Explicitly designate the peer or peer group as internal (iBGP) or external (eBGP).</Description>
                                    </peer-type>
                                    <auth-password>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>Configures an MD5 authentication password for use with neighboring devices.</Description>
                                    </auth-password>
                                    <remove-private-as>
                                            <Leaf_Type name='Idenity'>
                                            </Leaf_Type>
                                            <Description>Remove private AS numbers from updates sent to peers - when this leaf is not specified, the AS_PATH attribute should be sent to the peer unchanged</Description>
                                    </remove-private-as>
                                    <route-flap-damping>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>Enable route flap damping.</Description>
                                    </route-flap-damping>
                                    <description>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>An optional textual description (intended primarily for use with a peer or group</Description>
                                    </description>
                                    <session-state>
                                            <Leaf_Type name='Enumerations'> ['IDLE', 'CONNECT', 'ACTIVE', 'OPENSENT', 'OPENCONFIRM', 'ESTABLISHED']</Leaf_Type>
                                            <Description>Operational state of the BGP peer</Description>
                                    </session-state>
                                    <last-established>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>This timestamp indicates the time that the BGP session last transitioned in or out of the Established state.  The value is the timestamp in seconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC). The BGP session uptime can be computed by clients as the difference between this value and the current time in UTC (assuming the session is in the ESTABLISHED state, per the session-state leaf).</Description>
                                    </last-established>
                                    <established-transitions>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of transitions to the Established state for the neighbor session.  This value is analogous to the bgpPeerFsmEstablishedTransitions object from the standard BGP-4 MIB</Description>
                                    </established-transitions>
                                    <supported-capabilities>
                                            <Leaf_Type name='Idenity'>
                                            </Leaf_Type>
                                            <Description>BGP capabilities negotiated as supported with the peer</Description>
                                    </supported-capabilities>
                                    <messages>
                                        <sent>
                                            <UPDATE>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>Number of BGP UPDATE messages announcing, withdrawing or modifying paths exchanged.</Description>
                                            </UPDATE>
                                            <NOTIFICATION>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>Number of BGP NOTIFICATION messages indicating an error condition has occurred exchanged.</Description>
                                        </NOTIFICATION>
                                    </sent>
                                        <received>
                                            <UPDATE>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>Number of BGP UPDATE messages announcing, withdrawing or modifying paths exchanged.</Description>
                                            </UPDATE>
                                            <NOTIFICATION>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>Number of BGP NOTIFICATION messages indicating an error condition has occurred exchanged.</Description>
                                    </NOTIFICATION>
                                </received>
                            </messages>
                                    <queues>
                                        <input>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>The number of messages received from the peer currently queued</Description>
                                        </input>
                                        <output>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>The number of messages queued to be sent to the peer</Description>
                                    </output>
                                </queues>
                                    <session-status>
                                            <Leaf_Type name='Enumerations'> ['RUNNING', 'HALTED']</Leaf_Type>
                                            <Description>Whether the BGP FSM for this remote peer is halted or running. MIB Equivalent: jnxBgpM2PeerStatus</Description>
                                    </session-status>
                                    <session-admin-status>
                                            <Leaf_Type name='Enumerations'> ['STOP', 'START']</Leaf_Type>
                                            <Description>The desired state of the BGP connection</Description>
                                    </session-admin-status>
                                    <interface-error>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>If true - this peer session is permanently idled</Description>
                                    </interface-error>
                                    <import-eval-pending>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>If true - this peer import evaluation is pending</Description>
                                    </import-eval-pending>
                                    <import-eval>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>If true - this peer import evaluation is in process</Description>
                                    </import-eval>
                                    <peer-group>
                                            <Description>The peer-group with which this neighbor is associated</Description>
                                    </peer-group>
                                    <neighbor-address>
                                            <Leaf_Type name='union'>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                            </Leaf_Type>
                                            <Description>Address of the BGP peer, either in IPv4 or IPv6</Description>
                                    </neighbor-address>
                                    <enabled>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>Whether the BGP peer is enabled. In cases where the enabled leaf is set to false, the local system should not initiate connections to the neighbor, and should not respond to TCP connections attempts from the neighbor. If the state of the BGP session is ESTABLISHED at the time that this leaf is set to false, the BGP session should be ceased.</Description>
                                </enabled>
                            </state>
                                <timers>
                                    <state>
                                        <connect-retry>
                                                <Leaf_Type name='decimal64'>
                                                </Leaf_Type>
                                                <Description>Time interval in seconds between attempts to establish a session with the peer.</Description>
                                        </connect-retry>
                                        <hold-time>
                                                <Leaf_Type name='decimal64'>
                                                </Leaf_Type>
                                                <Description>Time interval in seconds that a BGP session will be considered active in the absence of keepalive or other messages from the peer.  The hold-time is typically set to 3x the keepalive-interval.</Description>
                                        </hold-time>
                                        <keepalive-interval>
                                                <Leaf_Type name='decimal64'>
                                                </Leaf_Type>
                                                <Description>Time interval in seconds between transmission of keepalive messages to the neighbor.  Typically set to 1/3 the hold-time.</Description>
                                        </keepalive-interval>
                                        <minimum-advertisement-interval>
                                                <Leaf_Type name='decimal64'>
                                                </Leaf_Type>
                                                <Description>Minimum time which must elapse between subsequent UPDATE messages relating to a common set of NLRI being transmitted to a peer. This timer is referred to as MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to reduce the number of UPDATE messages transmitted when a particular set of NLRI exhibit instability.</Description>
                                        </minimum-advertisement-interval>
                                        <negotiated-hold-time>
                                                <Leaf_Type name='decimal64'>
                                                </Leaf_Type>
                                                <Description>The negotiated hold-time for the BGP session</Description>
                                </negotiated-hold-time>
                            </state>
                        </timers>
                                <transport>
                                    <state>
                                        <tcp-mss>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>Sets the max segment size for BGP TCP sessions.</Description>
                                        </tcp-mss>
                                        <mtu-discovery>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Turns path mtu discovery for BGP TCP sessions on (true) or off (false)</Description>
                                        </mtu-discovery>
                                        <passive-mode>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Wait for peers to issue requests to open a BGP session, rather than initiating sessions from the local router.</Description>
                                        </passive-mode>
                                        <local-address>
                                                <Leaf_Type name='union'>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                </Leaf_Type>
                                                <Description>Set the local IP (either IPv4 or IPv6) address to use for the session when sending BGP update messages.  This may be expressed as either an IP address or reference to the name of an interface.</Description>
                                        </local-address>
                                        <local-port>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>Local TCP port being used for the TCP session supporting the BGP session</Description>
                                        </local-port>
                                        <remote-address>
                                                <Leaf_Type name='union'>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                </Leaf_Type>
                                                <Description>Remote address to which the BGP session has been established</Description>
                                        </remote-address>
                                        <remote-port>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>Remote port being used by the peer for the TCP session supporting the BGP session</Description>
                                </remote-port>
                            </state>
                        </transport>
                                <error-handling>
                                    <state>
                                        <treat-as-withdraw>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Specify whether erroneous UPDATE messages for which the NLRI can be extracted are reated as though the NLRI is withdrawn - avoiding session reset</Description>
                                        </treat-as-withdraw>
                                        <erroneous-update-messages>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>The number of BGP UPDATE messages for which the treat-as-withdraw mechanism has been applied based on erroneous message contents</Description>
                                </erroneous-update-messages>
                            </state>
                        </error-handling>
                                <logging-options>
                                    <state>
                                        <log-neighbor-state-changes>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Configure logging of peer state changes.  Default is to enable logging of peer state changes.</Description>
                                </log-neighbor-state-changes>
                            </state>
                        </logging-options>
                                <ebgp-multihop>
                                    <state>
                                        <enabled>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>When enabled the referenced group or neighbors are permitted to be indirectly connected - including cases where the TTL can be decremented between the BGP peers</Description>
                                        </enabled>
                                        <multihop-ttl>
                                                <Leaf_Type name='uint8'>
                                                </Leaf_Type>
                                                <Description>Time-to-live value to use when packets are sent to the referenced group or neighbors and ebgp-multihop is enabled</Description>
                                </multihop-ttl>
                            </state>
                        </ebgp-multihop>
                                <route-reflector>
                                    <state>
                                        <route-reflector-cluster-id>
                                                <Leaf_Type name='union'>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                </Leaf_Type>
                                                <Description>route-reflector cluster id to use when local router is configured as a route reflector.  Commonly set at the group level, but allows a different cluster id to be set for each neighbor.</Description>
                                        </route-reflector-cluster-id>
                                        <route-reflector-client>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Configure the neighbor as a route reflector client.</Description>
                                </route-reflector-client>
                            </state>
                        </route-reflector>
                                <as-path-options>
                                    <state>
                                        <allow-own-as>
                                                <Leaf_Type name='uint8'>
                                                </Leaf_Type>
                                                <Description>Specify the number of occurrences of the local BGP speaker's AS that can occur within the AS_PATH before it is rejected.</Description>
                                        </allow-own-as>
                                        <replace-peer-as>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Replace occurrences of the peer's AS in the AS_PATH with the local autonomous system number</Description>
                                </replace-peer-as>
                            </state>
                        </as-path-options>
                                <use-multiple-paths>
                                    <state>
                                        <enabled>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Whether the use of multiple paths for the same NLRI is enabled for the neighbor. This value is overridden by any more specific configuration value.</Description>
                                    </enabled>
                                </state>
                                    <ebgp>
                                        <state>
                                            <allow-multiple-as>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>Allow multipath to use paths from different neighbouring ASes.  The default is to only consider multiple paths from the same neighbouring AS.</Description>
                                            </allow-multiple-as>
                                            <maximum-paths>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>Maximum number of parallel paths to consider when using BGP multipath. The default is use a single path.</Description>
                                    </maximum-paths>
                                </state>
                            </ebgp>
                                    <ibgp>
                                        <state>
                                            <maximum-paths>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>Maximum number of parallel paths to consider when using iBGP multipath. The default is to use a single path</Description>
                                </maximum-paths>
                            </state>
                        </ibgp>
                    </use-multiple-paths>
                                <afi-safis>
                                    <afi-safi afi-safi-name='index-name'>
                                        <afi-safi-name>
                                                <Leaf_Type name='string'>
                                                </Leaf_Type>
                                        </afi-safi-name>
                                        <graceful-restart>
                                            <state>
                                                <enabled>
                                                        <Leaf_Type name='boolean'>
                                                        </Leaf_Type>
                                                        <Description>This leaf indicates whether graceful-restart is enabled for this AFI-SAFI</Description>
                                                </enabled>
                                                <received>
                                                        <Leaf_Type name='boolean'>
                                                        </Leaf_Type>
                                                        <Description>This leaf indicates whether the neighbor advertised the ability to support graceful-restart for this AFI-SAFI</Description>
                                                </received>
                                                <advertised>
                                                        <Leaf_Type name='boolean'>
                                                        </Leaf_Type>
                                                        <Description>This leaf indicates whether the ability to support graceful-restart has been advertised to the peer</Description>
                                        </advertised>
                                    </state>
                                </graceful-restart>
                                        <state>
                                            <afi-safi-name>
                                                    <Leaf_Type name='Idenity'>
                                                    </Leaf_Type>
                                                    <Description>AFI,SAFI</Description>
                                            </afi-safi-name>
                                            <enabled>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the neighbour or group</Description>
                                            </enabled>
                                            <active>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>This value indicates whether a particular AFI-SAFI has been succesfully negotiated with the peer. An AFI-SAFI may be enabled in the current running configuration, but a session restart may be required in order to negotiate the new capability.</Description>
                                            </active>
                                            <prefixes>
                                                <received>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>The number of prefixes received from the neighbor</Description>
                                                </received>
                                                <sent>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>The number of prefixes advertised to the neighbor</Description>
                                                </sent>
                                                <installed>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>The number of advertised prefixes installed in the Loc-RIB</Description>
                                                </installed>
                                                <accepted>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>The number of prefixes for a peer that are installed in the Adj-Ribs-In and are eligible to become active in the Loc-Rib. MIB Equivalent: jnxBgpM2PrefixInPrefixesAccepted</Description>
                                            </accepted>
                                        </prefixes>
                                            <prefix-limit-exceeded>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>If true - the prefix limit has exceeded</Description>
                                            </prefix-limit-exceeded>
                                            <queues>
                                                <input>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>The number of messages received from the peer currently queued</Description>
                                                </input>
                                                <output>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>The number of messages queued to be sent to the peer</Description>
                                            </output>
                                        </queues>
                                            <total-paths>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>Total number of BGP paths within the context</Description>
                                            </total-paths>
                                            <total-prefixes>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>Total number of BGP prefixes received within the context</Description>
                                            </total-prefixes>
                                            <prefix-limit>
                                                <state>
                                                    <max-prefixes>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>Maximum number of prefixes that will be accepted from the neighbour</Description>
                                                    </max-prefixes>
                                                    <shutdown-threshold-pct>
                                                            <Leaf_Type name='uint8'>
                                                            </Leaf_Type>
                                                            <Description>Threshold on number of prefixes that can be received from a neighbour before generation of warning messages or log entries. Expressed as a percentage of max-prefixes</Description>
                                                    </shutdown-threshold-pct>
                                                    <restart-timer>
                                                            <Leaf_Type name='decimal64'>
                                                            </Leaf_Type>
                                                            <Description>Time interval in seconds after which the BGP session is re-established after being torn down due to exceeding the max-prefix limit.</Description>
                                        </restart-timer>
                                    </state>
                                </prefix-limit>
                            </state>
                                        <add-paths>
                                            <receive>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>Enable ability to receive multiple path advertisements for an NLRI from the neighbor or group</Description>
                                            </receive>
                                            <send-max>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>The maximum number of paths to advertise to neighbors for a single NLRI</Description>
                                            </send-max>
                                            <eligible-prefix-policy>
                                                    <Description>A reference to a routing policy which can be used to restrict the prefixes for which add-paths is enabled</Description>
                                </eligible-prefix-policy>
                            </add-paths>
                        </afi-safi>
                    </afi-safis>
                                <graceful-restart>
                                    <state>
                                        <enabled>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Enable or disable the graceful-restart capability.</Description>
                                        </enabled>
                                        <restart-time>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>Estimated time (in seconds) for the local BGP speaker to restart a session. This value is advertise in the graceful restart BGP capability.  This is a 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the suggested default value is &lt;= the hold-time value.</Description>
                                        </restart-time>
                                        <stale-routes-time>
                                                <Leaf_Type name='decimal64'>
                                                </Leaf_Type>
                                                <Description>An upper-bound on the time thate stale routes will be retained by a router after a session is restarted. If an End-of-RIB (EOR) marker is received prior to this timer expiring stale-routes will be flushed upon its receipt - if no EOR is received, then when this timer expires stale paths will be purged. This timer is referred to as the Selection_Deferral_Timer in RFC4724</Description>
                                        </stale-routes-time>
                                        <helper-only>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Enable graceful-restart in helper mode only. When this leaf is set, the local system does not retain forwarding its own state during a restart, but supports procedures for the receiving speaker, as defined in RFC4724.</Description>
                                        </helper-only>
                                        <peer-restart-time>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>The period of time (advertised by the peer) that the peer expects a restart of a BGP session to take</Description>
                                        </peer-restart-time>
                                        <peer-restarting>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>This flag indicates whether the remote neighbor is currently in the process of restarting, and hence received routes are currently stale</Description>
                                        </peer-restarting>
                                        <local-restarting>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>This flag indicates whether the local neighbor is currently restarting. The flag is unset after all NLRI have been advertised to the peer, and the End-of-RIB (EOR) marker has been unset</Description>
                                        </local-restarting>
                                        <mode>
                                                <Leaf_Type name='Enumerations'> ['HELPER_ONLY', 'BILATERAL', 'REMOTE_HELPER']</Leaf_Type>
                                                <Description>Ths leaf indicates the mode of operation of BGP graceful restart with the peer</Description>
                                </mode>
                            </state>
                        </graceful-restart>
                                <apply-policy>
                                    <state>
                                        <import-policy>
                                                <Description>list of policy names in sequence to be applied on receiving a routing update in the current context, e.g., for the current peer group, neighbor, address family, etc.</Description>
                                        </import-policy>
                                        <export-policy>
                                                <Description>list of policy names in sequence to be applied on sending a routing update in the current context, e.g., for the current peer group, neighbor, address family, etc.</Description>
                        </export-policy>
                    </state>
                </apply-policy>
            </neighbor>
        </neighbors>
                        <peer-groups>
                            <peer-group peer-group-name='index-name'>
                                <peer-group-name>
                                        <Leaf_Type name='string'>
                                        </Leaf_Type>
                                        <Description>Name of the BGP peer-group</Description>
                                </peer-group-name>
                                <state>
                                    <peer-as>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>AS number of the peer.</Description>
                                    </peer-as>
                                    <local-as>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>The local autonomous system number that is to be used when establishing sessions with the remote peer or peer group, if this differs from the global BGP router autonomous system number.</Description>
                                    </local-as>
                                    <peer-type>
                                            <Leaf_Type name='Enumerations'> ['INTERNAL', 'EXTERNAL']</Leaf_Type>
                                            <Description>Explicitly designate the peer or peer group as internal (iBGP) or external (eBGP).</Description>
                                    </peer-type>
                                    <auth-password>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>Configures an MD5 authentication password for use with neighboring devices.</Description>
                                    </auth-password>
                                    <remove-private-as>
                                            <Leaf_Type name='Idenity'>
                                            </Leaf_Type>
                                            <Description>Remove private AS numbers from updates sent to peers - when this leaf is not specified, the AS_PATH attribute should be sent to the peer unchanged</Description>
                                    </remove-private-as>
                                    <route-flap-damping>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>Enable route flap damping.</Description>
                                    </route-flap-damping>
                                    <description>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>An optional textual description (intended primarily for use with a peer or group</Description>
                                    </description>
                                    <peer-group-name>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>Name of the BGP peer-group</Description>
                                    </peer-group-name>
                                    <total-paths>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Total number of BGP paths within the context</Description>
                                    </total-paths>
                                    <total-prefixes>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Total number of BGP prefixes received within the context</Description>
                                </total-prefixes>
                            </state>
                                <timers>
                                    <state>
                                        <connect-retry>
                                                <Leaf_Type name='decimal64'>
                                                </Leaf_Type>
                                                <Description>Time interval in seconds between attempts to establish a session with the peer.</Description>
                                        </connect-retry>
                                        <hold-time>
                                                <Leaf_Type name='decimal64'>
                                                </Leaf_Type>
                                                <Description>Time interval in seconds that a BGP session will be considered active in the absence of keepalive or other messages from the peer.  The hold-time is typically set to 3x the keepalive-interval.</Description>
                                        </hold-time>
                                        <keepalive-interval>
                                                <Leaf_Type name='decimal64'>
                                                </Leaf_Type>
                                                <Description>Time interval in seconds between transmission of keepalive messages to the neighbor.  Typically set to 1/3 the hold-time.</Description>
                                        </keepalive-interval>
                                        <minimum-advertisement-interval>
                                                <Leaf_Type name='decimal64'>
                                                </Leaf_Type>
                                                <Description>Minimum time which must elapse between subsequent UPDATE messages relating to a common set of NLRI being transmitted to a peer. This timer is referred to as MinRouteAdvertisementIntervalTimer by RFC 4721 and serves to reduce the number of UPDATE messages transmitted when a particular set of NLRI exhibit instability.</Description>
                                </minimum-advertisement-interval>
                            </state>
                        </timers>
                                <transport>
                                    <state>
                                        <tcp-mss>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>Sets the max segment size for BGP TCP sessions.</Description>
                                        </tcp-mss>
                                        <mtu-discovery>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Turns path mtu discovery for BGP TCP sessions on (true) or off (false)</Description>
                                        </mtu-discovery>
                                        <passive-mode>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Wait for peers to issue requests to open a BGP session, rather than initiating sessions from the local router.</Description>
                                        </passive-mode>
                                        <local-address>
                                                <Leaf_Type name='union'>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                                </Leaf_Type>
                                                <Description>Set the local IP (either IPv4 or IPv6) address to use for the session when sending BGP update messages.  This may be expressed as either an IP address or reference to the name of an interface.</Description>
                                </local-address>
                            </state>
                        </transport>
                                <error-handling>
                                    <state>
                                        <treat-as-withdraw>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Specify whether erroneous UPDATE messages for which the NLRI can be extracted are reated as though the NLRI is withdrawn - avoiding session reset</Description>
                                </treat-as-withdraw>
                            </state>
                        </error-handling>
                                <logging-options>
                                    <state>
                                        <log-neighbor-state-changes>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Configure logging of peer state changes.  Default is to enable logging of peer state changes.</Description>
                                </log-neighbor-state-changes>
                            </state>
                        </logging-options>
                                <ebgp-multihop>
                                    <state>
                                        <enabled>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>When enabled the referenced group or neighbors are permitted to be indirectly connected - including cases where the TTL can be decremented between the BGP peers</Description>
                                        </enabled>
                                        <multihop-ttl>
                                                <Leaf_Type name='uint8'>
                                                </Leaf_Type>
                                                <Description>Time-to-live value to use when packets are sent to the referenced group or neighbors and ebgp-multihop is enabled</Description>
                                </multihop-ttl>
                            </state>
                        </ebgp-multihop>
                                <route-reflector>
                                    <state>
                                        <route-reflector-cluster-id>
                                                <Leaf_Type name='union'>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                </Leaf_Type>
                                                <Description>route-reflector cluster id to use when local router is configured as a route reflector.  Commonly set at the group level, but allows a different cluster id to be set for each neighbor.</Description>
                                        </route-reflector-cluster-id>
                                        <route-reflector-client>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Configure the neighbor as a route reflector client.</Description>
                                </route-reflector-client>
                            </state>
                        </route-reflector>
                                <as-path-options>
                                    <state>
                                        <allow-own-as>
                                                <Leaf_Type name='uint8'>
                                                </Leaf_Type>
                                                <Description>Specify the number of occurrences of the local BGP speaker's AS that can occur within the AS_PATH before it is rejected.</Description>
                                        </allow-own-as>
                                        <replace-peer-as>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Replace occurrences of the peer's AS in the AS_PATH with the local autonomous system number</Description>
                                </replace-peer-as>
                            </state>
                        </as-path-options>
                                <use-multiple-paths>
                                    <state>
                                        <enabled>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Whether the use of multiple paths for the same NLRI is enabled for the neighbor. This value is overridden by any more specific configuration value.</Description>
                                    </enabled>
                                </state>
                                    <ebgp>
                                        <state>
                                            <allow-multiple-as>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>Allow multipath to use paths from different neighbouring ASes.  The default is to only consider multiple paths from the same neighbouring AS.</Description>
                                            </allow-multiple-as>
                                            <maximum-paths>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>Maximum number of parallel paths to consider when using BGP multipath. The default is use a single path.</Description>
                                    </maximum-paths>
                                </state>
                            </ebgp>
                                    <ibgp>
                                        <state>
                                            <maximum-paths>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>Maximum number of parallel paths to consider when using iBGP multipath. The default is to use a single path</Description>
                                </maximum-paths>
                            </state>
                        </ibgp>
                    </use-multiple-paths>
                                <afi-safis>
                                    <afi-safi afi-safi-name='index-name'>
                                        <afi-safi-name>
                                                <Leaf_Type name='string'>
                                                </Leaf_Type>
                                        </afi-safi-name>
                                        <graceful-restart>
                                            <state>
                                                <enabled>
                                                        <Leaf_Type name='boolean'>
                                                        </Leaf_Type>
                                                        <Description>This leaf indicates whether graceful-restart is enabled for this AFI-SAFI</Description>
                                        </enabled>
                                    </state>
                                </graceful-restart>
                                        <state>
                                            <afi-safi-name>
                                                    <Leaf_Type name='Idenity'>
                                                    </Leaf_Type>
                                                    <Description>AFI,SAFI</Description>
                                            </afi-safi-name>
                                            <enabled>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>This leaf indicates whether the IPv4 Unicast AFI,SAFI is enabled for the neighbour or group</Description>
                                            </enabled>
                                            <active>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>This value indicates whether a particular AFI-SAFI has been succesfully negotiated with the peer. An AFI-SAFI may be enabled in the current running configuration, but a session restart may be required in order to negotiate the new capability.</Description>
                                            </active>
                                            <prefixes>
                                                <received>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>The number of prefixes received from the neighbor</Description>
                                                </received>
                                                <sent>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>The number of prefixes advertised to the neighbor</Description>
                                                </sent>
                                                <installed>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>The number of advertised prefixes installed in the Loc-RIB</Description>
                                                </installed>
                                                <accepted>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>The number of prefixes for a peer that are installed in the Adj-Ribs-In and are eligible to become active in the Loc-Rib. MIB Equivalent: jnxBgpM2PrefixInPrefixesAccepted</Description>
                                            </accepted>
                                        </prefixes>
                                            <total-paths>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>Total number of BGP paths within the context</Description>
                                            </total-paths>
                                            <total-prefixes>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>Total number of BGP prefixes received within the context</Description>
                                            </total-prefixes>
                                            <prefix-limit>
                                                <state>
                                                    <max-prefixes>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>Maximum number of prefixes that will be accepted from the neighbour</Description>
                                                    </max-prefixes>
                                                    <shutdown-threshold-pct>
                                                            <Leaf_Type name='uint8'>
                                                            </Leaf_Type>
                                                            <Description>Threshold on number of prefixes that can be received from a neighbour before generation of warning messages or log entries. Expressed as a percentage of max-prefixes</Description>
                                                    </shutdown-threshold-pct>
                                                    <restart-timer>
                                                            <Leaf_Type name='decimal64'>
                                                            </Leaf_Type>
                                                            <Description>Time interval in seconds after which the BGP session is re-established after being torn down due to exceeding the max-prefix limit.</Description>
                                        </restart-timer>
                                    </state>
                                </prefix-limit>
                            </state>
                                        <add-paths>
                                            <receive>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>Enable ability to receive multiple path advertisements for an NLRI from the neighbor or group</Description>
                                            </receive>
                                            <send-max>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>The maximum number of paths to advertise to neighbors for a single NLRI</Description>
                                            </send-max>
                                            <eligible-prefix-policy>
                                                    <Description>A reference to a routing policy which can be used to restrict the prefixes for which add-paths is enabled</Description>
                                </eligible-prefix-policy>
                            </add-paths>
                        </afi-safi>
                    </afi-safis>
                                <graceful-restart>
                                    <state>
                                        <enabled>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Enable or disable the graceful-restart capability.</Description>
                                        </enabled>
                                        <restart-time>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>Estimated time (in seconds) for the local BGP speaker to restart a session. This value is advertise in the graceful restart BGP capability.  This is a 12-bit value, referred to as Restart Time in RFC4724.  Per RFC4724, the suggested default value is &lt;= the hold-time value.</Description>
                                        </restart-time>
                                        <stale-routes-time>
                                                <Leaf_Type name='decimal64'>
                                                </Leaf_Type>
                                                <Description>An upper-bound on the time thate stale routes will be retained by a router after a session is restarted. If an End-of-RIB (EOR) marker is received prior to this timer expiring stale-routes will be flushed upon its receipt - if no EOR is received, then when this timer expires stale paths will be purged. This timer is referred to as the Selection_Deferral_Timer in RFC4724</Description>
                                        </stale-routes-time>
                                        <helper-only>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Enable graceful-restart in helper mode only. When this leaf is set, the local system does not retain forwarding its own state during a restart, but supports procedures for the receiving speaker, as defined in RFC4724.</Description>
                                </helper-only>
                            </state>
                        </graceful-restart>
                                <apply-policy>
                                    <state>
                                        <import-policy>
                                                <Description>list of policy names in sequence to be applied on receiving a routing update in the current context, e.g., for the current peer group, neighbor, address family, etc.</Description>
                                        </import-policy>
                                        <export-policy>
                                                <Description>list of policy names in sequence to be applied on sending a routing update in the current context, e.g., for the current peer group, neighbor, address family, etc.</Description>
                                        </export-policy>
                                    </state>
                                </apply-policy>
                            </peer-group>
                        </peer-groups>
                    </bgp>
                </protocol>
            </protocols>
        </network-instance>
    </network-instances>
</rpd_ni_bgp_oc>
<rpd_rsvp_oc>
    <network-instances>
        <network-instance instance-name='index-name'>
            <instance-name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
            </instance-name>
            <mpls>
                <signaling-protocols>
                    <rsvp-te>
                        <sessions>
                            <session local-index='index-name'>
                                <local-index>
                                        <Description>Reference to the local index for the RSVP session</Description>
                                </local-index>
                                <record-route-objects>
                                    <record-route-object index='index-name'>
                                        <index>
                                                <Description>Reference to the index of the record route object. The index is used to indicate the ordering of hops in the path.</Description>
                                        </index>
                                        <state>
                                            <index>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>Index of object in the list. Used for ordering.</Description>
                                            </index>
                                            <address>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>IP router hop for RRO entry</Description>
                                            </address>
                                            <reported-label>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='Enumerations'> ['IPV4_EXPLICIT_NULL', 'ROUTER_ALERT', 'IPV6_EXPLICIT_NULL', 'IMPLICIT_NULL', 'ENTROPY_LABEL_INDICATOR', 'NO_LABEL']</Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>Label reported for RRO hop</Description>
                                            </reported-label>
                                            <reported-flags>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>Subobject flags for MPLS label</Description>
                                </reported-flags>
                            </state>
                        </record-route-object>
                    </record-route-objects>
                                <state>
                                    <local-index>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>The index used to identify the RSVP session on the local network element. This index is generated by the device and is unique only to the local network element.</Description>
                                    </local-index>
                                    <source-address>
                                            <Leaf_Type name='union'>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                            </Leaf_Type>
                                            <Description>Origin address of RSVP session</Description>
                                    </source-address>
                                    <destination-address>
                                            <Leaf_Type name='union'>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                            </Leaf_Type>
                                            <Description>Destination address of RSVP session</Description>
                                    </destination-address>
                                    <tunnel-id>
                                            <Leaf_Type name='uint16'>
                                            </Leaf_Type>
                                            <Description>The tunnel ID is an identifier used in the RSVP session, which remains constant over the life of the tunnel.</Description>
                                    </tunnel-id>
                                    <lsp-id>
                                            <Leaf_Type name='uint16'>
                                            </Leaf_Type>
                                            <Description>The LSP ID distinguishes between two LSPs originated from the same headend, and is commonly used to distinguish RSVP sessions during make before break operations.</Description>
                                    </lsp-id>
                                    <session-name>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>The signaled name of this RSVP session.</Description>
                                    </session-name>
                                    <status>
                                            <Leaf_Type name='Enumerations'> ['UP', 'DOWN']</Leaf_Type>
                                            <Description>Enumeration of RSVP session states</Description>
                                    </status>
                                    <type>
                                            <Leaf_Type name='Idenity'>
                                            </Leaf_Type>
                                            <Description>The type/role of the RSVP session, signifing the session's role on the current device, such as a transit session vs. an ingress session.</Description>
                                    </type>
                                    <protection-requested>
                                            <Leaf_Type name='Idenity'>
                                            </Leaf_Type>
                                            <Description>The type of protection requested for the RSVP session</Description>
                                    </protection-requested>
                                    <label-in>
                                            <Leaf_Type name='union'>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Leaf_Type name='Enumerations'> ['IPV4_EXPLICIT_NULL', 'ROUTER_ALERT', 'IPV6_EXPLICIT_NULL', 'IMPLICIT_NULL', 'ENTROPY_LABEL_INDICATOR', 'NO_LABEL']</Leaf_Type>
                                            </Leaf_Type>
                                            <Description>Incoming MPLS label associated with this RSVP session</Description>
                                    </label-in>
                                    <label-out>
                                            <Leaf_Type name='union'>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Leaf_Type name='Enumerations'> ['IPV4_EXPLICIT_NULL', 'ROUTER_ALERT', 'IPV6_EXPLICIT_NULL', 'IMPLICIT_NULL', 'ENTROPY_LABEL_INDICATOR', 'NO_LABEL']</Leaf_Type>
                                            </Leaf_Type>
                                            <Description>Outgoing MPLS label associated with this RSVP session</Description>
                                    </label-out>
                                    <sender-tspec>
                                        <rate>
                                                <Leaf_Type name='binary'>
                                                </Leaf_Type>
                                                <Description>The rate at which the head-end device generates traffic, expressed in bytes per second.</Description>
                                        </rate>
                                        <size>
                                                <Leaf_Type name='binary'>
                                                </Leaf_Type>
                                                <Description>The size of the token bucket that is used to determine the rate at which the head-end device generates traffic, expressed in bytes per second.</Description>
                                        </size>
                                        <peak-data-rate>
                                                <Leaf_Type name='union'>
                                                    <Leaf_Type name='binary'>
                                                    </Leaf_Type>
                                                    <Leaf_Type name='Enumerations'> ['INFINITY']</Leaf_Type>
                                                </Leaf_Type>
                                                <Description>The maximum traffic generation rate that the head-end device sends traffic at.</Description>
                                </peak-data-rate>
                            </sender-tspec>
                        </state>
                                <explicit-route-objects>
                                    <explicit-route-object index='index-name'>
                                        <index>
                                                <Leaf_Type name='uint8'>
                                                </Leaf_Type>
                                        </index>
                                        <state>
                                            <index>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                            </index>
                                            <address>
                                                    <Leaf_Type name='string'>
                                                    </Leaf_Type>
                                            </address>
                                            <hop-type>
                                                    <Leaf_Type name='Enumerations'> ['LOOSE', 'STRICT']</Leaf_Type>
                        </hop-type>
                    </state>
                </explicit-route-object>
            </explicit-route-objects>
        </session>
    </sessions>
                        <neighbors>
                            <neighbor address='index-name'>
                                <address>
                                        <Description>Reference to the address of the RSVP neighbor</Description>
                                </address>
                                <state>
                                    <address>
                                            <Leaf_Type name='union'>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                            </Leaf_Type>
                                            <Description>Address of RSVP neighbor</Description>
                                    </address>
                                    <detected-interface>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>Interface where RSVP neighbor was detected</Description>
                                    </detected-interface>
                                    <neighbor-status>
                                            <Leaf_Type name='Enumerations'> ['UP', 'DOWN']</Leaf_Type>
                                            <Description>Enumuration of possible RSVP neighbor states</Description>
                                    </neighbor-status>
                                    <refresh-reduction>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>Suppport of neighbor for RSVP refresh reduction</Description>
                        </refresh-reduction>
                    </state>
                </neighbor>
            </neighbors>
                        <global>
                            <graceful-restart>
                                <state>
                                    <enable>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>Enables graceful restart on the node.</Description>
                                    </enable>
                                    <restart-time>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Graceful restart time (seconds).</Description>
                                    </restart-time>
                                    <recovery-time>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>RSVP state recovery time</Description>
                            </recovery-time>
                        </state>
                    </graceful-restart>
                            <soft-preemption>
                                <state>
                                    <enable>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>Enables soft preemption on a node.</Description>
                                    </enable>
                                    <soft-preemption-timeout>
                                            <Leaf_Type name='uint16'>
                                            </Leaf_Type>
                                            <Description>Timeout value for soft preemption to revert to hard preemption. The default timeout for soft-preemption is 30 seconds - after which the local system reverts to hard pre-emption.</Description>
                            </soft-preemption-timeout>
                        </state>
                    </soft-preemption>
                            <hellos>
                                <state>
                                    <hello-interval>
                                            <Leaf_Type name='uint16'>
                                            </Leaf_Type>
                                            <Description>set the interval in ms between RSVP hello messages</Description>
                                    </hello-interval>
                                    <refresh-reduction>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>enables all RSVP refresh reduction message bundling, RSVP message ID, reliable message delivery and summary refresh</Description>
                            </refresh-reduction>
                        </state>
                    </hellos>
                            <state>
                                <counters>
                                    <path-timeouts>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>TODO</Description>
                                    </path-timeouts>
                                    <reservation-timeouts>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>TODO</Description>
                                    </reservation-timeouts>
                                    <rate-limited-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>RSVP messages dropped due to rate limiting</Description>
                                    </rate-limited-messages>
                                    <in-path-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of received RSVP Path messages</Description>
                                    </in-path-messages>
                                    <in-path-error-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of received RSVP Path Error messages</Description>
                                    </in-path-error-messages>
                                    <in-path-tear-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of received RSVP Path Tear messages</Description>
                                    </in-path-tear-messages>
                                    <in-reservation-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of received RSVP Resv messages</Description>
                                    </in-reservation-messages>
                                    <in-reservation-error-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of received RSVP Resv Error messages</Description>
                                    </in-reservation-error-messages>
                                    <in-reservation-tear-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of received RSVP Resv Tear messages</Description>
                                    </in-reservation-tear-messages>
                                    <in-hello-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of received RSVP hello messages</Description>
                                    </in-hello-messages>
                                    <in-srefresh-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of received RSVP summary refresh messages</Description>
                                    </in-srefresh-messages>
                                    <in-ack-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of received RSVP refresh reduction ack messages</Description>
                                    </in-ack-messages>
                                    <out-path-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of sent RSVP PATH messages</Description>
                                    </out-path-messages>
                                    <out-path-error-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of sent RSVP Path Error messages</Description>
                                    </out-path-error-messages>
                                    <out-path-tear-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of sent RSVP Path Tear messages</Description>
                                    </out-path-tear-messages>
                                    <out-reservation-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of sent RSVP Resv messages</Description>
                                    </out-reservation-messages>
                                    <out-reservation-error-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of sent RSVP Resv Error messages</Description>
                                    </out-reservation-error-messages>
                                    <out-reservation-tear-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of sent RSVP Resv Tear messages</Description>
                                    </out-reservation-tear-messages>
                                    <out-hello-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of sent RSVP hello messages</Description>
                                    </out-hello-messages>
                                    <out-srefresh-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of sent RSVP summary refresh messages</Description>
                                    </out-srefresh-messages>
                                    <out-ack-messages>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                            <Description>Number of sent RSVP refresh reduction ack messages</Description>
                                </out-ack-messages>
                            </counters>
                                <error-counters>
                                    <bad-packet-length>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                    </bad-packet-length>
                                    <bad-packet-version>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                    </bad-packet-version>
                                    <authentication-fail>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                    </authentication-fail>
                                    <bad-checksum>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                    </bad-checksum>
                                    <bad-packet-format>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                    </bad-packet-format>
                                    <recv-pkt-disabled-intf>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                    </recv-pkt-disabled-intf>
                                    <state-timeout>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                    </state-timeout>
                                    <message-out-of-order>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                    </message-out-of-order>
                                    <unknown-ack>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                    </unknown-ack>
                                    <unknown-nack>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                    </unknown-nack>
                                    <received-nack>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                                    </received-nack>
                                    <send-failure>
                                            <Leaf_Type name='uint64'>
                                            </Leaf_Type>
                        </send-failure>
                    </error-counters>
                </state>
            </global>
                        <interface-attributes>
                            <interface interface-id='index-name'>
                                <interface-id>
                                        <Description>reference to the interface-id data</Description>
                                </interface-id>
                                <state>
                                    <interface-id>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>Identifier for the interface</Description>
                                    </interface-id>
                                    <counters>
                                        <in-path-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of received RSVP Path messages</Description>
                                        </in-path-messages>
                                        <in-path-error-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of received RSVP Path Error messages</Description>
                                        </in-path-error-messages>
                                        <in-path-tear-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of received RSVP Path Tear messages</Description>
                                        </in-path-tear-messages>
                                        <in-reservation-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of received RSVP Resv messages</Description>
                                        </in-reservation-messages>
                                        <in-reservation-error-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of received RSVP Resv Error messages</Description>
                                        </in-reservation-error-messages>
                                        <in-reservation-tear-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of received RSVP Resv Tear messages</Description>
                                        </in-reservation-tear-messages>
                                        <in-hello-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of received RSVP hello messages</Description>
                                        </in-hello-messages>
                                        <in-srefresh-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of received RSVP summary refresh messages</Description>
                                        </in-srefresh-messages>
                                        <in-ack-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of received RSVP refresh reduction ack messages</Description>
                                        </in-ack-messages>
                                        <out-path-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of sent RSVP PATH messages</Description>
                                        </out-path-messages>
                                        <out-path-error-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of sent RSVP Path Error messages</Description>
                                        </out-path-error-messages>
                                        <out-path-tear-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of sent RSVP Path Tear messages</Description>
                                        </out-path-tear-messages>
                                        <out-reservation-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of sent RSVP Resv messages</Description>
                                        </out-reservation-messages>
                                        <out-reservation-error-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of sent RSVP Resv Error messages</Description>
                                        </out-reservation-error-messages>
                                        <out-reservation-tear-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of sent RSVP Resv Tear messages</Description>
                                        </out-reservation-tear-messages>
                                        <out-hello-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of sent RSVP hello messages</Description>
                                        </out-hello-messages>
                                        <out-srefresh-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of sent RSVP summary refresh messages</Description>
                                        </out-srefresh-messages>
                                        <out-ack-messages>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of sent RSVP refresh reduction ack messages</Description>
                                    </out-ack-messages>
                                </counters>
                                    <error-counters>
                                        <bad-packet-length>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </bad-packet-length>
                                        <bad-packet-version>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </bad-packet-version>
                                        <authentication-fail>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </authentication-fail>
                                        <bad-checksum>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </bad-checksum>
                                        <bad-packet-format>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </bad-packet-format>
                                        <recv-pkt-disabled-intf>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </recv-pkt-disabled-intf>
                                        <state-timeout>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </state-timeout>
                                        <message-out-of-order>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </message-out-of-order>
                                        <unknown-ack>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </unknown-ack>
                                        <unknown-nack>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </unknown-nack>
                                        <received-nack>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                        </received-nack>
                                        <send-failure>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                </send-failure>
                            </error-counters>
                        </state>
                                <interface-ref>
                                    <state>
                                        <interface>
                                                <Description>Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.</Description>
                                        </interface>
                                        <subinterface>
                                                <Description>Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.</Description>
                                </subinterface>
                            </state>
                        </interface-ref>
                                <bandwidth-reservations>
                                    <bandwidth-reservation priority='index-name'>
                                        <priority>
                                                <Description>Reference to the RSVP priority level</Description>
                                        </priority>
                                        <state>
                                            <priority>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='uint8'>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='Enumerations'> ['ALL']</Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>RSVP priority level for LSPs traversing the interface</Description>
                                            </priority>
                                            <available-bandwidth>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>Bandwidth currently available with the priority level, or for the entire interface when the priority is set to ALL</Description>
                                            </available-bandwidth>
                                            <reserved-bandwidth>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>Bandwidth currently reserved within the priority level, or the sum of all priority levels when the keyword is set to ALL</Description>
                                            </reserved-bandwidth>
                                            <active-reservations-count>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>Number of active RSVP reservations in the associated priority, or the sum of all reservations when the priority level is set to ALL</Description>
                                            </active-reservations-count>
                                            <highwater-mark>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>Maximum bandwidth reserved on the interface within the priority, or across all priorities in the case that the priority level is set to ALL</Description>
                                            </highwater-mark>
                                            <static-bandwidth>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                </static-bandwidth>
                            </state>
                        </bandwidth-reservation>
                    </bandwidth-reservations>
                                <hellos>
                                    <state>
                                        <hello-interval>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>set the interval in ms between RSVP hello messages</Description>
                                        </hello-interval>
                                        <refresh-reduction>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>enables all RSVP refresh reduction message bundling, RSVP message ID, reliable message delivery and summary refresh</Description>
                                </refresh-reduction>
                            </state>
                        </hellos>
                                <authentication>
                                    <state>
                                        <enable>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Enables RSVP authentication on the node.</Description>
                                </enable>
                            </state>
                        </authentication>
                                <subscription>
                                    <state>
                                        <subscription>
                                                <Leaf_Type name='uint8'>
                                                </Leaf_Type>
                                                <Description>percentage of the interface bandwidth that RSVP can reserve</Description>
                                </subscription>
                            </state>
                        </subscription>
                                <protection>
                                    <state>
                                        <link-protection-style-requested>
                                                <Leaf_Type name='Idenity'>
                                                </Leaf_Type>
                                                <Description>Style of mpls frr protection desired: link, link-node, or unprotected</Description>
                                        </link-protection-style-requested>
                                        <bypass-optimize-interval>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>interval between periodic optimization of the bypass LSPs</Description>
                                        </bypass-optimize-interval>
                                    </state>
                                </protection>
                            </interface>
                        </interface-attributes>
                    </rsvp-te>
                </signaling-protocols>
            </mpls>
        </network-instance>
    </network-instances>
</rpd_rsvp_oc>
<rpd_te_oc>
    <network-instances>
        <network-instance instance-name='index-name'>
            <instance-name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
            </instance-name>
            <mpls>
                <te-global-attributes>
                    <srlgs>
                        <srlg name='index-name'>
                            <name>
                                    <Description>The SRLG group identifier</Description>
                            </name>
                            <state>
                                <name>
                                        <Leaf_Type name='string'>
                                        </Leaf_Type>
                                        <Description>SRLG group identifier</Description>
                                </name>
                                <value>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>group ID for the SRLG</Description>
                                </value>
                                <cost>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>The cost of the SRLG to the computation algorithm</Description>
                                </cost>
                                <flooding-type>
                                        <Leaf_Type name='mpls-srlg-flooding-type'>
                                        </Leaf_Type>
                                        <Description>The type of SRLG, either flooded in the IGP or statically configured</Description>
                    </flooding-type>
                </state>
            </srlg>
        </srlgs>
                    <mpls-admin-groups>
                        <admin-group admin-group-name='index-name'>
                            <admin-group-name>
                                    <Description>name for mpls admin-group</Description>
                            </admin-group-name>
                            <state>
                                <admin-group-name>
                                        <Leaf_Type name='string'>
                                        </Leaf_Type>
                                        <Description>name for mpls admin-group</Description>
                                </admin-group-name>
                                <bit-position>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                        <Description>bit-position value for mpls admin-group. The value for the admin group is an integer that represents one of the bit positions in the admin-group bitmask. Values between 0 and 31 are interpreted as the original limit of 32 admin groups. Values &gt;=32 are interpreted as extended admin group values as per RFC7308.</Description>
                    </bit-position>
                </state>
            </admin-group>
        </mpls-admin-groups>
                    <te-lsp-timers>
                        <state>
                            <install-delay>
                                    <Leaf_Type name='uint16'>
                                    </Leaf_Type>
                                    <Description>delay the use of newly installed te lsp for a specified amount of time.</Description>
                            </install-delay>
                            <cleanup-delay>
                                    <Leaf_Type name='uint16'>
                                    </Leaf_Type>
                                    <Description>delay the removal of old te lsp for a specified amount of time</Description>
                            </cleanup-delay>
                            <reoptimize-timer>
                                    <Leaf_Type name='uint16'>
                                    </Leaf_Type>
                                    <Description>frequency of reoptimization of a traffic engineered LSP</Description>
                </reoptimize-timer>
            </state>
        </te-lsp-timers>
    </te-global-attributes>
                <te-interface-attributes>
                    <interface interface-id='index-name'>
                        <interface-id>
                                <Description>Reference to the interface id list key</Description>
                        </interface-id>
                        <state>
                            <interface-id>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                    <Description>Id of the interface</Description>
                            </interface-id>
                            <srlg-membership>
                                    <Description>list of references to named shared risk link groups that the interface belongs to.</Description>
                            </srlg-membership>
                            <admin-group>
                                    <Leaf_Type name='string'>
                                    </Leaf_Type>
                                    <Description>list of admin groups (by name) on the interface</Description>
                        </admin-group>
                    </state>
                        <interface-ref>
                            <state>
                                <interface>
                                        <Description>Reference to a base interface.  If a reference to a subinterface is required, this leaf must be specified to indicate the base interface.</Description>
                                </interface>
                                <subinterface>
                                        <Description>Reference to a subinterface -- this requires the base interface to be specified using the interface leaf in this container.  If only a reference to a base interface is requuired, this leaf should not be set.</Description>
                        </subinterface>
                    </state>
                </interface-ref>
                        <igp-flooding-bandwidth>
                            <state>
                                <threshold-type>
                                        <Leaf_Type name='Enumerations'> ['DELTA', 'THRESHOLD_CROSSED']</Leaf_Type>
                                        <Description>The type of threshold that should be used to specify the values at which bandwidth is flooded. DELTA indicates that the local system should flood IGP updates when a change in reserved bandwidth &gt;= the specified delta occurs on the interface. Where THRESHOLD_CROSSED is specified, the local system should trigger an update (and hence flood) the reserved bandwidth when the reserved bandwidth changes such that it crosses, or becomes equal to one of the threshold values</Description>
                                </threshold-type>
                                <delta-percentage>
                                        <Leaf_Type name='uint8'>
                                        </Leaf_Type>
                                        <Description>The percentage of the maximum-reservable-bandwidth considered as the delta that results in an IGP update being flooded</Description>
                        </delta-percentage>
                    </state>
                </igp-flooding-bandwidth>
                        <bandwidth-measurement>
                            <state>
                                <last-calculated-sr-utilisation>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                                </last-calculated-sr-utilisation>
                                <last-sample-measured-sr-util>
                                        <Leaf_Type name='uint64'>
                                        </Leaf_Type>
                </last-sample-measured-sr-util>
            </state>
        </bandwidth-measurement>
    </interface>
</te-interface-attributes>
                <lsps>
                    <constrained-path>
                        <named-explicit-paths>
                            <named-explicit-path name='index-name'>
                                <name>
                                        <Description>A string name that uniquely identifies an explicit path</Description>
                                </name>
                                <state>
                                    <name>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>A string name that uniquely identifies an explicit path</Description>
                                </name>
                            </state>
                                <explicit-route-objects>
                                    <explicit-route-object index='index-name'>
                                        <index>
                                                <Description>Index of this explicit route object, to express the order of hops in path</Description>
                                        </index>
                                        <state>
                                            <address>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>router hop for the LSP path</Description>
                                            </address>
                                            <hop-type>
                                                    <Leaf_Type name='mpls-hop-type'>
                                                    </Leaf_Type>
                                                    <Description>strict or loose hop</Description>
                                            </hop-type>
                                            <index>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>Index of this explicit route object to express the order of hops in the path</Description>
                        </index>
                    </state>
                </explicit-route-object>
            </explicit-route-objects>
        </named-explicit-path>
    </named-explicit-paths>
                        <tunnels>
                            <tunnel name='index-name'>
                                <name>
                                        <Description>The tunnel name</Description>
                                </name>
                                <state>
                                    <name>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>The tunnel name</Description>
                                    </name>
                                    <type>
                                            <Leaf_Type name='Idenity'>
                                            </Leaf_Type>
                                            <Description>Tunnel type, p2p or p2mp</Description>
                                    </type>
                                    <signaling-protocol>
                                            <Leaf_Type name='Idenity'>
                                            </Leaf_Type>
                                            <Description>Signaling protocol used to set up this tunnel</Description>
                                    </signaling-protocol>
                                    <description>
                                            <Leaf_Type name='string'>
                                            </Leaf_Type>
                                            <Description>optional text description for the tunnel</Description>
                                    </description>
                                    <admin-status>
                                            <Leaf_Type name='Idenity'>
                                            </Leaf_Type>
                                            <Description>TE tunnel administrative state.</Description>
                                    </admin-status>
                                    <preference>
                                            <Leaf_Type name='uint8'>
                                            </Leaf_Type>
                                            <Description>Specifies a preference for this tunnel. A lower number signifies a better preference</Description>
                                    </preference>
                                    <metric-type>
                                            <Leaf_Type name='Idenity'>
                                            </Leaf_Type>
                                            <Description>The type of metric specification that should be used to set the LSP(s) metric</Description>
                                    </metric-type>
                                    <metric>
                                            <Leaf_Type name='int32'>
                                            </Leaf_Type>
                                            <Description>The value of the metric that should be specified. The value supplied in this leaf is used in conjunction with the metric type to determine the value of the metric used by the system. Where the metric-type is set to LSP_METRIC_ABSOLUTE - the value of this leaf is used directly; where it is set to LSP_METRIC_RELATIVE, the relevant (positive or negative) offset is used to formulate the metric; where metric-type is LSP_METRIC_INHERITED, the value of this leaf is not utilised</Description>
                                    </metric>
                                    <protection-style-requested>
                                            <Leaf_Type name='Idenity'>
                                            </Leaf_Type>
                                            <Description>style of mpls frr protection desired: can be link, link-node or unprotected.</Description>
                                    </protection-style-requested>
                                    <reoptimize-timer>
                                            <Leaf_Type name='uint16'>
                                            </Leaf_Type>
                                            <Description>frequency of reoptimization of a traffic engineered LSP</Description>
                                    </reoptimize-timer>
                                    <source>
                                            <Leaf_Type name='union'>
                                                <Leaf_Type name='string'>
                                                <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                                <Leaf_Type name='string'>
                                                <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                </Leaf_Type>
                                            </Leaf_Type>
                                            <Description>RSVP-TE tunnel source address</Description>
                                    </source>
                                    <soft-preemption>
                                            <Leaf_Type name='boolean'>
                                            </Leaf_Type>
                                            <Description>Enables RSVP soft-preemption on this LSP</Description>
                                    </soft-preemption>
                                    <setup-priority>
                                            <Leaf_Type name='uint8'>
                                            </Leaf_Type>
                                            <Description>RSVP-TE preemption priority during LSP setup, lower is higher priority; default 7 indicates that LSP will not preempt established LSPs during setup</Description>
                                    </setup-priority>
                                    <hold-priority>
                                            <Leaf_Type name='uint8'>
                                            </Leaf_Type>
                                            <Description>preemption priority once the LSP is established, lower is higher priority; default 0 indicates other LSPs will not preempt the LSPs once established</Description>
                                    </hold-priority>
                                    <oper-status>
                                            <Leaf_Type name='Idenity'>
                                            </Leaf_Type>
                                            <Description>The operational status of the TE tunnel</Description>
                                    </oper-status>
                                    <counters>
                                        <path-changes>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of path changes for the label switched path</Description>
                                        </path-changes>
                                        <state-changes>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>Number of state changes for the label switched path</Description>
                                        </state-changes>
                                        <online-time>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Indication of the time the label switched path transitioned to an Oper Up or in-service state</Description>
                                        </online-time>
                                        <current-path-time>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Indicates the time the LSP switched onto its current path. This is reset upon a LSP path change.</Description>
                                        </current-path-time>
                                        <next-reoptimization-time>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                                <Description>Indicates the next scheduled time the LSP will be reoptimized.</Description>
                                        </next-reoptimization-time>
                                        <last-transition-time>
                                                <Leaf_Type name='string'>
                                                <Pattern>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2})</Pattern>
                                                </Leaf_Type>
                                    </last-transition-time>
                                </counters>
                                    <inherited-metric>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                </inherited-metric>
                            </state>
                                <bandwidth>
                                    <state>
                                        <specification-type>
                                                <Leaf_Type name='te-bandwidth-type'>
                                                </Leaf_Type>
                                                <Description>The method used for settign the bandwidth, either explicitly specified or configured</Description>
                                        </specification-type>
                                        <set-bandwidth>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>set bandwidth explicitly, e.g., using offline calculation</Description>
                                        </set-bandwidth>
                                        <signaled-bandwidth>
                                                <Leaf_Type name='uint64'>
                                                </Leaf_Type>
                                                <Description>The currently signaled bandwidth of the LSP. In the case where the bandwidth is specified explicitly, then this will match the value of the set-bandwidth leaf; in cases where the bandwidth is dynamically computed by the system, the current value of the bandwidth should be reflected.</Description>
                                    </signaled-bandwidth>
                                </state>
                                    <auto-bandwidth>
                                        <state>
                                            <enabled>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>enables mpls auto-bandwidth on the lsp</Description>
                                            </enabled>
                                            <min-bw>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>set the minimum bandwidth in Kbps for an auto-bandwidth LSP</Description>
                                            </min-bw>
                                            <max-bw>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                                    <Description>set the maximum bandwidth in Kbps for an auto-bandwidth LSP</Description>
                                            </max-bw>
                                            <adjust-interval>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>time in seconds between adjustments to LSP bandwidth</Description>
                                            </adjust-interval>
                                            <adjust-threshold>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>percentage difference between the LSP's specified bandwidth and its current bandwidth allocation -- if the difference is greater than the specified percentage, auto-bandwidth adjustment is triggered</Description>
                                            </adjust-threshold>
                                            <max-average-bw>
                                                    <Leaf_Type name='uint64'>
                                                    </Leaf_Type>
                                        </max-average-bw>
                                    </state>
                                        <overflow>
                                            <state>
                                                <enabled>
                                                        <Leaf_Type name='boolean'>
                                                        </Leaf_Type>
                                                        <Description>enables mpls lsp bandwidth overflow adjustment on the lsp</Description>
                                                </enabled>
                                                <trigger-event-count>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>number of consecutive overflow sample events needed to trigger an overflow adjustment</Description>
                                        </trigger-event-count>
                                    </state>
                                </overflow>
                                        <underflow>
                                            <state>
                                                <enabled>
                                                        <Leaf_Type name='boolean'>
                                                        </Leaf_Type>
                                                        <Description>enables bandwidth underflow adjustment on the lsp</Description>
                                                </enabled>
                                                <trigger-event-count>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>number of consecutive underflow sample events needed to trigger an underflow adjustment</Description>
                                </trigger-event-count>
                            </state>
                        </underflow>
                    </auto-bandwidth>
                </bandwidth>
                                <p2p-tunnel-attributes>
                                    <state>
                                        <destination>
                                                <Leaf_Type name='union'>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                </Leaf_Type>
                                                <Description>P2P tunnel destination address</Description>
                                    </destination>
                                </state>
                                    <p2p-primary-path>
                                        <p2p-primary-path name='index-name'>
                                            <name>
                                                    <Description>Path name</Description>
                                            </name>
                                            <state>
                                                <name>
                                                        <Leaf_Type name='string'>
                                                        </Leaf_Type>
                                                        <Description>Path name</Description>
                                                </name>
                                                <use-cspf>
                                                        <Leaf_Type name='boolean'>
                                                        </Leaf_Type>
                                                        <Description>Flag to enable CSPF for locally computed LSPs</Description>
                                                </use-cspf>
                                                <cspf-tiebreaker>
                                                        <Leaf_Type name='cspf-tie-breaking'>
                                                        </Leaf_Type>
                                                        <Description>Determine the tie-breaking method to choose between equally desirable paths during CSFP computation</Description>
                                                </cspf-tiebreaker>
                                                <explicit-path-name>
                                                        <Description>reference to a defined path</Description>
                                                </explicit-path-name>
                                                <preference>
                                                        <Leaf_Type name='uint8'>
                                                        </Leaf_Type>
                                                        <Description>Specifies a preference for this path. The lower the number higher the preference</Description>
                                                </preference>
                                                <setup-priority>
                                                        <Leaf_Type name='uint8'>
                                                        </Leaf_Type>
                                                        <Description>RSVP-TE preemption priority during LSP setup, lower is higher priority; default 7 indicates that LSP will not preempt established LSPs during setup</Description>
                                                </setup-priority>
                                                <hold-priority>
                                                        <Leaf_Type name='uint8'>
                                                        </Leaf_Type>
                                                        <Description>preemption priority once the LSP is established, lower is higher priority; default 0 indicates other LSPs will not preempt the LSPs once established</Description>
                                                </hold-priority>
                                                <retry-timer>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>sets the time between attempts to establish the LSP</Description>
                                                </retry-timer>
                                                <notify-status>
                                                        <Leaf_Type name='string'>
                                                        </Leaf_Type>
                                                </notify-status>
                                                <cspf-status>
                                                        <Leaf_Type name='Enumerations'> ['CSPF_REOPTIMIZATION_PENDING', 'CSPF_ENQUEUED', 'CSPF_WILL_BE_ENQUEUED', 'CSPF_NO_COMPUTED_ERO', 'CSPF_COMPUTED_ERO_AVAILABLE']</Leaf_Type>
                                                </cspf-status>
                                                <cspf-metric>
                                                        <Leaf_Type name='uint64'>
                                                        </Leaf_Type>
                                                </cspf-metric>
                                                <associated-rsvp-sessions>
                                                    <associated-rsvp-session local-index='index-name'>
                                                        <local-index>
                                                                <Leaf_Type name='uint32'>
                                                                </Leaf_Type>
                                            </local-index>
                                        </associated-rsvp-session>
                                    </associated-rsvp-sessions>
                                </state>
                                            <admin-groups>
                                                <state>
                                                    <exclude-group>
                                                            <Description>list of references to named admin-groups to exclude in path calculation.</Description>
                                                    </exclude-group>
                                                    <include-all-group>
                                                            <Description>list of references to named admin-groups of which all must be included</Description>
                                                    </include-all-group>
                                                    <include-any-group>
                                                            <Description>list of references to named admin-groups of which one must be included</Description>
                                            </include-any-group>
                                        </state>
                                    </admin-groups>
                                            <lsp-instances>
                                                <local-index>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                </local-index>
                                                <state>
                                                    <local-index>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                    </local-index>
                                                    <notify-status>
                                                            <Leaf_Type name='string'>
                                                            </Leaf_Type>
                                                    </notify-status>
                                                    <metric>
                                                            <Leaf_Type name='int32'>
                                                            </Leaf_Type>
                                                    </metric>
                                                    <bandwidth>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                                                    </bandwidth>
                                                    <max-avg-bandwidth>
                                                            <Leaf_Type name='uint64'>
                                                            </Leaf_Type>
                                    </max-avg-bandwidth>
                                </state>
                            </lsp-instances>
                        </p2p-primary-path>
                    </p2p-primary-path>
                                    <p2p-secondary-paths>
                                        <p2p-secondary-path name='index-name'>
                                            <name>
                                                    <Description>Path name</Description>
                                            </name>
                                            <state>
                                                <name>
                                                        <Leaf_Type name='string'>
                                                        </Leaf_Type>
                                                        <Description>Path name</Description>
                                                </name>
                                                <use-cspf>
                                                        <Leaf_Type name='boolean'>
                                                        </Leaf_Type>
                                                        <Description>Flag to enable CSPF for locally computed LSPs</Description>
                                                </use-cspf>
                                                <cspf-tiebreaker>
                                                        <Leaf_Type name='cspf-tie-breaking'>
                                                        </Leaf_Type>
                                                        <Description>Determine the tie-breaking method to choose between equally desirable paths during CSFP computation</Description>
                                                </cspf-tiebreaker>
                                                <explicit-path-name>
                                                        <Description>reference to a defined path</Description>
                                                </explicit-path-name>
                                                <preference>
                                                        <Leaf_Type name='uint8'>
                                                        </Leaf_Type>
                                                        <Description>Specifies a preference for this path. The lower the number higher the preference</Description>
                                                </preference>
                                                <setup-priority>
                                                        <Leaf_Type name='uint8'>
                                                        </Leaf_Type>
                                                        <Description>RSVP-TE preemption priority during LSP setup, lower is higher priority; default 7 indicates that LSP will not preempt established LSPs during setup</Description>
                                                </setup-priority>
                                                <hold-priority>
                                                        <Leaf_Type name='uint8'>
                                                        </Leaf_Type>
                                                        <Description>preemption priority once the LSP is established, lower is higher priority; default 0 indicates other LSPs will not preempt the LSPs once established</Description>
                                                </hold-priority>
                                                <retry-timer>
                                                        <Leaf_Type name='uint16'>
                                                        </Leaf_Type>
                                                        <Description>sets the time between attempts to establish the LSP</Description>
                                                </retry-timer>
                                                <associated-rsvp-sessions>
                                                    <associated-rsvp-session local-index='index-name'>
                                                        <local-index>
                                                                <Leaf_Type name='uint32'>
                                                                </Leaf_Type>
                                            </local-index>
                                        </associated-rsvp-session>
                                    </associated-rsvp-sessions>
                                </state>
                                            <admin-groups>
                                                <state>
                                                    <exclude-group>
                                                            <Description>list of references to named admin-groups to exclude in path calculation.</Description>
                                                    </exclude-group>
                                                    <include-all-group>
                                                            <Description>list of references to named admin-groups of which all must be included</Description>
                                                    </include-all-group>
                                                    <include-any-group>
                                                            <Description>list of references to named admin-groups of which one must be included</Description>
                                                    </include-any-group>
                                                </state>
                                            </admin-groups>
                                        </p2p-secondary-path>
                                    </p2p-secondary-paths>
                                </p2p-tunnel-attributes>
                            </tunnel>
                        </tunnels>
                    </constrained-path>
                </lsps>
            </mpls>
        </network-instance>
    </network-instances>
</rpd_te_oc>
<smid_oc>
    <junos>
        <system>
            <subscriber-management>
                <infra>
                    <sdb>
                        <statistics>
                            <state>
                                <init-state-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </init-state-count>
                                <configured-state-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </configured-state-count>
                                <active-state-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </active-state-count>
                                <terminating-state-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </terminating-state-count>
                                <terminated-state-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </terminated-state-count>
                                <total-state-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                            </total-state-count>
                        </state>
                            <client-type>
                                <dhcp-client-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </dhcp-client-count>
                                <vlan-client-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </vlan-client-count>
                                <ppp-client-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </ppp-client-count>
                                <pppoe-client-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </pppoe-client-count>
                                <l2tp-client-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </l2tp-client-count>
                                <static-client-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </static-client-count>
                                <vpls-pw-client-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </vpls-pw-client-count>
                                <mlppp-client-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </mlppp-client-count>
                                <essm-client-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </essm-client-count>
                                <total-client-count>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                    </total-client-count>
                </client-type>
            </statistics>
        </sdb>
                    <resource-monitor>
                        <chassis>
                            <configured-subscriber-limit>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>The configured number of subscribers allowed for this hardware container. A value  of 0 indicates that no limit has been configured for this hardware container.</Description>
                            </configured-subscriber-limit>
                            <current-subscriber-count>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>The current number of subscribers associated with this hardware container</Description>
                            </current-subscriber-count>
                            <subscriber-limit-exceeded>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Count of subscriber limit threshold exceeded crossing events</Description>
                            </subscriber-limit-exceeded>
                            <subscriber-limit-nominal>
                                    <Leaf_Type name='uint32'>
                                    </Leaf_Type>
                                    <Description>Count of subscriber limit threshold nominal crossing events</Description>
                        </subscriber-limit-nominal>
                    </chassis>
                        <fpcs>
                            <fpc slot='index-name'>
                                <slot>
                                        <Leaf_Type name='uint32'>
                                        </Leaf_Type>
                                </slot>
                                <statistics>
                                    <heap-memory-used>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                    </heap-memory-used>
                                    <client-session-denied-count>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                    </client-session-denied-count>
                                    <service-session-denied-count>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                    </service-session-denied-count>
                                    <rtt-throttled-sub-count-client>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                    </rtt-throttled-sub-count-client>
                                    <rtt-throttled-sub-count-service>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                    </rtt-throttled-sub-count-service>
                                    <configured-subscriber-limit>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>The configured number of subscribers allowed for this hardware container. A value  of 0 indicates that no limit has been configured for this hardware container.</Description>
                                    </configured-subscriber-limit>
                                    <current-subscriber-count>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>The current number of subscribers associated with this hardware container</Description>
                                    </current-subscriber-count>
                                    <mem-heap-exceeded>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Count of FPC heap-memory threshold exceeded crossing events</Description>
                                    </mem-heap-exceeded>
                                    <mem-heap-nominal>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Count of FPC heap-memory threshold nominal crossing events</Description>
                                    </mem-heap-nominal>
                                    <subscriber-limit-exceeded>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Count of subscriber limit threshold exceeded crossing events</Description>
                                    </subscriber-limit-exceeded>
                                    <subscriber-limit-nominal>
                                            <Leaf_Type name='uint32'>
                                            </Leaf_Type>
                                            <Description>Count of subscriber limit threshold nominal crossing events</Description>
                                    </subscriber-limit-nominal>
                                    <pfes>
                                        <pfe pfe-no='index-name'>
                                            <pfe-no>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                            </pfe-no>
                                            <filter-memory-used>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                            </filter-memory-used>
                                            <ifl-memory-used>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                            </ifl-memory-used>
                                            <expansion-memory-used>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                            </expansion-memory-used>
                                            <nh-memory-free>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                            </nh-memory-free>
                                            <fw-memory-free>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                            </fw-memory-free>
                                            <mem-ifl-exceeded>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>Count of IFL-memory threshold exceeded crossing events</Description>
                                            </mem-ifl-exceeded>
                                            <mem-ifl-nominal>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>Count of IFL-memory threshold nominal crossing events</Description>
                                            </mem-ifl-nominal>
                                            <mem-expansion-exceeded>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>Count of expansion-memory threshold exceeded crossing events</Description>
                                            </mem-expansion-exceeded>
                                            <mem-expansion-nominal>
                                                    <Leaf_Type name='uint32'>
                                                    </Leaf_Type>
                                                    <Description>Count of expansion-memory threshold nominal crossing events</Description>
                                            </mem-expansion-nominal>
                                            <sched-blocks>
                                                <sched-block sblock-no='index-name'>
                                                    <sblock-no>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                    </sblock-no>
                                                    <queues-max>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The total number of queues in this scheduler block</Description>
                                                    </queues-max>
                                                    <queues-allocated>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>The total number of queues in use from this scheduler block</Description>
                                                    </queues-allocated>
                                                    <cos-utilization-exceeded>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>Count of CoS utilization threshold exceeded crossing events</Description>
                                                    </cos-utilization-exceeded>
                                                    <cos-utilization-nominal>
                                                            <Leaf_Type name='uint32'>
                                                            </Leaf_Type>
                                                            <Description>Count of CoS utilization threshold nominal crossing events</Description>
                                </cos-utilization-nominal>
                            </sched-block>
                        </sched-blocks>
                    </pfe>
                </pfes>
            </statistics>
                                <pics>
                                    <pic pic-no='index-name'>
                                        <pic-no>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                        </pic-no>
                                        <configured-subscriber-limit>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>The configured number of subscribers allowed for this hardware container. A value  of 0 indicates that no limit has been configured for this hardware container.</Description>
                                        </configured-subscriber-limit>
                                        <current-subscriber-count>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>The current number of subscribers associated with this hardware container</Description>
                                        </current-subscriber-count>
                                        <subscriber-limit-exceeded>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Count of subscriber limit threshold exceeded crossing events</Description>
                                        </subscriber-limit-exceeded>
                                        <subscriber-limit-nominal>
                                                <Leaf_Type name='uint32'>
                                                </Leaf_Type>
                                                <Description>Count of subscriber limit threshold nominal crossing events</Description>
                                        </subscriber-limit-nominal>
                                        <ports>
                                            <port port-no='index-name'>
                                                <port-no>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                </port-no>
                                                <configured-subscriber-limit>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>The configured number of subscribers allowed for this hardware container. A value  of 0 indicates that no limit has been configured for this hardware container.</Description>
                                                </configured-subscriber-limit>
                                                <current-subscriber-count>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>The current number of subscribers associated with this hardware container</Description>
                                                </current-subscriber-count>
                                                <subscriber-limit-exceeded>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>Count of subscriber limit threshold exceeded crossing events</Description>
                                                </subscriber-limit-exceeded>
                                                <subscriber-limit-nominal>
                                                        <Leaf_Type name='uint32'>
                                                        </Leaf_Type>
                                                        <Description>Count of subscriber limit threshold nominal crossing events</Description>
                                                </subscriber-limit-nominal>
                                            </port>
                                        </ports>
                                    </pic>
                                </pics>
                            </fpc>
                        </fpcs>
                    </resource-monitor>
                </infra>
            </subscriber-management>
        </system>
    </junos>
</smid_oc>
<vrrpd_oc>
    <interfaces>
        <interface name='index-name'>
            <name>
                    <Leaf_Type name='string'>
                    </Leaf_Type>
            </name>
            <subinterfaces>
                <subinterface index='index-name'>
                    <index>
                            <Leaf_Type name='uint32'>
                            </Leaf_Type>
                    </index>
                    <ipv4>
                        <addresses>
                            <address ip='index-name'>
                                <ip>
                                        <Leaf_Type name='union'>
                                            <Leaf_Type name='string'>
                                            <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                            <Leaf_Type name='string'>
                                            <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                        </Leaf_Type>
                                </ip>
                                <vrrp>
                                    <vrrp-group virtual-router-id='index-name'>
                                        <state>
                                            <virtual-router-id>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>Set the virtual router id for use by the VRRP group.  This usually also determines the virtual MAC address that is generated for the VRRP group</Description>
                                            </virtual-router-id>
                                            <virtual-address>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>Configure one or more virtual addresses for the VRRP group</Description>
                                            </virtual-address>
                                            <priority>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>Specifies the sending VRRP interface's priority for the virtual router.  Higher values equal higher priority</Description>
                                            </priority>
                                            <preempt>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>When set to true, enables preemption by a higher priority backup router of a lower priority master router</Description>
                                            </preempt>
                                            <preempt-delay>
                                                    <Leaf_Type name='uint16'>
                                                    </Leaf_Type>
                                                    <Description>Set the delay the higher priority router waits before preempting</Description>
                                            </preempt-delay>
                                            <accept-mode>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>Configure whether packets destined for virtual addresses are accepted even when the virtual address is not owned by the router interface</Description>
                                            </accept-mode>
                                            <advertisement-interval>
                                                    <Leaf_Type name='uint16'>
                                                    </Leaf_Type>
                                                    <Description>Sets the interval between successive VRRP advertisements -- RFC 5798 defines this as a 12-bit value expressed as 0.1 seconds, with default 100, i.e., 1 second.  Several implementation express this in units of seconds</Description>
                                            </advertisement-interval>
                                            <current-priority>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>Operational value of the priority for the interface in the VRRP group</Description>
                                        </current-priority>
                                    </state>
                                        <interface-tracking>
                                            <state>
                                                <track-interface>
                                                        <Description>Sets an interface that should be tracked for up/down events to dynamically change the priority state of the VRRP group, and potentially change the mastership if the tracked interface going down lowers the priority sufficiently</Description>
                                                </track-interface>
                                                <priority-decrement>
                                                        <Leaf_Type name='uint8'>
                                                        </Leaf_Type>
                                                        <Description>Set the value to subtract from priority when the tracked interface goes down</Description>
                    </priority-decrement>
                </state>
            </interface-tracking>
        </vrrp-group>
    </vrrp>
</address>
</addresses>
</ipv4>
                    <ipv6>
                        <addresses>
                            <address ip='index-name'>
                                <ip>
                                        <Leaf_Type name='union'>
                                            <Leaf_Type name='string'>
                                            <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                            <Leaf_Type name='string'>
                                            <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                            </Leaf_Type>
                                        </Leaf_Type>
                                </ip>
                                <vrrp>
                                    <vrrp-group>
                                        <state>
                                            <virtual-router-id>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>Set the virtual router id for use by the VRRP group.  This usually also determines the virtual MAC address that is generated for the VRRP group</Description>
                                            </virtual-router-id>
                                            <virtual-address>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>Configure one or more virtual addresses for the VRRP group</Description>
                                            </virtual-address>
                                            <priority>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>Specifies the sending VRRP interface's priority for the virtual router.  Higher values equal higher priority</Description>
                                            </priority>
                                            <preempt>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>When set to true, enables preemption by a higher priority backup router of a lower priority master router</Description>
                                            </preempt>
                                            <preempt-delay>
                                                    <Leaf_Type name='uint16'>
                                                    </Leaf_Type>
                                                    <Description>Set the delay the higher priority router waits before preempting</Description>
                                            </preempt-delay>
                                            <accept-mode>
                                                    <Leaf_Type name='boolean'>
                                                    </Leaf_Type>
                                                    <Description>Configure whether packets destined for virtual addresses are accepted even when the virtual address is not owned by the router interface</Description>
                                            </accept-mode>
                                            <advertisement-interval>
                                                    <Leaf_Type name='uint16'>
                                                    </Leaf_Type>
                                                    <Description>Sets the interval between successive VRRP advertisements -- RFC 5798 defines this as a 12-bit value expressed as 0.1 seconds, with default 100, i.e., 1 second.  Several implementation express this in units of seconds</Description>
                                            </advertisement-interval>
                                            <current-priority>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>Operational value of the priority for the interface in the VRRP group</Description>
                                            </current-priority>
                                            <virtual-link-local>
                                                    <Leaf_Type name='union'>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                        <Leaf_Type name='string'>
                                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                        </Leaf_Type>
                                                    </Leaf_Type>
                                                    <Description>For VRRP on IPv6 interfaces, sets the virtual link local address</Description>
                                        </virtual-link-local>
                                    </state>
                                        <interface-tracking>
                                            <state>
                                                <track-interface>
                                                        <Description>Sets an interface that should be tracked for up/down events to dynamically change the priority state of the VRRP group, and potentially change the mastership if the tracked interface going down lowers the priority sufficiently</Description>
                                                </track-interface>
                                                <priority-decrement>
                                                        <Leaf_Type name='uint8'>
                                                        </Leaf_Type>
                                                        <Description>Set the value to subtract from priority when the tracked interface goes down</Description>
            </priority-decrement>
        </state>
    </interface-tracking>
</vrrp-group>
</vrrp>
</address>
</addresses>
</ipv6>
</subinterface>
</subinterfaces>
            <routed-vlan>
                <ipv4>
                    <addresses>
                        <address ip='index-name'>
                            <ip>
                                    <Leaf_Type name='union'>
                                        <Leaf_Type name='string'>
                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                        </Leaf_Type>
                                        <Leaf_Type name='string'>
                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                        </Leaf_Type>
                                    </Leaf_Type>
                            </ip>
                            <vrrp>
                                <vrrp-group virtual-router-id='index-name'>
                                    <state>
                                        <virtual-router-id>
                                                <Leaf_Type name='uint8'>
                                                </Leaf_Type>
                                                <Description>Set the virtual router id for use by the VRRP group.  This usually also determines the virtual MAC address that is generated for the VRRP group</Description>
                                        </virtual-router-id>
                                        <virtual-address>
                                                <Leaf_Type name='union'>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                </Leaf_Type>
                                                <Description>Configure one or more virtual addresses for the VRRP group</Description>
                                        </virtual-address>
                                        <priority>
                                                <Leaf_Type name='uint8'>
                                                </Leaf_Type>
                                                <Description>Specifies the sending VRRP interface's priority for the virtual router.  Higher values equal higher priority</Description>
                                        </priority>
                                        <preempt>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>When set to true, enables preemption by a higher priority backup router of a lower priority master router</Description>
                                        </preempt>
                                        <preempt-delay>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>Set the delay the higher priority router waits before preempting</Description>
                                        </preempt-delay>
                                        <accept-mode>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Configure whether packets destined for virtual addresses are accepted even when the virtual address is not owned by the router interface</Description>
                                        </accept-mode>
                                        <advertisement-interval>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>Sets the interval between successive VRRP advertisements -- RFC 5798 defines this as a 12-bit value expressed as 0.1 seconds, with default 100, i.e., 1 second.  Several implementation express this in units of seconds</Description>
                                        </advertisement-interval>
                                        <current-priority>
                                                <Leaf_Type name='uint8'>
                                                </Leaf_Type>
                                                <Description>Operational value of the priority for the interface in the VRRP group</Description>
                                    </current-priority>
                                </state>
                                    <interface-tracking>
                                        <state>
                                            <track-interface>
                                                    <Description>Sets an interface that should be tracked for up/down events to dynamically change the priority state of the VRRP group, and potentially change the mastership if the tracked interface going down lowers the priority sufficiently</Description>
                                            </track-interface>
                                            <priority-decrement>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>Set the value to subtract from priority when the tracked interface goes down</Description>
                </priority-decrement>
            </state>
        </interface-tracking>
    </vrrp-group>
</vrrp>
</address>
</addresses>
</ipv4>
                <ipv6>
                    <addresses>
                        <address ip='index-name'>
                            <ip>
                                    <Leaf_Type name='union'>
                                        <Leaf_Type name='string'>
                                        <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                        </Leaf_Type>
                                        <Leaf_Type name='string'>
                                        <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                        </Leaf_Type>
                                    </Leaf_Type>
                            </ip>
                            <vrrp>
                                <vrrp-group>
                                    <state>
                                        <virtual-router-id>
                                                <Leaf_Type name='uint8'>
                                                </Leaf_Type>
                                                <Description>Set the virtual router id for use by the VRRP group.  This usually also determines the virtual MAC address that is generated for the VRRP group</Description>
                                        </virtual-router-id>
                                        <virtual-address>
                                                <Leaf_Type name='union'>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                </Leaf_Type>
                                                <Description>Configure one or more virtual addresses for the VRRP group</Description>
                                        </virtual-address>
                                        <priority>
                                                <Leaf_Type name='uint8'>
                                                </Leaf_Type>
                                                <Description>Specifies the sending VRRP interface's priority for the virtual router.  Higher values equal higher priority</Description>
                                        </priority>
                                        <preempt>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>When set to true, enables preemption by a higher priority backup router of a lower priority master router</Description>
                                        </preempt>
                                        <preempt-delay>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>Set the delay the higher priority router waits before preempting</Description>
                                        </preempt-delay>
                                        <accept-mode>
                                                <Leaf_Type name='boolean'>
                                                </Leaf_Type>
                                                <Description>Configure whether packets destined for virtual addresses are accepted even when the virtual address is not owned by the router interface</Description>
                                        </accept-mode>
                                        <advertisement-interval>
                                                <Leaf_Type name='uint16'>
                                                </Leaf_Type>
                                                <Description>Sets the interval between successive VRRP advertisements -- RFC 5798 defines this as a 12-bit value expressed as 0.1 seconds, with default 100, i.e., 1 second.  Several implementation express this in units of seconds</Description>
                                        </advertisement-interval>
                                        <current-priority>
                                                <Leaf_Type name='uint8'>
                                                </Leaf_Type>
                                                <Description>Operational value of the priority for the interface in the VRRP group</Description>
                                        </current-priority>
                                        <virtual-link-local>
                                                <Leaf_Type name='union'>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                    <Leaf_Type name='string'>
                                                    <Pattern>((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?</Pattern>
                                                    </Leaf_Type>
                                                </Leaf_Type>
                                                <Description>For VRRP on IPv6 interfaces, sets the virtual link local address</Description>
                                    </virtual-link-local>
                                </state>
                                    <interface-tracking>
                                        <state>
                                            <track-interface>
                                                    <Description>Sets an interface that should be tracked for up/down events to dynamically change the priority state of the VRRP group, and potentially change the mastership if the tracked interface going down lowers the priority sufficiently</Description>
                                            </track-interface>
                                            <priority-decrement>
                                                    <Leaf_Type name='uint8'>
                                                    </Leaf_Type>
                                                    <Description>Set the value to subtract from priority when the tracked interface goes down</Description>
                                            </priority-decrement>
                                        </state>
                                    </interface-tracking>
                                </vrrp-group>
                            </vrrp>
                        </address>
                    </addresses>
                </ipv6>
            </routed-vlan>
        </interface>
    </interfaces>
</vrrpd_oc>
</xpaths>
